/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-06-29 15:33:27.285178
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25;
x0=IKcos(j[0]);
x1=IKcos(j[2]);
x2=IKcos(j[1]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((1.0)*x3);
x11=((0.2223)*x1);
x12=((0.139)*x1);
x13=((1.0)*x5);
x14=((0.139)*x3);
x15=((1.0)*x7);
x16=((0.2223)*x2);
x17=((1.0)*x2);
x18=((1.0)*x1);
x19=(x4*x6);
x20=(x2*x6);
x21=(x0*x2);
x22=(x3*x6);
x23=(x0*x4);
x24=(x0*x3);
x25=((0.2223)*x3*x4);
eetrans[0]=((((0.19)*x21))+((x7*((((x16*x23))+((x11*x24))))))+((x5*(((((-0.2223)*x23*x3))+((x11*x21))))))+(((-1.0)*x14*x23))+((x12*x21)));
eetrans[1]=((((0.19)*x20))+((x5*(((((-0.2223)*x19*x3))+((x11*x20))))))+((x7*((((x11*x22))+((x16*x19))))))+(((-1.0)*x14*x19))+((x12*x20)));
eetrans[2]=((0.2015)+((x7*(((((-1.0)*x11*x2))+x25))))+(((0.139)*x2*x4))+((x5*((((x11*x3))+((x16*x4))))))+(((0.19)*x3))+((x12*x3)));
eerot[0]=((((-1.0)*x6*x9))+(((-1.0)*x8*((((x13*((((x1*x24))+((x21*x4))))))+((x15*(((((-1.0)*x0*x1*x17))+((x10*x23)))))))))));
eerot[1]=(((x0*x9))+(((-1.0)*x8*((((x13*((((x19*x2))+((x1*x22))))))+((x15*((((x10*x19))+(((-1.0)*x1*x17*x6)))))))))));
IkReal x26=((1.0)*x17);
eerot[2]=((-1.0)*x8*((((x13*(((((-1.0)*x1*x26))+((x3*x4))))))+((x15*(((((-1.0)*x1*x10))+(((-1.0)*x26*x4)))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.2015)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x28 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x28.valid){
continue;
}
IkReal x27=x28.value;
j0array[0]=((-1.0)*x27);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x27)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
op[0]=((((-1.23812414161957e-6)*(py*py)*(r02*r02)*(sj0*sj0)))+(((7.37901032015956e-5)*px*pz*r00*r02*(py*py)))+(((1.40201196083032e-5)*py*sj0*(px*px)*(r01*r01)))+(((-3.68950516007978e-5)*(px*px)*(py*py)*(r02*r02)))+(((-3.68950516007978e-5)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((7.37901032015956e-5)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((2.80402392166063e-5)*cj0*pz*r00*r02*(py*py)))+(((-7.37901032015956e-5)*(px*px)*(pz*pz)*(r00*r00)))+(((7.37901032015956e-5)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((7.37901032015956e-5)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((-2.4083827874236e-6)*py*pz*r01*r02*(sj0*sj0)))+(((-1.38567263303641e-6)*pz*r01*r02*sj0))+(((3.68950516007978e-5)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-7.37901032015956e-5)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((-7.37901032015956e-5)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-7.37901032015956e-5)*py*r01*r02*(pz*pz*pz)))+(((-2.6638227255776e-6)*(py*py)*(r01*r01)))+(((2.80402392166063e-5)*pz*r01*r02*sj0*(px*px)))+(((-2.21507190246226e-7)*(py*py)*(r02*r02)))+(((7.37901032015956e-5)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-7.37901032015956e-5)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-2.44231553533137e-6)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-2.4083827874236e-6)*cj0*px*pz*r01*r02*sj0))+(((-0.000147580206403191)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((3.68950516007978e-5)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((-2.80402392166063e-5)*cj0*px*(py*py)*(r01*r01)))+(((-4.88463107066275e-6)*cj0*px*py*sj0*(r00*r00)))+(((7.37901032015956e-5)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((-2.4083827874236e-6)*px*pz*r00*r02*(cj0*cj0)))+(((-1.84475258003989e-5)*(pz*pz*pz*pz)*(r02*r02)))+(((7.37901032015956e-5)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((3.68950516007978e-5)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-1.40201196083032e-5)*sj0*(py*py*py)*(r02*r02)))+(((2.44231553533137e-6)*(cj0*cj0)*(py*py)*(r00*r00)))+(((7.37901032015956e-5)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((-1.40201196083032e-5)*py*sj0*(px*px)*(r02*r02)))+(((-4.88463107066275e-6)*px*py*r00*r01*(sj0*sj0)))+(((-1.84475258003989e-5)*(px*px*px*px)*(r02*r02)))+(((-7.37901032015956e-5)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((-0.000147580206403191)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((-2.80402392166063e-5)*cj0*px*py*pz*r01*r02))+(((-0.000221370309604787)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-4.20603588249095e-5)*px*r00*r01*sj0*(py*py)))+(((-2.4083827874236e-6)*cj0*py*pz*r00*r02*sj0))+(((7.37901032015956e-5)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((-1.40201196083032e-5)*py*sj0*(pz*pz)*(r02*r02)))+(((-2.21507190246226e-7)*(px*px)*(r02*r02)))+(((-1.40201196083032e-5)*cj0*(px*px*px)*(r00*r00)))+(((-1.40201196083032e-5)*px*r00*r01*sj0*(pz*pz)))+(((-2.44231553533137e-6)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-7.37901032015956e-5)*px*r00*r02*(pz*pz*pz)))+(((-1.40201196083032e-5)*cj0*px*(pz*pz)*(r00*r00)))+(((-4.88463107066275e-6)*px*py*r00*r01*(cj0*cj0)))+(((-0.000221370309604787)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((7.37901032015956e-5)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((-1.40201196083032e-5)*py*sj0*(pz*pz)*(r01*r01)))+(((-4.20603588249095e-5)*cj0*py*r00*r01*(px*px)))+(((-1.40201196083032e-5)*cj0*(px*px*px)*(r02*r02)))+(((-7.37901032015956e-5)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((-0.000147580206403191)*px*py*r00*r01*(pz*pz)))+(((-5.3276454511552e-6)*px*py*r00*r01))+(((7.37901032015956e-5)*py*pz*r01*r02*(px*px)))+(((-3.68950516007978e-5)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-2.80402392166063e-5)*py*sj0*(px*px)*(r00*r00)))+(((-1.84475258003989e-5)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((-4.88463107066275e-6)*px*pz*r00*r02))+(((-7.37901032015956e-5)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((-1.84475258003989e-5)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((1.2041913937118e-6)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((7.37901032015956e-5)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((1.40201196083032e-5)*r00*r01*sj0*(px*px*px)))+(((1.2041913937118e-6)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((7.37901032015956e-5)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((-1.84475258003989e-5)*(py*py*py*py)*(r02*r02)))+(((7.37901032015956e-5)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((3.68950516007978e-5)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((7.37901032015956e-5)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((-9.28079903425922e-7)*px*r00*r01*sj0))+(((3.68950516007978e-5)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((7.37901032015956e-5)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-1.84475258003989e-5)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((-1.61672227448301e-7)*cj0*r00*r01*sj0))+(((-1.40201196083032e-5)*cj0*py*r00*r01*(pz*pz)))+(((-9.28079903425922e-7)*py*sj0*(r01*r01)))+(((-7.37901032015956e-5)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-1.84475258003989e-5)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((-7.37901032015956e-5)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((7.37901032015956e-5)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((-1.40201196083032e-5)*sj0*(py*py*py)*(r01*r01)))+(((-1.23812414161957e-6)*(cj0*cj0)*(px*px)*(r02*r02)))+(((-3.68950516007978e-5)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((-7.37901032015956e-5)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((-1.38567263303641e-6)*cj0*pz*r00*r02))+(((-4.88463107066275e-6)*cj0*px*py*sj0*(r01*r01)))+(((4.57592729610485e-7)*cj0*px*(r02*r02)))+(((1.40201196083032e-5)*cj0*r00*r01*(py*py*py)))+(((-9.28079903425922e-7)*cj0*py*r00*r01))+(((5.08027864143082e-8)*(r02*r02)))+(((-1.40201196083032e-5)*cj0*px*(py*py)*(r02*r02)))+(((-0.000221370309604787)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-1.40201196083032e-5)*cj0*px*(pz*pz)*(r02*r02)))+(((-1.84475258003989e-5)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((-2.44231553533137e-6)*(pz*pz)*(r02*r02)))+(((-2.6638227255776e-6)*(px*px)*(r00*r00)))+(((-8.08361137241504e-8)*(r01*r01)*(sj0*sj0)))+(((2.4083827874236e-6)*cj0*r00*r01*sj0*(pz*pz)))+(((7.37901032015956e-5)*pz*r00*r02*(px*px*px)))+(((7.37901032015956e-5)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((-7.37901032015956e-5)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-2.47624828323914e-6)*cj0*px*py*sj0*(r02*r02)))+(((3.68950516007978e-5)*(py*py)*(pz*pz)*(r02*r02)))+(((-7.37901032015956e-5)*(py*py)*(pz*pz)*(r01*r01)))+(((-4.88463107066275e-6)*py*pz*r01*r02))+(((-1.84475258003989e-5)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((4.57592729610485e-7)*py*sj0*(r02*r02)))+(((-9.28079903425922e-7)*cj0*px*(r00*r00)))+(((7.37901032015956e-5)*pz*r01*r02*(py*py*py)))+(((1.40201196083032e-5)*cj0*px*(py*py)*(r00*r00)))+(((3.68950516007978e-5)*(px*px)*(pz*pz)*(r02*r02)))+(((-2.80402392166063e-5)*px*py*pz*r00*r02*sj0))+(((2.44231553533137e-6)*(px*px)*(r01*r01)*(sj0*sj0)))+(((3.68950516007978e-5)*cj0*r00*r01*sj0*(py*py*py*py)))+(((-8.08361137241504e-8)*(cj0*cj0)*(r00*r00)))+(((-0.000147580206403191)*cj0*px*py*sj0*(pz*pz)*(r02*r02))));
op[1]=((((-2.80402392166063e-5)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((1.06552909023104e-5)*cj0*px*pz*(r00*r00)))+(((5.60804784332126e-5)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((0.000112160956866425)*px*py*pz*r00*r01))+(((5.60804784332126e-5)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((8.41207176498189e-5)*py*r01*r02*(pz*pz)))+(((2.80402392166063e-5)*(pz*pz*pz)*(r02*r02)))+(((1.06552909023104e-5)*cj0*px*pz*(r02*r02)))+(((9.1518545922097e-7)*px*r00*r02*(cj0*cj0)))+(((5.26555600553835e-7)*r01*r02*sj0))+(((5.60804784332126e-5)*pz*(py*py)*(r01*r01)))+(((-2.80402392166063e-5)*py*r01*r02*(px*px)))+(((-5.60804784332126e-5)*cj0*px*py*pz*sj0*(r00*r00)))+(((1.85615980685184e-6)*py*r01*r02))+(((2.80402392166063e-5)*r01*r02*(py*py*py)*(sj0*sj0)))+(((-8.41207176498189e-5)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-8.41207176498189e-5)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-2.80402392166063e-5)*px*r00*r02*(cj0*cj0)*(py*py)))+(((1.06552909023104e-5)*py*pz*sj0*(r01*r01)))+(((-2.80402392166063e-5)*cj0*r01*r02*sj0*(px*px*px)))+(((5.60804784332126e-5)*px*r00*r02*(py*py)*(sj0*sj0)))+(((1.85615980685184e-6)*px*r00*r02))+(((-2.80402392166063e-5)*r00*r02*(px*px*px)))+(((-2.80402392166063e-5)*pz*(py*py)*(r02*r02)))+(((-1.83037091844194e-6)*cj0*pz*r00*r01*sj0))+(((-2.80402392166063e-5)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-8.41207176498189e-5)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((2.80402392166063e-5)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((-2.80402392166063e-5)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((-5.60804784332126e-5)*px*py*pz*r00*r01*(sj0*sj0)))+(((-1.06552909023104e-5)*cj0*r00*r02*(py*py)))+(((5.60804784332126e-5)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((2.80402392166063e-5)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((-5.60804784332126e-5)*px*py*pz*r00*r01*(cj0*cj0)))+(((-9.1518545922097e-7)*pz*(cj0*cj0)*(r00*r00)))+(((9.1518545922097e-7)*cj0*py*r00*r02*sj0))+(((1.06552909023104e-5)*cj0*px*py*r01*r02))+(((2.80402392166063e-5)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((8.41207176498189e-5)*cj0*px*r01*r02*sj0*(py*py)))+(((1.85615980685184e-6)*pz*(r02*r02)))+(((1.06552909023104e-5)*cj0*py*pz*r00*r01))+(((-9.1518545922097e-7)*pz*(r01*r01)*(sj0*sj0)))+(((-2.80402392166063e-5)*pz*(px*px)*(r02*r02)))+(((-2.80402392166063e-5)*px*r00*r02*(py*py)))+(((2.80402392166063e-5)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-2.80402392166063e-5)*r01*r02*(py*py*py)))+(((-1.06552909023104e-5)*r01*r02*sj0*(px*px)))+(((8.41207176498189e-5)*cj0*py*r00*r02*sj0*(px*px)))+(((8.41207176498189e-5)*px*r00*r02*(pz*pz)))+(((-2.80402392166063e-5)*cj0*r00*r02*sj0*(py*py*py)))+(((0.000112160956866425)*cj0*px*py*pz*sj0*(r02*r02)))+(((9.1518545922097e-7)*cj0*px*r01*r02*sj0))+(((1.06552909023104e-5)*py*pz*sj0*(r02*r02)))+(((5.60804784332126e-5)*py*r01*r02*(cj0*cj0)*(px*px)))+(((1.06552909023104e-5)*px*py*r00*r02*sj0))+(((9.1518545922097e-7)*py*r01*r02*(sj0*sj0)))+(((1.06552909023104e-5)*px*pz*r00*r01*sj0))+(((-8.41207176498189e-5)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((5.60804784332126e-5)*pz*(px*px)*(r00*r00)))+(((2.80402392166063e-5)*r00*r02*(cj0*cj0)*(px*px*px)))+(((5.26555600553835e-7)*cj0*r00*r02))+(((-5.60804784332126e-5)*cj0*px*py*pz*sj0*(r01*r01))));
op[2]=((((-0.000295160412806382)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((1.15413196632953e-5)*cj0*px*py*sj0*(r01*r01)))+(((0.000147580206403191)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-0.000147580206403191)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-3.68950516007978e-5)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((0.000147580206403191)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((-0.000147580206403191)*px*r00*r02*(pz*pz*pz)))+(((-8.24690811488679e-6)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-2.47624828323914e-6)*(cj0*cj0)*(px*px)*(r02*r02)))+(((1.64938162297736e-5)*px*pz*r00*r02*(cj0*cj0)))+(((0.000147580206403191)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-1.06552909023104e-5)*px*py*r00*r01))+(((0.000147580206403191)*pz*r01*r02*(py*py*py)))+(((1.15413196632953e-5)*cj0*px*py*sj0*(r00*r00)))+(((-0.000147580206403191)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((-8.24690811488679e-6)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.000147580206403191)*py*r01*r02*(pz*pz*pz)))+(((-5.77065983164765e-6)*(px*px)*(r01*r01)*(sj0*sj0)))+(((0.000147580206403191)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((0.000147580206403191)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((-0.000147580206403191)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((7.37901032015956e-5)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-0.000147580206403191)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((0.000147580206403191)*py*pz*r01*r02*(px*px)))+(((1.15413196632953e-5)*px*py*r00*r01*(cj0*cj0)))+(((-3.10798439459463e-5)*py*pz*r01*r02))+(((-0.000147580206403191)*(px*px)*(pz*pz)*(r00*r00)))+(((1.15413196632953e-5)*px*py*r00*r01*(sj0*sj0)))+(((0.000147580206403191)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-3.10798439459463e-5)*px*pz*r00*r02))+(((-0.000295160412806382)*px*py*r00*r01*(pz*pz)))+(((7.37901032015956e-5)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.000147580206403191)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((0.000147580206403191)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((-3.68950516007978e-5)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((5.77065983164765e-6)*(py*py)*(r01*r01)*(sj0*sj0)))+(((0.000147580206403191)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((-7.37901032015956e-5)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((-0.000147580206403191)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((-0.000442740619209573)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((3.64883373105534e-7)*(r01*r01)*(sj0*sj0)))+(((1.02122765218179e-5)*(px*px)*(r02*r02)))+(((-3.68950516007978e-5)*(px*px*px*px)*(r02*r02)))+(((-3.68950516007978e-5)*(py*py*py*py)*(r02*r02)))+(((0.000147580206403191)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((-5.3276454511552e-6)*(py*py)*(r01*r01)))+(((-3.68950516007978e-5)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((-7.37901032015956e-5)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((7.37901032015956e-5)*cj0*r00*r01*sj0*(py*py*py*py)))+(((-3.68950516007978e-5)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((-2.47624828323914e-6)*(py*py)*(r02*r02)*(sj0*sj0)))+(((1.64938162297736e-5)*cj0*py*pz*r00*r02*sj0))+(((-0.000147580206403191)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((7.37901032015956e-5)*(py*py)*(pz*pz)*(r02*r02)))+(((1.64938162297736e-5)*py*pz*r01*r02*(sj0*sj0)))+(((0.000147580206403191)*pz*r00*r02*(px*px*px)))+(((5.77065983164765e-6)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-5.77065983164765e-6)*(cj0*cj0)*(py*py)*(r00*r00)))+(((7.29766746211068e-7)*cj0*r00*r01*sj0))+(((-0.000147580206403191)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((-3.68950516007978e-5)*(pz*pz*pz*pz)*(r02*r02)))+(((7.37901032015956e-5)*(px*px)*(pz*pz)*(r02*r02)))+(((0.000147580206403191)*px*pz*r00*r02*(py*py)))+(((1.02122765218179e-5)*(py*py)*(r02*r02)))+(((-3.68950516007978e-5)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((7.37901032015956e-5)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((-4.95249656647829e-6)*cj0*px*py*sj0*(r02*r02)))+(((-3.68950516007978e-5)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((0.000147580206403191)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((0.000147580206403191)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((0.000147580206403191)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((7.37901032015956e-5)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((0.000147580206403191)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((-0.000147580206403191)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-4.24950027725218e-7)*(r02*r02)))+(((-7.37901032015956e-5)*(px*px)*(py*py)*(r02*r02)))+(((7.37901032015956e-5)*cj0*r00*r01*sj0*(px*px*px*px)))+(((0.000147580206403191)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((-0.000442740619209573)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-1.55399219729731e-5)*(pz*pz)*(r02*r02)))+(((-5.3276454511552e-6)*(px*px)*(r00*r00)))+(((-0.000147580206403191)*(py*py)*(pz*pz)*(r01*r01)))+(((-7.37901032015956e-5)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.000442740619209573)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-1.64938162297736e-5)*cj0*r00*r01*sj0*(pz*pz)))+(((-0.000295160412806382)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-0.000295160412806382)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((0.000147580206403191)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((-0.000147580206403191)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((3.64883373105534e-7)*(cj0*cj0)*(r00*r00)))+(((1.64938162297736e-5)*cj0*px*pz*r01*r02*sj0))+(((-0.000147580206403191)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01))));
op[3]=((((-1.06552909023104e-5)*cj0*px*pz*(r02*r02)))+(((-2.80402392166063e-5)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((5.60804784332126e-5)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((0.000112160956866425)*px*py*pz*r00*r01))+(((-1.06552909023104e-5)*px*pz*r00*r01*sj0))+(((5.60804784332126e-5)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((8.41207176498189e-5)*py*r01*r02*(pz*pz)))+(((2.80402392166063e-5)*(pz*pz*pz)*(r02*r02)))+(((9.1518545922097e-7)*px*r00*r02*(cj0*cj0)))+(((5.60804784332126e-5)*pz*(py*py)*(r01*r01)))+(((-2.80402392166063e-5)*py*r01*r02*(px*px)))+(((-5.60804784332126e-5)*cj0*px*py*pz*sj0*(r00*r00)))+(((1.85615980685184e-6)*py*r01*r02))+(((2.80402392166063e-5)*r01*r02*(py*py*py)*(sj0*sj0)))+(((-8.41207176498189e-5)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-8.41207176498189e-5)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-2.80402392166063e-5)*px*r00*r02*(cj0*cj0)*(py*py)))+(((-5.26555600553835e-7)*r01*r02*sj0))+(((-1.06552909023104e-5)*px*py*r00*r02*sj0))+(((-2.80402392166063e-5)*cj0*r01*r02*sj0*(px*px*px)))+(((5.60804784332126e-5)*px*r00*r02*(py*py)*(sj0*sj0)))+(((1.85615980685184e-6)*px*r00*r02))+(((-2.80402392166063e-5)*r00*r02*(px*px*px)))+(((-2.80402392166063e-5)*pz*(py*py)*(r02*r02)))+(((-1.83037091844194e-6)*cj0*pz*r00*r01*sj0))+(((-2.80402392166063e-5)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-8.41207176498189e-5)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((2.80402392166063e-5)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((-2.80402392166063e-5)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((-5.60804784332126e-5)*px*py*pz*r00*r01*(sj0*sj0)))+(((5.60804784332126e-5)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((-1.06552909023104e-5)*py*pz*sj0*(r02*r02)))+(((2.80402392166063e-5)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((-5.26555600553835e-7)*cj0*r00*r02))+(((-5.60804784332126e-5)*px*py*pz*r00*r01*(cj0*cj0)))+(((-9.1518545922097e-7)*pz*(cj0*cj0)*(r00*r00)))+(((9.1518545922097e-7)*cj0*py*r00*r02*sj0))+(((1.06552909023104e-5)*cj0*r00*r02*(py*py)))+(((2.80402392166063e-5)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((8.41207176498189e-5)*cj0*px*r01*r02*sj0*(py*py)))+(((1.85615980685184e-6)*pz*(r02*r02)))+(((1.06552909023104e-5)*r01*r02*sj0*(px*px)))+(((-9.1518545922097e-7)*pz*(r01*r01)*(sj0*sj0)))+(((-1.06552909023104e-5)*cj0*px*py*r01*r02))+(((-2.80402392166063e-5)*pz*(px*px)*(r02*r02)))+(((-2.80402392166063e-5)*px*r00*r02*(py*py)))+(((-1.06552909023104e-5)*cj0*px*pz*(r00*r00)))+(((2.80402392166063e-5)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-2.80402392166063e-5)*r01*r02*(py*py*py)))+(((8.41207176498189e-5)*cj0*py*r00*r02*sj0*(px*px)))+(((8.41207176498189e-5)*px*r00*r02*(pz*pz)))+(((-2.80402392166063e-5)*cj0*r00*r02*sj0*(py*py*py)))+(((0.000112160956866425)*cj0*px*py*pz*sj0*(r02*r02)))+(((9.1518545922097e-7)*cj0*px*r01*r02*sj0))+(((5.60804784332126e-5)*py*r01*r02*(cj0*cj0)*(px*px)))+(((-1.06552909023104e-5)*py*pz*sj0*(r01*r01)))+(((9.1518545922097e-7)*py*r01*r02*(sj0*sj0)))+(((-8.41207176498189e-5)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((5.60804784332126e-5)*pz*(px*px)*(r00*r00)))+(((2.80402392166063e-5)*r00*r02*(cj0*cj0)*(px*px*px)))+(((-5.60804784332126e-5)*cj0*px*py*pz*sj0*(r01*r01)))+(((-1.06552909023104e-5)*cj0*py*pz*r00*r01)));
op[4]=((((4.20603588249095e-5)*px*r00*r01*sj0*(py*py)))+(((-1.23812414161957e-6)*(py*py)*(r02*r02)*(sj0*sj0)))+(((7.37901032015956e-5)*px*pz*r00*r02*(py*py)))+(((-3.68950516007978e-5)*(px*px)*(py*py)*(r02*r02)))+(((-3.68950516007978e-5)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((7.37901032015956e-5)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((-7.37901032015956e-5)*(px*px)*(pz*pz)*(r00*r00)))+(((7.37901032015956e-5)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((7.37901032015956e-5)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((-2.4083827874236e-6)*py*pz*r01*r02*(sj0*sj0)))+(((1.40201196083032e-5)*px*r00*r01*sj0*(pz*pz)))+(((3.68950516007978e-5)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-7.37901032015956e-5)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((-7.37901032015956e-5)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-7.37901032015956e-5)*py*r01*r02*(pz*pz*pz)))+(((-2.6638227255776e-6)*(py*py)*(r01*r01)))+(((-2.80402392166063e-5)*pz*r01*r02*sj0*(px*px)))+(((-2.21507190246226e-7)*(py*py)*(r02*r02)))+(((7.37901032015956e-5)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-7.37901032015956e-5)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-2.44231553533137e-6)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-2.4083827874236e-6)*cj0*px*pz*r01*r02*sj0))+(((-0.000147580206403191)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((3.68950516007978e-5)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((1.38567263303641e-6)*pz*r01*r02*sj0))+(((-1.40201196083032e-5)*r00*r01*sj0*(px*px*px)))+(((-4.88463107066275e-6)*cj0*px*py*sj0*(r00*r00)))+(((7.37901032015956e-5)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((-2.4083827874236e-6)*px*pz*r00*r02*(cj0*cj0)))+(((-1.84475258003989e-5)*(pz*pz*pz*pz)*(r02*r02)))+(((7.37901032015956e-5)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((3.68950516007978e-5)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((2.44231553533137e-6)*(cj0*cj0)*(py*py)*(r00*r00)))+(((7.37901032015956e-5)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((-4.88463107066275e-6)*px*py*r00*r01*(sj0*sj0)))+(((-1.84475258003989e-5)*(px*px*px*px)*(r02*r02)))+(((4.20603588249095e-5)*cj0*py*r00*r01*(px*px)))+(((-7.37901032015956e-5)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((-0.000147580206403191)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((2.80402392166063e-5)*cj0*px*py*pz*r01*r02))+(((-1.40201196083032e-5)*py*sj0*(px*px)*(r01*r01)))+(((-4.57592729610485e-7)*cj0*px*(r02*r02)))+(((-4.57592729610485e-7)*py*sj0*(r02*r02)))+(((-0.000221370309604787)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-2.4083827874236e-6)*cj0*py*pz*r00*r02*sj0))+(((1.40201196083032e-5)*sj0*(py*py*py)*(r01*r01)))+(((7.37901032015956e-5)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((-1.40201196083032e-5)*cj0*px*(py*py)*(r00*r00)))+(((2.80402392166063e-5)*cj0*px*(py*py)*(r01*r01)))+(((-2.21507190246226e-7)*(px*px)*(r02*r02)))+(((-2.44231553533137e-6)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-7.37901032015956e-5)*px*r00*r02*(pz*pz*pz)))+(((1.40201196083032e-5)*cj0*py*r00*r01*(pz*pz)))+(((-4.88463107066275e-6)*px*py*r00*r01*(cj0*cj0)))+(((-0.000221370309604787)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((2.80402392166063e-5)*px*py*pz*r00*r02*sj0))+(((7.37901032015956e-5)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((-7.37901032015956e-5)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((-0.000147580206403191)*px*py*r00*r01*(pz*pz)))+(((-5.3276454511552e-6)*px*py*r00*r01))+(((7.37901032015956e-5)*py*pz*r01*r02*(px*px)))+(((-3.68950516007978e-5)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((2.80402392166063e-5)*py*sj0*(px*px)*(r00*r00)))+(((1.40201196083032e-5)*cj0*px*(pz*pz)*(r00*r00)))+(((-1.84475258003989e-5)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((-4.88463107066275e-6)*px*pz*r00*r02))+(((-7.37901032015956e-5)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((-1.84475258003989e-5)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((9.28079903425922e-7)*px*r00*r01*sj0))+(((1.2041913937118e-6)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((7.37901032015956e-5)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((1.2041913937118e-6)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((7.37901032015956e-5)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((-1.84475258003989e-5)*(py*py*py*py)*(r02*r02)))+(((7.37901032015956e-5)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((1.40201196083032e-5)*cj0*(px*px*px)*(r02*r02)))+(((3.68950516007978e-5)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((1.40201196083032e-5)*cj0*(px*px*px)*(r00*r00)))+(((7.37901032015956e-5)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((1.40201196083032e-5)*py*sj0*(pz*pz)*(r02*r02)))+(((3.68950516007978e-5)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((7.37901032015956e-5)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-1.84475258003989e-5)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((-1.61672227448301e-7)*cj0*r00*r01*sj0))+(((-2.80402392166063e-5)*cj0*pz*r00*r02*(py*py)))+(((-7.37901032015956e-5)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-1.84475258003989e-5)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((-7.37901032015956e-5)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((7.37901032015956e-5)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((-1.23812414161957e-6)*(cj0*cj0)*(px*px)*(r02*r02)))+(((9.28079903425922e-7)*cj0*px*(r00*r00)))+(((-3.68950516007978e-5)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((-7.37901032015956e-5)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((1.40201196083032e-5)*py*sj0*(pz*pz)*(r01*r01)))+(((-4.88463107066275e-6)*cj0*px*py*sj0*(r01*r01)))+(((-1.40201196083032e-5)*cj0*r00*r01*(py*py*py)))+(((5.08027864143082e-8)*(r02*r02)))+(((-0.000221370309604787)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-1.84475258003989e-5)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((-2.44231553533137e-6)*(pz*pz)*(r02*r02)))+(((-2.6638227255776e-6)*(px*px)*(r00*r00)))+(((-8.08361137241504e-8)*(r01*r01)*(sj0*sj0)))+(((1.40201196083032e-5)*cj0*px*(pz*pz)*(r02*r02)))+(((2.4083827874236e-6)*cj0*r00*r01*sj0*(pz*pz)))+(((9.28079903425922e-7)*py*sj0*(r01*r01)))+(((7.37901032015956e-5)*pz*r00*r02*(px*px*px)))+(((7.37901032015956e-5)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((-7.37901032015956e-5)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-2.47624828323914e-6)*cj0*px*py*sj0*(r02*r02)))+(((3.68950516007978e-5)*(py*py)*(pz*pz)*(r02*r02)))+(((1.38567263303641e-6)*cj0*pz*r00*r02))+(((-7.37901032015956e-5)*(py*py)*(pz*pz)*(r01*r01)))+(((-4.88463107066275e-6)*py*pz*r01*r02))+(((-1.84475258003989e-5)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((7.37901032015956e-5)*pz*r01*r02*(py*py*py)))+(((3.68950516007978e-5)*(px*px)*(pz*pz)*(r02*r02)))+(((1.40201196083032e-5)*cj0*px*(py*py)*(r02*r02)))+(((2.44231553533137e-6)*(px*px)*(r01*r01)*(sj0*sj0)))+(((1.40201196083032e-5)*sj0*(py*py*py)*(r02*r02)))+(((3.68950516007978e-5)*cj0*r00*r01*sj0*(py*py*py*py)))+(((-8.08361137241504e-8)*(cj0*cj0)*(r00*r00)))+(((-0.000147580206403191)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((1.40201196083032e-5)*py*sj0*(px*px)*(r02*r02)))+(((9.28079903425922e-7)*cj0*py*r00*r01)));
polyroots4(op,zeror,numroots);
IkReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=((((-1.0)*r00*sj0))+((cj0*r01)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x29=((6.14892701223636)*cj1);
cj3array[0]=((-0.5281327974058)+(((16.1813868743062)*(py*py)))+(((16.1813868743062)*(px*px)))+(((-6.14892701223636)*pz*sj1))+(((-1.0)*cj0*px*x29))+(((16.1813868743062)*(pz*pz)))+(((-1.0)*py*sj0*x29)));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x30=px*px;
IkReal x31=pz*pz;
IkReal x32=py*py;
IkReal x33=(px*sj0);
IkReal x34=((2.0)*py);
IkReal x35=(r00*sj0);
IkReal x36=(cj0*r01);
IkReal x37=(pz*r02);
IkReal x38=((0.38)*cj1);
IkReal x39=((0.38)*r02*sj1);
IkReal x40=((0.38)*pz*sj1);
IkReal x41=((1.0)*x32);
evalcond[0]=((-0.06873829)+(((-1.0)*x36*x40))+(((-1.0)*x36*x41))+((x35*x40))+(((0.0361)*x36))+(((-1.0)*x31*x35))+((py*r00*x38))+(((2.0)*x33*x37))+(((-0.0361)*x35))+((cj0*py*x39))+(((-1.0)*x33*x39))+((r01*x33*x34))+(((-0.0617994)*(IKcos(j3))))+(((-1.0)*px*r01*x38))+(((-1.0)*cj0*px*r00*x34))+((x30*x35))+((x30*x36))+(((-1.0)*x35*x41))+(((-1.0)*cj0*x34*x37))+((x31*x36)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.11228086356825)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-6873829.0)+(((-6179940.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x42=((22230000.0)*sj3);
IkReal x43=(pz*sj1);
IkReal x44=(cj0*px);
IkReal x45=((13900000.0)*sj1);
IkReal x46=(cj1*pz);
IkReal x47=((22230000.0)*cj3);
IkReal x48=(py*sj0);
IkReal x49=((13900000.0)*cj1);
IkReal x50=(sj1*x48);
CheckValue<IkReal> x51 = IKatan2WithCheck(IkReal(((((-1.0)*x42*x43))+(((4223700.0)*sj3))+(((-13900000.0)*x46))+((x45*x48))+((x44*x45))+((x47*x50))+((sj1*x44*x47))+(((-1.0)*x46*x47))+(((-1.0)*cj1*x42*x48))+(((-1.0)*cj1*x42*x44)))),IkReal(((2641000.0)+(((-1.0)*x48*x49))+(((-1.0)*x42*x50))+(((-1.0)*cj1*x44*x47))+(((4223700.0)*cj3))+(((-1.0)*sj1*x42*x44))+(((-1.0)*x43*x47))+(((-1.0)*cj1*x47*x48))+(((-1.0)*x44*x49))+((x42*x46))+(((-13900000.0)*x43)))),IKFAST_ATAN2_MAGTHRESH);
if(!x51.valid){
continue;
}
CheckValue<IkReal> x52=IKPowWithIntegerCheck(IKsign(((-6873829.0)+(((-6179940.0)*cj3)))),-1);
if(!x52.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x51.value)+(((1.5707963267949)*(x52.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x53=IKsin(j2);
IkReal x54=IKcos(j2);
IkReal x55=(px*sj1);
IkReal x56=(py*sj1);
IkReal x57=((1.0)*r00);
IkReal x58=(cj1*sj0);
IkReal x59=((1.0)*px);
IkReal x60=((0.2223)*sj3);
IkReal x61=((1.0)*pz);
IkReal x62=(cj0*r01);
IkReal x63=(pz*sj1);
IkReal x64=(cj0*cj1);
IkReal x65=((0.2223)*cj3);
IkReal x66=((0.139)*x53);
IkReal x67=((0.139)*x54);
IkReal x68=(x53*x65);
IkReal x69=(x54*x60);
IkReal x70=(x53*x60);
IkReal x71=(x54*x65);
IkReal x72=(x66+x68);
IkReal x73=(x71+x70+x67);
evalcond[0]=((((-1.0)*cj1*x61))+((sj0*x56))+((cj0*x55))+x72+(((-1.0)*x69)));
evalcond[1]=((0.19)+(((-1.0)*py*x58))+(((-1.0)*x59*x64))+x73+(((-1.0)*sj1*x61)));
evalcond[2]=((((-1.0)*cj1*x61*x62))+(((-1.0)*x56*x57))+(((-1.0)*r02*x58*x59))+((pz*r00*x58))+((r01*x55))+((py*r02*x64))+x72+(((-1.0)*x69)));
evalcond[3]=((((-0.19)*x62))+(((-1.0)*x73))+((r02*sj0*x55))+((x62*x63))+(((-1.0)*cj0*r02*x56))+(((0.19)*r00*sj0))+(((-1.0)*cj1*py*x57))+((cj1*px*r01))+(((-1.0)*sj0*x57*x63)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x74=((6.14892701223636)*cj1);
cj3array[0]=((-0.5281327974058)+(((16.1813868743062)*(py*py)))+(((16.1813868743062)*(px*px)))+(((-6.14892701223636)*pz*sj1))+(((16.1813868743062)*(pz*pz)))+(((-1.0)*py*sj0*x74))+(((-1.0)*cj0*px*x74)));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x75=px*px;
IkReal x76=pz*pz;
IkReal x77=py*py;
IkReal x78=(px*sj0);
IkReal x79=((2.0)*py);
IkReal x80=(r00*sj0);
IkReal x81=((0.38)*sj1);
IkReal x82=(cj0*r01);
IkReal x83=(pz*r02);
IkReal x84=((0.38)*cj1);
IkReal x85=((1.0)*x77);
evalcond[0]=((0.06873829)+(((-1.0)*x82*x85))+(((-1.0)*x80*x85))+(((-1.0)*cj0*px*r00*x79))+(((-1.0)*px*r01*x84))+(((-0.0361)*x80))+((py*r00*x84))+(((2.0)*x78*x83))+(((0.0617994)*(IKcos(j3))))+(((-1.0)*x76*x80))+((x76*x82))+((x75*x80))+((x75*x82))+(((-1.0)*r02*x78*x81))+((pz*x80*x81))+((cj0*py*r02*x81))+(((0.0361)*x82))+((r01*x78*x79))+(((-1.0)*pz*x81*x82))+(((-1.0)*cj0*x79*x83)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.11228086356825)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-6873829.0)+(((-6179940.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x86=((22230000.0)*sj3);
IkReal x87=(pz*sj1);
IkReal x88=(cj0*px);
IkReal x89=((13900000.0)*sj1);
IkReal x90=(cj1*pz);
IkReal x91=((22230000.0)*cj3);
IkReal x92=(py*sj0);
IkReal x93=((13900000.0)*cj1);
IkReal x94=(sj1*x92);
CheckValue<IkReal> x95=IKPowWithIntegerCheck(IKsign(((-6873829.0)+(((-6179940.0)*cj3)))),-1);
if(!x95.valid){
continue;
}
CheckValue<IkReal> x96 = IKatan2WithCheck(IkReal((((x89*x92))+(((-1.0)*x90*x91))+((sj1*x88*x91))+(((4223700.0)*sj3))+(((-1.0)*x86*x87))+(((-13900000.0)*x90))+((x88*x89))+(((-1.0)*cj1*x86*x92))+(((-1.0)*cj1*x86*x88))+((x91*x94)))),IkReal(((2641000.0)+(((-1.0)*cj1*x88*x91))+(((-1.0)*sj1*x86*x88))+((x86*x90))+(((4223700.0)*cj3))+(((-1.0)*x87*x91))+(((-1.0)*cj1*x91*x92))+(((-1.0)*x86*x94))+(((-1.0)*x92*x93))+(((-13900000.0)*x87))+(((-1.0)*x88*x93)))),IKFAST_ATAN2_MAGTHRESH);
if(!x96.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x95.value)))+(x96.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x97=IKsin(j2);
IkReal x98=IKcos(j2);
IkReal x99=(px*sj1);
IkReal x100=(py*sj1);
IkReal x101=((1.0)*r00);
IkReal x102=(cj1*sj0);
IkReal x103=((1.0)*px);
IkReal x104=((0.2223)*sj3);
IkReal x105=((1.0)*pz);
IkReal x106=(cj0*r01);
IkReal x107=(pz*sj1);
IkReal x108=(cj0*cj1);
IkReal x109=((0.2223)*cj3);
IkReal x110=((0.139)*x97);
IkReal x111=((0.139)*x98);
IkReal x112=(x104*x98);
IkReal x113=(x109*x97);
IkReal x114=(x104*x97);
IkReal x115=(x109*x98);
IkReal x116=(x113+x110);
IkReal x117=(x111+x115+x114);
evalcond[0]=((((-1.0)*cj1*x105))+(((-1.0)*x112))+x116+((cj0*x99))+((sj0*x100)));
evalcond[1]=((0.19)+x117+(((-1.0)*py*x102))+(((-1.0)*x103*x108))+(((-1.0)*sj1*x105)));
evalcond[2]=(((py*r02*x108))+(((-1.0)*x100*x101))+((r01*x99))+(((-1.0)*x116))+x112+(((-1.0)*cj1*x105*x106))+(((-1.0)*r02*x102*x103))+((pz*r00*x102)));
evalcond[3]=(((x106*x107))+x117+(((-0.19)*x106))+(((-1.0)*cj1*py*x101))+((r02*sj0*x99))+(((-1.0)*sj0*x101*x107))+(((0.19)*r00*sj0))+((cj1*px*r01))+(((-1.0)*cj0*r02*x100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x118=px*px;
IkReal x119=pz*pz;
IkReal x120=py*py;
IkReal x121=(pz*sj0);
IkReal x122=((10000000.0)*px);
IkReal x123=((1900000.0)*sj1);
IkReal x124=(cj0*py);
IkReal x125=(cj1*r00);
IkReal x126=(cj1*r01);
IkReal x127=(cj0*r01);
IkReal x128=(r00*sj0);
IkReal x129=(py*r01);
IkReal x130=(pz*r02);
IkReal x131=((5000000.0)*x120);
IkReal x132=((5000000.0)*x119);
IkReal x133=((5000000.0)*x118);
CheckValue<IkReal> x134=IKPowWithIntegerCheck(cj4,-1);
if(!x134.valid){
continue;
}
CheckValue<IkReal> x135=IKPowWithIntegerCheck(sj4,-1);
if(!x135.valid){
continue;
}
if( IKabs(((0.00719424460431655)*(x134.value)*(((((1000.0)*x129))+(((-190.0)*sj0*x126))+(((1000.0)*x130))+(((-190.0)*cj0*x125))+(((-190.0)*r02*sj1))+(((1000.0)*px*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((3.23627737486124e-6)*(x135.value)*((((x127*x132))+((x127*x133))+((r02*x123*x124))+((r00*x121*x123))+(((-10000000.0)*x124*x130))+(((-180500.0)*x128))+(((-1.0)*pz*x123*x127))+(((-1900000.0)*px*x126))+(((-1.0)*x128*x132))+(((-1.0)*x128*x131))+(((-1.0)*px*r02*sj0*x123))+(((180500.0)*x127))+(((1900000.0)*py*x125))+(((-1.0)*r00*x122*x124))+((x128*x133))+(((-343691.45)*sj4))+(((-1.0)*x127*x131))+((sj0*x122*x129))+((r02*x121*x122)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00719424460431655)*(x134.value)*(((((1000.0)*x129))+(((-190.0)*sj0*x126))+(((1000.0)*x130))+(((-190.0)*cj0*x125))+(((-190.0)*r02*sj1))+(((1000.0)*px*r00))))))+IKsqr(((3.23627737486124e-6)*(x135.value)*((((x127*x132))+((x127*x133))+((r02*x123*x124))+((r00*x121*x123))+(((-10000000.0)*x124*x130))+(((-180500.0)*x128))+(((-1.0)*pz*x123*x127))+(((-1900000.0)*px*x126))+(((-1.0)*x128*x132))+(((-1.0)*x128*x131))+(((-1.0)*px*r02*sj0*x123))+(((180500.0)*x127))+(((1900000.0)*py*x125))+(((-1.0)*r00*x122*x124))+((x128*x133))+(((-343691.45)*sj4))+(((-1.0)*x127*x131))+((sj0*x122*x129))+((r02*x121*x122))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00719424460431655)*(x134.value)*(((((1000.0)*x129))+(((-190.0)*sj0*x126))+(((1000.0)*x130))+(((-190.0)*cj0*x125))+(((-190.0)*r02*sj1))+(((1000.0)*px*r00))))), ((3.23627737486124e-6)*(x135.value)*((((x127*x132))+((x127*x133))+((r02*x123*x124))+((r00*x121*x123))+(((-10000000.0)*x124*x130))+(((-180500.0)*x128))+(((-1.0)*pz*x123*x127))+(((-1900000.0)*px*x126))+(((-1.0)*x128*x132))+(((-1.0)*x128*x131))+(((-1.0)*px*r02*sj0*x123))+(((180500.0)*x127))+(((1900000.0)*py*x125))+(((-1.0)*r00*x122*x124))+((x128*x133))+(((-343691.45)*sj4))+(((-1.0)*x127*x131))+((sj0*x122*x129))+((r02*x121*x122))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x136=IKcos(j3);
IkReal x137=px*px;
IkReal x138=pz*pz;
IkReal x139=py*py;
IkReal x140=(r01*sj0);
IkReal x141=((2.0)*py);
IkReal x142=(r00*sj0);
IkReal x143=((0.19)*cj1);
IkReal x144=(r02*sj0);
IkReal x145=((0.38)*sj1);
IkReal x146=((1.0)*pz);
IkReal x147=(cj0*r01);
IkReal x148=(cj0*r02);
IkReal x149=((0.38)*cj1);
IkReal x150=((0.19)*sj1);
IkReal x151=((0.139)*cj4);
IkReal x152=(cj0*r00);
IkReal x153=((0.0617994)*x136);
IkReal x154=((1.0)*x138);
IkReal x155=((1.0)*x139);
evalcond[0]=(((x140*x143))+(((-1.0)*px*r00))+(((-1.0)*r02*x146))+((x151*(IKsin(j3))))+(((-1.0)*py*r01))+((r02*x150))+((x143*x152)));
evalcond[1]=((0.03263829)+((pz*x145))+((cj0*px*x149))+(((-1.0)*x154))+(((-1.0)*x155))+x153+(((-1.0)*x137))+((py*sj0*x149)));
evalcond[2]=((((-1.0)*x136*x151))+((x140*x150))+(((-1.0)*x140*x146))+((x150*x152))+(((-1.0)*r02*x143))+(((-0.2223)*cj4))+(((-1.0)*x146*x152))+((px*x148))+((py*x144)));
evalcond[3]=((((-0.0361)*x142))+(((-1.0)*px*x144*x145))+(((-1.0)*x142*x155))+(((-1.0)*x142*x154))+((pz*x142*x145))+(((-0.06873829)*sj4))+((px*x140*x141))+((x137*x142))+((x137*x147))+(((-1.0)*pz*x141*x148))+((x138*x147))+(((-1.0)*sj4*x153))+(((-1.0)*pz*x145*x147))+(((-1.0)*x147*x155))+((py*r00*x149))+((py*x145*x148))+(((-1.0)*px*r01*x149))+(((-1.0)*px*x141*x152))+(((0.0361)*x147))+(((2.0)*px*pz*x144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x156=(cj3*cj4);
j2eval[0]=(x156+(((1.59928057553957)*cj4)));
j2eval[1]=IKsign(((((2223.0)*cj4))+(((1390.0)*x156))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.11228086356825)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-6873829.0)+(((-6179940.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x157=((22230000.0)*sj3);
IkReal x158=(pz*sj1);
IkReal x159=(cj0*px);
IkReal x160=((13900000.0)*sj1);
IkReal x161=(cj1*pz);
IkReal x162=((22230000.0)*cj3);
IkReal x163=(py*sj0);
IkReal x164=((13900000.0)*cj1);
IkReal x165=(sj1*x163);
CheckValue<IkReal> x166 = IKatan2WithCheck(IkReal(((((-1.0)*x157*x158))+((sj1*x159*x162))+((x162*x165))+(((-13900000.0)*x161))+(((4223700.0)*sj3))+(((-1.0)*x161*x162))+(((-1.0)*cj1*x157*x163))+(((-1.0)*cj1*x157*x159))+((x159*x160))+((x160*x163)))),IkReal(((2641000.0)+(((-1.0)*cj1*x159*x162))+(((-1.0)*x157*x165))+(((-1.0)*cj1*x162*x163))+((x157*x161))+(((-1.0)*x158*x162))+(((-1.0)*x159*x164))+(((-1.0)*x163*x164))+(((-13900000.0)*x158))+(((4223700.0)*cj3))+(((-1.0)*sj1*x157*x159)))),IKFAST_ATAN2_MAGTHRESH);
if(!x166.valid){
continue;
}
CheckValue<IkReal> x167=IKPowWithIntegerCheck(IKsign(((-6873829.0)+(((-6179940.0)*cj3)))),-1);
if(!x167.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x166.value)+(((1.5707963267949)*(x167.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x168=IKsin(j2);
IkReal x169=IKcos(j2);
IkReal x170=(px*sj1);
IkReal x171=(py*sj1);
IkReal x172=((1.0)*r00);
IkReal x173=(cj1*sj0);
IkReal x174=((1.0)*px);
IkReal x175=((0.2223)*sj3);
IkReal x176=((1.0)*pz);
IkReal x177=(cj0*r01);
IkReal x178=(pz*sj1);
IkReal x179=(cj0*cj1);
IkReal x180=((0.2223)*cj3);
IkReal x181=((0.139)*x168);
IkReal x182=((0.139)*x169);
IkReal x183=(x168*x180);
IkReal x184=(x169*x175);
IkReal x185=(x168*x175);
IkReal x186=(x169*x180);
IkReal x187=(x181+x183);
IkReal x188=(x185+x186+x182);
evalcond[0]=(((cj0*x170))+((sj0*x171))+(((-1.0)*x184))+x187+(((-1.0)*cj1*x176)));
evalcond[1]=((0.19)+(((-1.0)*x174*x179))+(((-1.0)*py*x173))+x188+(((-1.0)*sj1*x176)));
evalcond[2]=(((pz*r00*x173))+((r01*x170))+(((-1.0)*x184))+x187+((py*r02*x179))+(((-1.0)*cj1*x176*x177))+(((-1.0)*x171*x172))+(((-1.0)*r02*x173*x174)));
evalcond[3]=((((-1.0)*cj1*py*x172))+(((-1.0)*x188))+(((-0.19)*x177))+(((-1.0)*cj0*r02*x171))+((r02*sj0*x170))+(((0.19)*r00*sj0))+((cj1*px*r01))+(((-1.0)*sj0*x172*x178))+((x177*x178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.11228086356825)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-6873829.0)+(((-6179940.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x189=((22230000.0)*sj3);
IkReal x190=(pz*sj1);
IkReal x191=(cj0*px);
IkReal x192=((13900000.0)*sj1);
IkReal x193=(cj1*pz);
IkReal x194=((22230000.0)*cj3);
IkReal x195=(py*sj0);
IkReal x196=((13900000.0)*cj1);
IkReal x197=(sj1*x195);
CheckValue<IkReal> x198=IKPowWithIntegerCheck(IKsign(((-6873829.0)+(((-6179940.0)*cj3)))),-1);
if(!x198.valid){
continue;
}
CheckValue<IkReal> x199 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x189*x195))+(((-1.0)*cj1*x189*x191))+(((-1.0)*x189*x190))+(((-13900000.0)*x193))+(((4223700.0)*sj3))+((sj1*x191*x194))+((x192*x195))+((x194*x197))+((x191*x192))+(((-1.0)*x193*x194)))),IkReal(((2641000.0)+(((-1.0)*x195*x196))+(((-1.0)*x191*x196))+(((-1.0)*x189*x197))+(((-1.0)*x190*x194))+(((4223700.0)*cj3))+(((-13900000.0)*x190))+((x189*x193))+(((-1.0)*cj1*x194*x195))+(((-1.0)*sj1*x189*x191))+(((-1.0)*cj1*x191*x194)))),IKFAST_ATAN2_MAGTHRESH);
if(!x199.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x198.value)))+(x199.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x200=IKsin(j2);
IkReal x201=IKcos(j2);
IkReal x202=(px*sj1);
IkReal x203=(py*sj1);
IkReal x204=((1.0)*r00);
IkReal x205=(cj1*sj0);
IkReal x206=((1.0)*px);
IkReal x207=((0.2223)*sj3);
IkReal x208=((1.0)*pz);
IkReal x209=(cj0*r01);
IkReal x210=(pz*sj1);
IkReal x211=(cj0*cj1);
IkReal x212=((0.2223)*cj3);
IkReal x213=((0.139)*x200);
IkReal x214=((0.139)*x201);
IkReal x215=(x201*x207);
IkReal x216=(x200*x212);
IkReal x217=(x200*x207);
IkReal x218=(x201*x212);
IkReal x219=(x213+x216);
IkReal x220=(x214+x217+x218);
evalcond[0]=((((-1.0)*cj1*x208))+((sj0*x203))+x219+((cj0*x202))+(((-1.0)*x215)));
evalcond[1]=((0.19)+(((-1.0)*x206*x211))+x220+(((-1.0)*sj1*x208))+(((-1.0)*py*x205)));
evalcond[2]=(((pz*r00*x205))+((py*r02*x211))+(((-1.0)*x203*x204))+(((-1.0)*r02*x205*x206))+(((-1.0)*cj1*x208*x209))+((r01*x202))+x215+(((-1.0)*x219)));
evalcond[3]=((((-1.0)*cj0*r02*x203))+((x209*x210))+x220+(((-1.0)*sj0*x204*x210))+(((-0.19)*x209))+(((0.19)*r00*sj0))+(((-1.0)*cj1*py*x204))+((r02*sj0*x202))+((cj1*px*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x221=((2.76778300581234)*pz);
IkReal x222=((2.76778300581234)*py*sj0);
IkReal x223=((2.76778300581234)*cj0*px);
if( IKabs((((cj1*x221))+(((-1.0)*sj1*x222))+(((-1.0)*sj1*x223)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.525878771104345)+((cj1*x222))+((cj1*x223))+((sj1*x221)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x221))+(((-1.0)*sj1*x222))+(((-1.0)*sj1*x223))))+IKsqr(((-0.525878771104345)+((cj1*x222))+((cj1*x223))+((sj1*x221))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x221))+(((-1.0)*sj1*x222))+(((-1.0)*sj1*x223))), ((-0.525878771104345)+((cj1*x222))+((cj1*x223))+((sj1*x221))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x224=IKsin(j2);
IkReal x225=IKcos(j2);
IkReal x226=px*px;
IkReal x227=py*py;
IkReal x228=pz*pz;
IkReal x229=(px*sj1);
IkReal x230=(cj0*r00);
IkReal x231=(cj1*sj0);
IkReal x232=((1.0)*r01);
IkReal x233=(sj0*sj1);
IkReal x234=((1.0)*sj1);
IkReal x235=(py*r00);
IkReal x236=((1.0)*cj1);
IkReal x237=((2.0)*pz);
IkReal x238=(cj0*r02);
IkReal x239=((0.38)*pz);
IkReal x240=(r01*sj0);
IkReal x241=(r01*sj1);
IkReal x242=(pz*r00);
IkReal x243=((0.38)*px);
IkReal x244=(r02*sj0);
IkReal x245=((0.0361)*cj1);
IkReal x246=((0.0361)*r01);
IkReal x247=((0.38)*py);
IkReal x248=(cj0*pz);
IkReal x249=((0.0361)*sj1);
IkReal x250=(py*r01);
IkReal x251=((2.0)*cj0);
IkReal x252=(cj1*px);
IkReal x253=(sj1*x228);
IkReal x254=((0.3613)*x225);
IkReal x255=(r02*x227);
IkReal x256=(r02*x226);
IkReal x257=(cj4*x224);
IkReal x258=((0.3613)*x224);
IkReal x259=(cj4*x225);
IkReal x260=(py*r02*x237);
evalcond[0]=(((sj1*x230))+(((-1.0)*r02*x236))+x259+((r01*x233)));
evalcond[1]=((((-1.0)*pz*x236))+((cj0*x229))+x258+((py*x233)));
evalcond[2]=((((-1.0)*x230*x236))+(((-1.0)*r02*x234))+(((-1.0)*x231*x232))+(((-1.0)*x257)));
evalcond[3]=((0.19)+(((-1.0)*py*x231))+(((-1.0)*pz*x234))+x254+(((-1.0)*cj0*px*x236)));
evalcond[4]=(((sj4*x258))+(((-1.0)*cj1*x232*x248))+((r01*x229))+((x231*x242))+(((-1.0)*px*r02*x231))+((cj1*py*x238))+(((-1.0)*x234*x235)));
evalcond[5]=((((-1.0)*py*x234*x238))+(((-1.0)*x235*x236))+((r01*x252))+((x229*x244))+(((-1.0)*x233*x242))+(((-0.19)*cj0*r01))+(((-1.0)*sj4*x254))+((x241*x248))+(((0.19)*r00*sj0)));
evalcond[6]=(((x250*x251*x252))+((r00*x229*x237))+((x230*x245))+((x237*x238*x252))+((cj1*x226*x230))+(((-1.0)*x226*x231*x232))+((r02*x249))+(((-1.0)*x228*x230*x236))+((py*x237*x241))+(((-1.0)*r02*x239))+(((-1.0)*x227*x230*x236))+(((-1.0)*r01*x247))+((x231*x260))+(((-1.0)*r00*x243))+((x231*x246))+(((-0.13053769)*x257))+(((-1.0)*x234*x256))+(((-1.0)*x234*x255))+(((2.0)*px*x231*x235))+((r02*x253))+(((-1.0)*x228*x231*x232))+((r01*x227*x231)));
evalcond[7]=(((x230*x249))+(((-2.0)*sj0*x229*x235))+(((-1.0)*x227*x232*x233))+(((-1.0)*x230*x239))+((x233*x246))+((r01*x226*x233))+(((0.13053769)*x259))+(((-1.0)*x226*x230*x234))+((x238*x243))+((cj1*x237*x250))+(((-1.0)*x233*x260))+((sj1*x227*x230))+((x244*x247))+((r01*x228*x233))+((r00*x237*x252))+(((-1.0)*x229*x237*x238))+((cj1*r02*x228))+(((-1.0)*x236*x256))+(((-1.0)*x236*x255))+(((-1.0)*r02*x245))+(((-1.0)*x239*x240))+((x230*x253))+(((-1.0)*x229*x250*x251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x261=((12.0048019207683)*sj1);
IkReal x262=(py*sj0);
IkReal x263=(cj0*px);
IkReal x264=((12.0048019207683)*cj1);
if( IKabs((((x261*x263))+((x261*x262))+(((-1.0)*pz*x264)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.28091236494598)+(((-1.0)*x262*x264))+(((-1.0)*x263*x264))+(((-1.0)*pz*x261)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x261*x263))+((x261*x262))+(((-1.0)*pz*x264))))+IKsqr(((2.28091236494598)+(((-1.0)*x262*x264))+(((-1.0)*x263*x264))+(((-1.0)*pz*x261))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x261*x263))+((x261*x262))+(((-1.0)*pz*x264))), ((2.28091236494598)+(((-1.0)*x262*x264))+(((-1.0)*x263*x264))+(((-1.0)*pz*x261))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x265=IKsin(j2);
IkReal x266=IKcos(j2);
IkReal x267=px*px;
IkReal x268=py*py;
IkReal x269=pz*pz;
IkReal x270=(cj0*sj1);
IkReal x271=(r01*sj0);
IkReal x272=((1.0)*cj1);
IkReal x273=(r02*sj1);
IkReal x274=(cj1*r02);
IkReal x275=((1.0)*sj1);
IkReal x276=(py*sj1);
IkReal x277=(py*r00);
IkReal x278=(px*r02);
IkReal x279=(px*r01);
IkReal x280=((0.00693889)*cj4);
IkReal x281=((2.0)*pz);
IkReal x282=((0.38)*pz);
IkReal x283=(r00*sj0);
IkReal x284=((2.0)*px);
IkReal x285=(cj0*r00);
IkReal x286=((0.0361)*cj1);
IkReal x287=(py*sj0);
IkReal x288=(pz*r01);
IkReal x289=((2.0)*py);
IkReal x290=(py*r01);
IkReal x291=(cj0*px);
IkReal x292=(px*r00);
IkReal x293=(r00*x269);
IkReal x294=(r00*x268);
IkReal x295=((1.0)*x267);
IkReal x296=((0.0833)*x266);
IkReal x297=((0.0833)*x265);
IkReal x298=(x281*x287);
evalcond[0]=((((-1.0)*pz*x272))+((px*x270))+(((-1.0)*x297))+((sj0*x276)));
evalcond[1]=((((-1.0)*cj4*x266))+(((-1.0)*r02*x272))+((r00*x270))+((sj1*x271)));
evalcond[2]=((((-1.0)*x273))+(((-1.0)*x271*x272))+((cj4*x265))+(((-1.0)*x272*x285)));
evalcond[3]=((0.19)+(((-1.0)*pz*x275))+(((-1.0)*x272*x291))+(((-1.0)*x296))+(((-1.0)*x272*x287)));
evalcond[4]=((((-1.0)*cj0*x272*x288))+((cj0*py*x274))+(((-1.0)*sj0*x272*x278))+((cj1*pz*x283))+(((-1.0)*x275*x277))+(((-1.0)*sj4*x297))+((sj1*x279)));
evalcond[5]=((((-1.0)*x272*x277))+((px*sj0*x273))+(((-1.0)*py*r02*x270))+((cj1*x279))+((sj4*x296))+(((-0.19)*cj0*r01))+(((-1.0)*pz*x275*x283))+(((0.19)*x283))+((x270*x288)));
evalcond[6]=(((cj1*sj0*x277*x284))+(((-1.0)*r02*x282))+((x285*x286))+(((-1.0)*x269*x271*x272))+(((-1.0)*x268*x272*x285))+((r01*x276*x281))+(((-1.0)*x273*x295))+(((-1.0)*x267*x271*x272))+((x271*x286))+(((-0.38)*x292))+(((-0.38)*x290))+(((0.0361)*x273))+(((-1.0)*x268*x273))+(((-1.0)*x269*x272*x285))+((x274*x281*x291))+((x274*x298))+((x265*x280))+((x269*x273))+((cj1*x267*x285))+((cj1*x268*x271))+((cj0*cj1*x279*x289))+((sj1*x281*x292)));
evalcond[7]=((((-1.0)*r02*x268*x272))+(((0.0361)*r00*x270))+(((-1.0)*x273*x298))+((x270*x293))+((x270*x294))+(((0.38)*cj0*x278))+(((-1.0)*x266*x280))+((cj1*x281*x292))+((cj1*x281*x290))+(((0.0361)*sj1*x271))+(((-1.0)*r00*x270*x295))+(((-1.0)*x270*x278*x281))+((sj1*x267*x271))+(((-1.0)*x282*x285))+(((-0.0361)*x274))+(((-1.0)*x271*x282))+(((-1.0)*r02*x267*x272))+(((-1.0)*x276*x283*x284))+(((0.38)*r02*x287))+((sj1*x269*x271))+((x269*x274))+(((-1.0)*x270*x279*x289))+(((-1.0)*x268*x271*x275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x311=IKPowWithIntegerCheck(cj4,-1);
if(!x311.valid){
continue;
}
IkReal x299=x311.value;
IkReal x300=(cj3*sj1);
IkReal x301=((2223.0)*r02);
IkReal x302=((10000.0)*cj4);
IkReal x303=(py*sj0);
IkReal x304=(cj1*cj3);
IkReal x305=(cj0*r00);
IkReal x306=(cj0*px);
IkReal x307=(r01*sj0);
IkReal x308=((1390.0)*cj1);
IkReal x309=((2223.0)*cj1);
IkReal x310=((-0.000719424460431655)*x299);
CheckValue<IkReal> x312=IKPowWithIntegerCheck(sj3,-1);
if(!x312.valid){
continue;
}
if( IKabs((x310*((((sj1*x302*x306))+((sj1*x302*x303))+(((-1.0)*sj1*x301))+(((-1.0)*cj1*pz*x302))+(((-1.0)*x305*x309))+(((-1.0)*x307*x309)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x310*(x312.value)*(((((-1390.0)*r02*sj1))+(((-2223.0)*x304*x305))+(((-2223.0)*x304*x307))+((x300*x302*x303))+((x300*x302*x306))+(((-1.0)*pz*x302*x304))+(((-1.0)*x305*x308))+(((-1.0)*x307*x308))+(((-1.0)*x300*x301)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x310*((((sj1*x302*x306))+((sj1*x302*x303))+(((-1.0)*sj1*x301))+(((-1.0)*cj1*pz*x302))+(((-1.0)*x305*x309))+(((-1.0)*x307*x309))))))+IKsqr((x310*(x312.value)*(((((-1390.0)*r02*sj1))+(((-2223.0)*x304*x305))+(((-2223.0)*x304*x307))+((x300*x302*x303))+((x300*x302*x306))+(((-1.0)*pz*x302*x304))+(((-1.0)*x305*x308))+(((-1.0)*x307*x308))+(((-1.0)*x300*x301))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x310*((((sj1*x302*x306))+((sj1*x302*x303))+(((-1.0)*sj1*x301))+(((-1.0)*cj1*pz*x302))+(((-1.0)*x305*x309))+(((-1.0)*x307*x309))))), (x310*(x312.value)*(((((-1390.0)*r02*sj1))+(((-2223.0)*x304*x305))+(((-2223.0)*x304*x307))+((x300*x302*x303))+((x300*x302*x306))+(((-1.0)*pz*x302*x304))+(((-1.0)*x305*x308))+(((-1.0)*x307*x308))+(((-1.0)*x300*x301))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x313=IKcos(j2);
IkReal x314=IKsin(j2);
IkReal x315=px*px;
IkReal x316=py*py;
IkReal x317=pz*pz;
IkReal x318=(r01*sj0);
IkReal x319=((1.0)*cj1);
IkReal x320=((1.0)*sj1);
IkReal x321=(py*sj1);
IkReal x322=(cj0*r00);
IkReal x323=((2.0)*pz);
IkReal x324=(cj0*sj1);
IkReal x325=(px*r02);
IkReal x326=(cj1*r02);
IkReal x327=(pz*r01);
IkReal x328=(py*sj0);
IkReal x329=(px*r00);
IkReal x330=((2.0)*cj1);
IkReal x331=(cj0*py);
IkReal x332=((0.2223)*sj3);
IkReal x333=((0.0617994)*cj4);
IkReal x334=((0.06873829)*cj4);
IkReal x335=((0.0361)*cj1);
IkReal x336=((0.38)*r02);
IkReal x337=((0.38)*pz);
IkReal x338=(r02*sj1);
IkReal x339=(cj0*r01);
IkReal x340=(px*r01);
IkReal x341=((0.0361)*sj1);
IkReal x342=(py*r00);
IkReal x343=(cj4*sj3);
IkReal x344=((0.2223)*sj4);
IkReal x345=(py*r01);
IkReal x346=((0.139)*x314);
IkReal x347=(pz*r00*sj0);
IkReal x348=(cj3*x314);
IkReal x349=(cj3*x313);
IkReal x350=((0.03009629)*x343);
IkReal x351=(sj4*x313);
IkReal x352=(sj1*x317);
IkReal x353=(r02*x316);
IkReal x354=(r02*x315);
evalcond[0]=((((-1.0)*r02*x319))+((x314*x343))+((sj1*x318))+((cj4*x349))+((sj1*x322)));
evalcond[1]=((((-1.0)*x318*x319))+(((-1.0)*x319*x322))+((x313*x343))+(((-1.0)*cj4*x348))+(((-1.0)*r02*x320)));
evalcond[2]=((((0.2223)*x348))+(((-1.0)*x313*x332))+x346+(((-1.0)*pz*x319))+((sj0*x321))+((px*x324)));
evalcond[3]=((0.19)+(((0.2223)*x349))+(((0.139)*x313))+(((-1.0)*x319*x328))+((x314*x332))+(((-1.0)*cj0*px*x319))+(((-1.0)*pz*x320)));
evalcond[4]=((((-1.0)*cj0*x319*x327))+(((-1.0)*x332*x351))+(((-1.0)*x320*x342))+((cj1*x347))+((x344*x348))+((sj1*x340))+((sj4*x346))+((x326*x331))+(((-1.0)*sj0*x319*x325)));
evalcond[5]=((((-1.0)*x320*x347))+((cj1*x340))+(((-1.0)*x344*x349))+(((-1.0)*sj4*x314*x332))+((x324*x327))+(((0.19)*r00*sj0))+(((-1.0)*r02*x320*x331))+(((-1.0)*x319*x342))+(((-0.139)*x351))+((sj0*sj1*x325))+(((-0.19)*x339)));
evalcond[6]=(((x330*x331*x340))+(((-1.0)*x315*x318*x319))+(((-1.0)*x334*x348))+((cj1*x316*x318))+(((-1.0)*x316*x319*x322))+((x313*x350))+((x318*x335))+((x328*x329*x330))+(((-1.0)*x317*x319*x322))+(((-1.0)*x320*x354))+(((-1.0)*x320*x353))+((x323*x326*x328))+((cj1*x315*x322))+(((-1.0)*pz*x336))+((x317*x338))+(((-0.38)*x329))+(((0.0361)*x338))+((cj0*cj1*x323*x325))+(((-0.38)*x345))+(((-1.0)*x314*x333))+((x322*x335))+((r01*x321*x323))+((sj1*x323*x329))+(((-1.0)*x317*x318*x319)));
evalcond[7]=(((x318*x341))+((x322*x352))+((x318*x352))+(((-1.0)*x323*x324*x325))+(((-1.0)*x316*x318*x320))+(((-0.0361)*x326))+(((-1.0)*x318*x337))+((cj1*x323*x329))+(((0.38)*cj0*x325))+(((-2.0)*px*x321*x339))+((x314*x350))+((x317*x326))+((x328*x336))+((sj1*x315*x318))+(((-1.0)*x319*x354))+(((-1.0)*x319*x353))+(((-1.0)*x315*x320*x322))+((x322*x341))+(((-1.0)*x322*x337))+(((-1.0)*r02*sj0*x321*x323))+((sj1*x316*x322))+(((-2.0)*sj0*x321*x329))+((x313*x333))+((cj1*x323*x345))+((x334*x349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x355=((10000.0)*cj4);
IkReal x356=(cj1*pz);
IkReal x357=((2223.0)*cj3);
IkReal x358=(cj0*sj1);
IkReal x359=(cj1*r02);
IkReal x360=(sj0*sj1);
IkReal x361=((2223.0)*sj3);
CheckValue<IkReal> x362=IKPowWithIntegerCheck(IKsign(((((2223.0)*cj4))+(((1390.0)*cj3*cj4)))),-1);
if(!x362.valid){
continue;
}
CheckValue<IkReal> x363 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*px*x355*x358))+(((-1.0)*r01*x360*x361))+(((-1.0)*r00*x358*x361))+(((-1.0)*cj3*py*x355*x360))+((x359*x361))+((cj3*x355*x356)))),IkReal(((((-1.0)*r00*x357*x358))+(((-1.0)*r01*x357*x360))+(((1390.0)*x359))+(((-1390.0)*r00*x358))+((px*sj3*x355*x358))+((x357*x359))+(((-1.0)*sj3*x355*x356))+((py*sj3*x355*x360))+(((-1390.0)*r01*x360)))),IKFAST_ATAN2_MAGTHRESH);
if(!x363.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x362.value)))+(x363.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x364=IKcos(j2);
IkReal x365=IKsin(j2);
IkReal x366=px*px;
IkReal x367=py*py;
IkReal x368=pz*pz;
IkReal x369=(r01*sj0);
IkReal x370=((1.0)*cj1);
IkReal x371=((1.0)*sj1);
IkReal x372=(py*sj1);
IkReal x373=(cj0*r00);
IkReal x374=((2.0)*pz);
IkReal x375=(cj0*sj1);
IkReal x376=(px*r02);
IkReal x377=(cj1*r02);
IkReal x378=(pz*r01);
IkReal x379=(py*sj0);
IkReal x380=(px*r00);
IkReal x381=((2.0)*cj1);
IkReal x382=(cj0*py);
IkReal x383=((0.2223)*sj3);
IkReal x384=((0.0617994)*cj4);
IkReal x385=((0.06873829)*cj4);
IkReal x386=((0.0361)*cj1);
IkReal x387=((0.38)*r02);
IkReal x388=((0.38)*pz);
IkReal x389=(r02*sj1);
IkReal x390=(cj0*r01);
IkReal x391=(px*r01);
IkReal x392=((0.0361)*sj1);
IkReal x393=(py*r00);
IkReal x394=(cj4*sj3);
IkReal x395=((0.2223)*sj4);
IkReal x396=(py*r01);
IkReal x397=((0.139)*x365);
IkReal x398=(pz*r00*sj0);
IkReal x399=(cj3*x365);
IkReal x400=(cj3*x364);
IkReal x401=((0.03009629)*x394);
IkReal x402=(sj4*x364);
IkReal x403=(sj1*x368);
IkReal x404=(r02*x367);
IkReal x405=(r02*x366);
evalcond[0]=(((sj1*x373))+((x365*x394))+(((-1.0)*r02*x370))+((sj1*x369))+((cj4*x400)));
evalcond[1]=((((-1.0)*x370*x373))+(((-1.0)*r02*x371))+((x364*x394))+(((-1.0)*cj4*x399))+(((-1.0)*x369*x370)));
evalcond[2]=(((sj0*x372))+(((0.2223)*x399))+(((-1.0)*x364*x383))+((px*x375))+x397+(((-1.0)*pz*x370)));
evalcond[3]=((0.19)+(((0.139)*x364))+(((-1.0)*x370*x379))+(((-1.0)*cj0*px*x370))+((x365*x383))+(((-1.0)*pz*x371))+(((0.2223)*x400)));
evalcond[4]=((((-1.0)*x383*x402))+((x377*x382))+(((-1.0)*sj0*x370*x376))+(((-1.0)*cj0*x370*x378))+((x395*x399))+((sj1*x391))+(((-1.0)*x371*x393))+((cj1*x398))+((sj4*x397)));
evalcond[5]=((((-1.0)*sj4*x365*x383))+((x375*x378))+(((-1.0)*x370*x393))+(((-0.19)*x390))+(((-1.0)*x395*x400))+(((-1.0)*x371*x398))+((sj0*sj1*x376))+(((0.19)*r00*sj0))+((cj1*x391))+(((-0.139)*x402))+(((-1.0)*r02*x371*x382)));
evalcond[6]=(((cj1*x367*x369))+((cj1*x366*x373))+(((-1.0)*x366*x369*x370))+((x373*x386))+(((-1.0)*x365*x384))+(((-1.0)*x367*x370*x373))+(((-1.0)*x385*x399))+((x368*x389))+((cj0*cj1*x374*x376))+((r01*x372*x374))+(((-1.0)*x371*x405))+(((-1.0)*x371*x404))+(((-0.38)*x396))+(((-1.0)*x368*x370*x373))+(((0.0361)*x389))+((x379*x380*x381))+((x381*x382*x391))+((x364*x401))+(((-1.0)*x368*x369*x370))+((sj1*x374*x380))+((x374*x377*x379))+((x369*x386))+(((-1.0)*pz*x387))+(((-0.38)*x380)));
evalcond[7]=((((-1.0)*x373*x388))+((x373*x403))+(((-1.0)*x369*x388))+(((-2.0)*sj0*x372*x380))+(((0.38)*cj0*x376))+((x369*x392))+((cj1*x374*x380))+(((-1.0)*x367*x369*x371))+(((-0.0361)*x377))+(((-1.0)*x370*x404))+(((-1.0)*x370*x405))+((x365*x401))+(((-1.0)*x374*x375*x376))+(((-1.0)*r02*sj0*x372*x374))+((sj1*x367*x373))+((x379*x387))+((sj1*x366*x369))+((x373*x392))+((cj1*x374*x396))+(((-2.0)*px*x372*x390))+(((-1.0)*x366*x371*x373))+((x368*x377))+((x385*x400))+((x369*x403))+((x364*x384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x406=(cj0*r00);
IkReal x407=(cj1*sj3);
IkReal x408=(sj1*sj3);
IkReal x409=(cj1*cj3);
IkReal x410=(r01*sj0);
IkReal x411=((1.0)*cj3*sj1);
IkReal x412=((1.0)*cj3*x410);
CheckValue<IkReal> x413 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x411))+(((-1.0)*x409*x410))+(((-1.0)*x406*x409))+(((-1.0)*x406*x408))+(((-1.0)*x408*x410))+((r02*x407)))),IkReal((((x407*x410))+(((-1.0)*x406*x411))+((x406*x407))+(((-1.0)*x410*x411))+((r02*x409))+((r02*x408)))),IKFAST_ATAN2_MAGTHRESH);
if(!x413.valid){
continue;
}
CheckValue<IkReal> x414=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x414.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x413.value)+(((1.5707963267949)*(x414.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x415=IKcos(j2);
IkReal x416=IKsin(j2);
IkReal x417=px*px;
IkReal x418=py*py;
IkReal x419=pz*pz;
IkReal x420=(r01*sj0);
IkReal x421=((1.0)*cj1);
IkReal x422=((1.0)*sj1);
IkReal x423=(py*sj1);
IkReal x424=(cj0*r00);
IkReal x425=((2.0)*pz);
IkReal x426=(cj0*sj1);
IkReal x427=(px*r02);
IkReal x428=(cj1*r02);
IkReal x429=(pz*r01);
IkReal x430=(py*sj0);
IkReal x431=(px*r00);
IkReal x432=((2.0)*cj1);
IkReal x433=(cj0*py);
IkReal x434=((0.2223)*sj3);
IkReal x435=((0.0617994)*cj4);
IkReal x436=((0.06873829)*cj4);
IkReal x437=((0.0361)*cj1);
IkReal x438=((0.38)*r02);
IkReal x439=((0.38)*pz);
IkReal x440=(r02*sj1);
IkReal x441=(cj0*r01);
IkReal x442=(px*r01);
IkReal x443=((0.0361)*sj1);
IkReal x444=(py*r00);
IkReal x445=(cj4*sj3);
IkReal x446=((0.2223)*sj4);
IkReal x447=(py*r01);
IkReal x448=((0.139)*x416);
IkReal x449=(pz*r00*sj0);
IkReal x450=(cj3*x416);
IkReal x451=(cj3*x415);
IkReal x452=((0.03009629)*x445);
IkReal x453=(sj4*x415);
IkReal x454=(sj1*x419);
IkReal x455=(r02*x418);
IkReal x456=(r02*x417);
evalcond[0]=(((cj4*x451))+((x416*x445))+(((-1.0)*r02*x421))+((sj1*x420))+((sj1*x424)));
evalcond[1]=((((-1.0)*x421*x424))+(((-1.0)*x420*x421))+((x415*x445))+(((-1.0)*cj4*x450))+(((-1.0)*r02*x422)));
evalcond[2]=((((0.2223)*x450))+x448+(((-1.0)*x415*x434))+(((-1.0)*pz*x421))+((sj0*x423))+((px*x426)));
evalcond[3]=((0.19)+(((-1.0)*x421*x430))+(((0.2223)*x451))+((x416*x434))+(((0.139)*x415))+(((-1.0)*pz*x422))+(((-1.0)*cj0*px*x421)));
evalcond[4]=(((sj4*x448))+(((-1.0)*sj0*x421*x427))+((sj1*x442))+((cj1*x449))+((x428*x433))+((x446*x450))+(((-1.0)*cj0*x421*x429))+(((-1.0)*x422*x444))+(((-1.0)*x434*x453)));
evalcond[5]=((((-1.0)*x446*x451))+((x426*x429))+(((-0.139)*x453))+(((-1.0)*r02*x422*x433))+((cj1*x442))+(((-1.0)*sj4*x416*x434))+(((-1.0)*x421*x444))+(((0.19)*r00*sj0))+(((-0.19)*x441))+((sj0*sj1*x427))+(((-1.0)*x422*x449)));
evalcond[6]=(((x415*x452))+((x425*x428*x430))+((x424*x437))+(((-0.38)*x431))+((x430*x431*x432))+(((-1.0)*x416*x435))+((x432*x433*x442))+((cj0*cj1*x425*x427))+(((-1.0)*x422*x455))+(((-1.0)*x422*x456))+(((-1.0)*x418*x421*x424))+(((0.0361)*x440))+(((-1.0)*x417*x420*x421))+((r01*x423*x425))+(((-1.0)*x436*x450))+((cj1*x418*x420))+((x419*x440))+(((-1.0)*pz*x438))+((sj1*x425*x431))+(((-1.0)*x419*x420*x421))+((x420*x437))+((cj1*x417*x424))+(((-1.0)*x419*x421*x424))+(((-0.38)*x447)));
evalcond[7]=(((sj1*x418*x424))+((x424*x443))+(((-2.0)*px*x423*x441))+((x415*x435))+(((-1.0)*x420*x439))+((x419*x428))+(((-1.0)*x418*x420*x422))+((x424*x454))+(((0.38)*cj0*x427))+((sj1*x417*x420))+(((-1.0)*x424*x439))+(((-1.0)*x417*x422*x424))+((x430*x438))+(((-1.0)*x421*x456))+(((-1.0)*x421*x455))+((x416*x452))+((x420*x454))+(((-1.0)*x425*x426*x427))+(((-1.0)*r02*sj0*x423*x425))+((cj1*x425*x431))+(((-2.0)*sj0*x423*x431))+(((-0.0361)*x428))+((x436*x451))+((cj1*x425*x447))+((x420*x443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x457=(cj1*sj0);
IkReal x458=(cj0*cj1);
CheckValue<IkReal> x459=IKPowWithIntegerCheck(cj4,-1);
if(!x459.valid){
continue;
}
if( IKabs(((0.00719424460431655)*(x459.value)*(((((-190.0)*r01*x457))+(((-190.0)*r00*x458))+(((1000.0)*pz*r02))+(((1000.0)*py*r01))+(((-190.0)*r02*sj1))+(((1000.0)*px*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.5281327974058)+(((16.1813868743062)*(py*py)))+(((16.1813868743062)*(px*px)))+(((-6.14892701223636)*pz*sj1))+(((-6.14892701223636)*py*x457))+(((16.1813868743062)*(pz*pz)))+(((-6.14892701223636)*px*x458)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00719424460431655)*(x459.value)*(((((-190.0)*r01*x457))+(((-190.0)*r00*x458))+(((1000.0)*pz*r02))+(((1000.0)*py*r01))+(((-190.0)*r02*sj1))+(((1000.0)*px*r00))))))+IKsqr(((-0.5281327974058)+(((16.1813868743062)*(py*py)))+(((16.1813868743062)*(px*px)))+(((-6.14892701223636)*pz*sj1))+(((-6.14892701223636)*py*x457))+(((16.1813868743062)*(pz*pz)))+(((-6.14892701223636)*px*x458))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00719424460431655)*(x459.value)*(((((-190.0)*r01*x457))+(((-190.0)*r00*x458))+(((1000.0)*pz*r02))+(((1000.0)*py*r01))+(((-190.0)*r02*sj1))+(((1000.0)*px*r00))))), ((-0.5281327974058)+(((16.1813868743062)*(py*py)))+(((16.1813868743062)*(px*px)))+(((-6.14892701223636)*pz*sj1))+(((-6.14892701223636)*py*x457))+(((16.1813868743062)*(pz*pz)))+(((-6.14892701223636)*px*x458))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x460=IKcos(j3);
IkReal x461=px*px;
IkReal x462=pz*pz;
IkReal x463=py*py;
IkReal x464=(r01*sj0);
IkReal x465=((2.0)*py);
IkReal x466=(r00*sj0);
IkReal x467=((0.19)*cj1);
IkReal x468=(r02*sj0);
IkReal x469=((0.38)*sj1);
IkReal x470=((1.0)*pz);
IkReal x471=(cj0*r01);
IkReal x472=(cj0*r02);
IkReal x473=((0.38)*cj1);
IkReal x474=((0.19)*sj1);
IkReal x475=((0.139)*cj4);
IkReal x476=(cj0*r00);
IkReal x477=((0.0617994)*x460);
IkReal x478=((1.0)*x462);
IkReal x479=((1.0)*x463);
evalcond[0]=((((-1.0)*px*r00))+((x475*(IKsin(j3))))+((r02*x474))+((x467*x476))+(((-1.0)*py*r01))+((x464*x467))+(((-1.0)*r02*x470)));
evalcond[1]=((0.03263829)+((py*sj0*x473))+((cj0*px*x473))+(((-1.0)*x461))+(((-1.0)*x479))+(((-1.0)*x478))+x477+((pz*x469)));
evalcond[2]=((((-1.0)*x460*x475))+(((-1.0)*x464*x470))+(((-0.2223)*cj4))+((x464*x474))+((x474*x476))+(((-1.0)*r02*x467))+(((-1.0)*x470*x476))+((py*x468))+((px*x472)));
evalcond[3]=((((-1.0)*pz*x469*x471))+((x461*x466))+((x462*x471))+(((-1.0)*sj4*x477))+(((-0.06873829)*sj4))+(((-0.0361)*x466))+(((2.0)*px*pz*x468))+((py*r00*x473))+((pz*x466*x469))+(((-1.0)*px*x468*x469))+(((0.0361)*x471))+(((-1.0)*px*r01*x473))+(((-1.0)*x471*x479))+(((-1.0)*pz*x465*x472))+((py*x469*x472))+(((-1.0)*px*x465*x476))+(((-1.0)*x466*x479))+(((-1.0)*x466*x478))+((x461*x471))+((px*x464*x465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x480=(cj3*cj4);
j2eval[0]=(x480+(((1.59928057553957)*cj4)));
j2eval[1]=IKsign(((((2223.0)*cj4))+(((1390.0)*x480))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.11228086356825)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-6873829.0)+(((-6179940.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x481=((22230000.0)*sj3);
IkReal x482=(pz*sj1);
IkReal x483=(cj0*px);
IkReal x484=((13900000.0)*sj1);
IkReal x485=(cj1*pz);
IkReal x486=((22230000.0)*cj3);
IkReal x487=(py*sj0);
IkReal x488=((13900000.0)*cj1);
IkReal x489=(sj1*x487);
CheckValue<IkReal> x490 = IKatan2WithCheck(IkReal((((x484*x487))+(((-13900000.0)*x485))+((x483*x484))+(((-1.0)*cj1*x481*x487))+(((-1.0)*cj1*x481*x483))+(((4223700.0)*sj3))+(((-1.0)*x481*x482))+((sj1*x483*x486))+((x486*x489))+(((-1.0)*x485*x486)))),IkReal(((2641000.0)+(((-13900000.0)*x482))+(((-1.0)*x483*x488))+(((4223700.0)*cj3))+(((-1.0)*cj1*x486*x487))+(((-1.0)*cj1*x483*x486))+(((-1.0)*x481*x489))+((x481*x485))+(((-1.0)*x487*x488))+(((-1.0)*sj1*x481*x483))+(((-1.0)*x482*x486)))),IKFAST_ATAN2_MAGTHRESH);
if(!x490.valid){
continue;
}
CheckValue<IkReal> x491=IKPowWithIntegerCheck(IKsign(((-6873829.0)+(((-6179940.0)*cj3)))),-1);
if(!x491.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x490.value)+(((1.5707963267949)*(x491.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x492=IKsin(j2);
IkReal x493=IKcos(j2);
IkReal x494=(px*sj1);
IkReal x495=(py*sj1);
IkReal x496=((1.0)*r00);
IkReal x497=(cj1*sj0);
IkReal x498=((1.0)*px);
IkReal x499=((0.2223)*sj3);
IkReal x500=((1.0)*pz);
IkReal x501=(cj0*r01);
IkReal x502=(pz*sj1);
IkReal x503=(cj0*cj1);
IkReal x504=((0.2223)*cj3);
IkReal x505=((0.139)*x492);
IkReal x506=((0.139)*x493);
IkReal x507=(x492*x504);
IkReal x508=(x493*x499);
IkReal x509=(x492*x499);
IkReal x510=(x493*x504);
IkReal x511=(x505+x507);
IkReal x512=(x509+x506+x510);
evalcond[0]=((((-1.0)*x508))+((cj0*x494))+((sj0*x495))+x511+(((-1.0)*cj1*x500)));
evalcond[1]=((0.19)+(((-1.0)*sj1*x500))+(((-1.0)*py*x497))+x512+(((-1.0)*x498*x503)));
evalcond[2]=((((-1.0)*cj1*x500*x501))+(((-1.0)*x495*x496))+(((-1.0)*x508))+((pz*r00*x497))+x511+(((-1.0)*r02*x497*x498))+((r01*x494))+((py*r02*x503)));
evalcond[3]=(((r02*sj0*x494))+(((-1.0)*sj0*x496*x502))+(((-1.0)*cj1*py*x496))+((x501*x502))+(((-1.0)*cj0*r02*x495))+(((-0.19)*x501))+(((0.19)*r00*sj0))+(((-1.0)*x512))+((cj1*px*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.11228086356825)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-6873829.0)+(((-6179940.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x513=((22230000.0)*sj3);
IkReal x514=(pz*sj1);
IkReal x515=(cj0*px);
IkReal x516=((13900000.0)*sj1);
IkReal x517=(cj1*pz);
IkReal x518=((22230000.0)*cj3);
IkReal x519=(py*sj0);
IkReal x520=((13900000.0)*cj1);
IkReal x521=(sj1*x519);
CheckValue<IkReal> x522 = IKatan2WithCheck(IkReal((((sj1*x515*x518))+(((4223700.0)*sj3))+(((-1.0)*cj1*x513*x519))+(((-1.0)*cj1*x513*x515))+(((-1.0)*x513*x514))+((x518*x521))+(((-1.0)*x517*x518))+((x516*x519))+((x515*x516))+(((-13900000.0)*x517)))),IkReal(((2641000.0)+(((-1.0)*x514*x518))+(((-1.0)*cj1*x515*x518))+(((4223700.0)*cj3))+((x513*x517))+(((-1.0)*cj1*x518*x519))+(((-1.0)*sj1*x513*x515))+(((-1.0)*x515*x520))+(((-1.0)*x513*x521))+(((-13900000.0)*x514))+(((-1.0)*x519*x520)))),IKFAST_ATAN2_MAGTHRESH);
if(!x522.valid){
continue;
}
CheckValue<IkReal> x523=IKPowWithIntegerCheck(IKsign(((-6873829.0)+(((-6179940.0)*cj3)))),-1);
if(!x523.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x522.value)+(((1.5707963267949)*(x523.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x524=IKsin(j2);
IkReal x525=IKcos(j2);
IkReal x526=(px*sj1);
IkReal x527=(py*sj1);
IkReal x528=((1.0)*r00);
IkReal x529=(cj1*sj0);
IkReal x530=((1.0)*px);
IkReal x531=((0.2223)*sj3);
IkReal x532=((1.0)*pz);
IkReal x533=(cj0*r01);
IkReal x534=(pz*sj1);
IkReal x535=(cj0*cj1);
IkReal x536=((0.2223)*cj3);
IkReal x537=((0.139)*x524);
IkReal x538=((0.139)*x525);
IkReal x539=(x525*x531);
IkReal x540=(x524*x536);
IkReal x541=(x524*x531);
IkReal x542=(x525*x536);
IkReal x543=(x540+x537);
IkReal x544=(x541+x542+x538);
evalcond[0]=(((sj0*x527))+((cj0*x526))+(((-1.0)*cj1*x532))+(((-1.0)*x539))+x543);
evalcond[1]=((0.19)+(((-1.0)*sj1*x532))+(((-1.0)*x530*x535))+(((-1.0)*py*x529))+x544);
evalcond[2]=(((pz*r00*x529))+(((-1.0)*x527*x528))+(((-1.0)*x543))+((py*r02*x535))+(((-1.0)*cj1*x532*x533))+x539+(((-1.0)*r02*x529*x530))+((r01*x526)));
evalcond[3]=((((-1.0)*cj0*r02*x527))+((r02*sj0*x526))+(((-1.0)*cj1*py*x528))+x544+(((-1.0)*sj0*x528*x534))+(((0.19)*r00*sj0))+(((-0.19)*x533))+((cj1*px*r01))+((x533*x534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x545=((2.76778300581234)*pz);
IkReal x546=((2.76778300581234)*py*sj0);
IkReal x547=((2.76778300581234)*cj0*px);
if( IKabs(((((-1.0)*sj1*x547))+(((-1.0)*sj1*x546))+((cj1*x545)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.525878771104345)+((sj1*x545))+((cj1*x546))+((cj1*x547)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x547))+(((-1.0)*sj1*x546))+((cj1*x545))))+IKsqr(((-0.525878771104345)+((sj1*x545))+((cj1*x546))+((cj1*x547))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj1*x547))+(((-1.0)*sj1*x546))+((cj1*x545))), ((-0.525878771104345)+((sj1*x545))+((cj1*x546))+((cj1*x547))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x548=IKsin(j2);
IkReal x549=IKcos(j2);
IkReal x550=px*px;
IkReal x551=py*py;
IkReal x552=pz*pz;
IkReal x553=(px*sj1);
IkReal x554=(cj0*r00);
IkReal x555=(cj1*sj0);
IkReal x556=((1.0)*r01);
IkReal x557=(sj0*sj1);
IkReal x558=((1.0)*sj1);
IkReal x559=(py*r00);
IkReal x560=((1.0)*cj1);
IkReal x561=((2.0)*pz);
IkReal x562=(cj0*r02);
IkReal x563=((0.38)*pz);
IkReal x564=(r01*sj0);
IkReal x565=(r01*sj1);
IkReal x566=(pz*r00);
IkReal x567=((0.38)*px);
IkReal x568=(r02*sj0);
IkReal x569=((0.0361)*cj1);
IkReal x570=((0.0361)*r01);
IkReal x571=((0.38)*py);
IkReal x572=(cj0*pz);
IkReal x573=((0.0361)*sj1);
IkReal x574=(py*r01);
IkReal x575=((2.0)*cj0);
IkReal x576=(cj1*px);
IkReal x577=(sj1*x552);
IkReal x578=((0.3613)*x549);
IkReal x579=(r02*x551);
IkReal x580=(r02*x550);
IkReal x581=(cj4*x548);
IkReal x582=((0.3613)*x548);
IkReal x583=(cj4*x549);
IkReal x584=(py*r02*x561);
evalcond[0]=(((sj1*x554))+x583+((r01*x557))+(((-1.0)*r02*x560)));
evalcond[1]=(((cj0*x553))+((py*x557))+(((-1.0)*pz*x560))+x582);
evalcond[2]=((((-1.0)*x555*x556))+(((-1.0)*x581))+(((-1.0)*r02*x558))+(((-1.0)*x554*x560)));
evalcond[3]=((0.19)+(((-1.0)*py*x555))+(((-1.0)*cj0*px*x560))+x578+(((-1.0)*pz*x558)));
evalcond[4]=(((cj1*py*x562))+(((-1.0)*px*r02*x555))+(((-1.0)*cj1*x556*x572))+(((-1.0)*x558*x559))+((sj4*x582))+((r01*x553))+((x555*x566)));
evalcond[5]=(((r01*x576))+((x553*x568))+(((-0.19)*cj0*r01))+((x565*x572))+(((-1.0)*x559*x560))+(((-1.0)*sj4*x578))+(((0.19)*r00*sj0))+(((-1.0)*py*x558*x562))+(((-1.0)*x557*x566)));
evalcond[6]=(((x561*x562*x576))+(((-1.0)*r01*x571))+(((-1.0)*x550*x555*x556))+(((-1.0)*x552*x554*x560))+((x574*x575*x576))+((x555*x570))+((r02*x573))+((r02*x577))+((r01*x551*x555))+(((-1.0)*x558*x579))+(((-1.0)*x552*x555*x556))+(((2.0)*px*x555*x559))+((cj1*x550*x554))+(((-1.0)*x558*x580))+(((-1.0)*x551*x554*x560))+((x555*x584))+((r00*x553*x561))+((x554*x569))+(((-1.0)*r02*x563))+(((-1.0)*r00*x567))+((py*x561*x565))+(((-0.13053769)*x581)));
evalcond[7]=(((cj1*x561*x574))+(((-1.0)*x550*x554*x558))+((x554*x577))+((x554*x573))+(((-1.0)*x560*x580))+((x562*x567))+(((-1.0)*x553*x574*x575))+((r00*x561*x576))+((r01*x552*x557))+(((-1.0)*x560*x579))+((sj1*x551*x554))+((x557*x570))+(((0.13053769)*x583))+(((-1.0)*x551*x556*x557))+((r01*x550*x557))+(((-1.0)*x554*x563))+(((-1.0)*x563*x564))+(((-2.0)*sj0*x553*x559))+((x568*x571))+((cj1*r02*x552))+(((-1.0)*x553*x561*x562))+(((-1.0)*r02*x569))+(((-1.0)*x557*x584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x585=((12.0048019207683)*sj1);
IkReal x586=(py*sj0);
IkReal x587=(cj0*px);
IkReal x588=((12.0048019207683)*cj1);
if( IKabs(((((-1.0)*pz*x588))+((x585*x587))+((x585*x586)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.28091236494598)+(((-1.0)*pz*x585))+(((-1.0)*x586*x588))+(((-1.0)*x587*x588)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*pz*x588))+((x585*x587))+((x585*x586))))+IKsqr(((2.28091236494598)+(((-1.0)*pz*x585))+(((-1.0)*x586*x588))+(((-1.0)*x587*x588))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*pz*x588))+((x585*x587))+((x585*x586))), ((2.28091236494598)+(((-1.0)*pz*x585))+(((-1.0)*x586*x588))+(((-1.0)*x587*x588))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x589=IKsin(j2);
IkReal x590=IKcos(j2);
IkReal x591=px*px;
IkReal x592=py*py;
IkReal x593=pz*pz;
IkReal x594=(cj0*sj1);
IkReal x595=(r01*sj0);
IkReal x596=((1.0)*cj1);
IkReal x597=(r02*sj1);
IkReal x598=(cj1*r02);
IkReal x599=((1.0)*sj1);
IkReal x600=(py*sj1);
IkReal x601=(py*r00);
IkReal x602=(px*r02);
IkReal x603=(px*r01);
IkReal x604=((0.00693889)*cj4);
IkReal x605=((2.0)*pz);
IkReal x606=((0.38)*pz);
IkReal x607=(r00*sj0);
IkReal x608=((2.0)*px);
IkReal x609=(cj0*r00);
IkReal x610=((0.0361)*cj1);
IkReal x611=(py*sj0);
IkReal x612=(pz*r01);
IkReal x613=((2.0)*py);
IkReal x614=(py*r01);
IkReal x615=(cj0*px);
IkReal x616=(px*r00);
IkReal x617=(r00*x593);
IkReal x618=(r00*x592);
IkReal x619=((1.0)*x591);
IkReal x620=((0.0833)*x590);
IkReal x621=((0.0833)*x589);
IkReal x622=(x605*x611);
evalcond[0]=(((sj0*x600))+(((-1.0)*x621))+(((-1.0)*pz*x596))+((px*x594)));
evalcond[1]=(((r00*x594))+(((-1.0)*r02*x596))+(((-1.0)*cj4*x590))+((sj1*x595)));
evalcond[2]=((((-1.0)*x596*x609))+(((-1.0)*x597))+((cj4*x589))+(((-1.0)*x595*x596)));
evalcond[3]=((0.19)+(((-1.0)*x620))+(((-1.0)*x596*x611))+(((-1.0)*x596*x615))+(((-1.0)*pz*x599)));
evalcond[4]=(((sj1*x603))+((cj1*pz*x607))+(((-1.0)*cj0*x596*x612))+(((-1.0)*x599*x601))+(((-1.0)*sj0*x596*x602))+((cj0*py*x598))+(((-1.0)*sj4*x621)));
evalcond[5]=(((sj4*x620))+((x594*x612))+(((-1.0)*x596*x601))+(((-1.0)*py*r02*x594))+(((-0.19)*cj0*r01))+((px*sj0*x597))+((cj1*x603))+(((-1.0)*pz*x599*x607))+(((0.19)*x607)));
evalcond[6]=(((r01*x600*x605))+(((-1.0)*x592*x597))+(((-1.0)*x597*x619))+((x595*x610))+((cj0*cj1*x603*x613))+(((-1.0)*x593*x595*x596))+((cj1*x592*x595))+(((-1.0)*x591*x595*x596))+((x589*x604))+((cj1*x591*x609))+((sj1*x605*x616))+((x598*x622))+((x609*x610))+((cj1*sj0*x601*x608))+(((0.0361)*x597))+(((-1.0)*r02*x606))+(((-0.38)*x616))+(((-0.38)*x614))+(((-1.0)*x593*x596*x609))+((x598*x605*x615))+(((-1.0)*x592*x596*x609))+((x593*x597)));
evalcond[7]=(((sj1*x593*x595))+(((0.38)*r02*x611))+(((-1.0)*x590*x604))+(((0.0361)*r00*x594))+(((-1.0)*x594*x602*x605))+(((-0.0361)*x598))+((x594*x617))+((x594*x618))+((sj1*x591*x595))+(((-1.0)*x600*x607*x608))+(((-1.0)*x592*x595*x599))+(((-1.0)*r02*x592*x596))+((cj1*x605*x616))+((cj1*x605*x614))+(((-1.0)*r00*x594*x619))+(((0.0361)*sj1*x595))+(((0.38)*cj0*x602))+(((-1.0)*x606*x609))+(((-1.0)*r02*x591*x596))+(((-1.0)*x597*x622))+((x593*x598))+(((-1.0)*x594*x603*x613))+(((-1.0)*x595*x606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x635=IKPowWithIntegerCheck(cj4,-1);
if(!x635.valid){
continue;
}
IkReal x623=x635.value;
IkReal x624=(cj3*sj1);
IkReal x625=((2223.0)*r02);
IkReal x626=((10000.0)*cj4);
IkReal x627=(py*sj0);
IkReal x628=(cj1*cj3);
IkReal x629=(cj0*r00);
IkReal x630=(cj0*px);
IkReal x631=(r01*sj0);
IkReal x632=((1390.0)*cj1);
IkReal x633=((2223.0)*cj1);
IkReal x634=((-0.000719424460431655)*x623);
CheckValue<IkReal> x636=IKPowWithIntegerCheck(sj3,-1);
if(!x636.valid){
continue;
}
if( IKabs((x634*(((((-1.0)*x629*x633))+(((-1.0)*x631*x633))+(((-1.0)*cj1*pz*x626))+((sj1*x626*x627))+((sj1*x626*x630))+(((-1.0)*sj1*x625)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x634*(x636.value)*(((((-1.0)*x629*x632))+(((-1.0)*x631*x632))+((x624*x626*x627))+((x624*x626*x630))+(((-1390.0)*r02*sj1))+(((-1.0)*x624*x625))+(((-2223.0)*x628*x631))+(((-2223.0)*x628*x629))+(((-1.0)*pz*x626*x628)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x634*(((((-1.0)*x629*x633))+(((-1.0)*x631*x633))+(((-1.0)*cj1*pz*x626))+((sj1*x626*x627))+((sj1*x626*x630))+(((-1.0)*sj1*x625))))))+IKsqr((x634*(x636.value)*(((((-1.0)*x629*x632))+(((-1.0)*x631*x632))+((x624*x626*x627))+((x624*x626*x630))+(((-1390.0)*r02*sj1))+(((-1.0)*x624*x625))+(((-2223.0)*x628*x631))+(((-2223.0)*x628*x629))+(((-1.0)*pz*x626*x628))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x634*(((((-1.0)*x629*x633))+(((-1.0)*x631*x633))+(((-1.0)*cj1*pz*x626))+((sj1*x626*x627))+((sj1*x626*x630))+(((-1.0)*sj1*x625))))), (x634*(x636.value)*(((((-1.0)*x629*x632))+(((-1.0)*x631*x632))+((x624*x626*x627))+((x624*x626*x630))+(((-1390.0)*r02*sj1))+(((-1.0)*x624*x625))+(((-2223.0)*x628*x631))+(((-2223.0)*x628*x629))+(((-1.0)*pz*x626*x628))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x637=IKcos(j2);
IkReal x638=IKsin(j2);
IkReal x639=px*px;
IkReal x640=py*py;
IkReal x641=pz*pz;
IkReal x642=(r01*sj0);
IkReal x643=((1.0)*cj1);
IkReal x644=((1.0)*sj1);
IkReal x645=(py*sj1);
IkReal x646=(cj0*r00);
IkReal x647=((2.0)*pz);
IkReal x648=(cj0*sj1);
IkReal x649=(px*r02);
IkReal x650=(cj1*r02);
IkReal x651=(pz*r01);
IkReal x652=(py*sj0);
IkReal x653=(px*r00);
IkReal x654=((2.0)*cj1);
IkReal x655=(cj0*py);
IkReal x656=((0.2223)*sj3);
IkReal x657=((0.0617994)*cj4);
IkReal x658=((0.06873829)*cj4);
IkReal x659=((0.0361)*cj1);
IkReal x660=((0.38)*r02);
IkReal x661=((0.38)*pz);
IkReal x662=(r02*sj1);
IkReal x663=(cj0*r01);
IkReal x664=(px*r01);
IkReal x665=((0.0361)*sj1);
IkReal x666=(py*r00);
IkReal x667=(cj4*sj3);
IkReal x668=((0.2223)*sj4);
IkReal x669=(py*r01);
IkReal x670=((0.139)*x638);
IkReal x671=(pz*r00*sj0);
IkReal x672=(cj3*x638);
IkReal x673=(cj3*x637);
IkReal x674=((0.03009629)*x667);
IkReal x675=(sj4*x637);
IkReal x676=(sj1*x641);
IkReal x677=(r02*x640);
IkReal x678=(r02*x639);
evalcond[0]=(((sj1*x642))+((sj1*x646))+(((-1.0)*r02*x643))+((cj4*x673))+((x638*x667)));
evalcond[1]=((((-1.0)*x642*x643))+(((-1.0)*r02*x644))+(((-1.0)*x643*x646))+((x637*x667))+(((-1.0)*cj4*x672)));
evalcond[2]=(((sj0*x645))+(((0.2223)*x672))+((px*x648))+x670+(((-1.0)*pz*x643))+(((-1.0)*x637*x656)));
evalcond[3]=((0.19)+(((0.139)*x637))+(((0.2223)*x673))+(((-1.0)*cj0*px*x643))+(((-1.0)*x643*x652))+(((-1.0)*pz*x644))+((x638*x656)));
evalcond[4]=(((sj1*x664))+(((-1.0)*sj0*x643*x649))+((x668*x672))+(((-1.0)*cj0*x643*x651))+((sj4*x670))+(((-1.0)*x644*x666))+(((-1.0)*x656*x675))+((x650*x655))+((cj1*x671)));
evalcond[5]=((((-0.139)*x675))+((sj0*sj1*x649))+(((-1.0)*x668*x673))+(((-1.0)*r02*x644*x655))+((x648*x651))+(((-1.0)*x643*x666))+(((0.19)*r00*sj0))+(((-0.19)*x663))+((cj1*x664))+(((-1.0)*sj4*x638*x656))+(((-1.0)*x644*x671)));
evalcond[6]=((((-0.38)*x653))+((r01*x645*x647))+(((-1.0)*x641*x643*x646))+(((0.0361)*x662))+((x646*x659))+(((-1.0)*x639*x642*x643))+((x652*x653*x654))+((cj0*cj1*x647*x649))+((x647*x650*x652))+(((-1.0)*x658*x672))+((cj1*x639*x646))+((x641*x662))+((x654*x655*x664))+(((-1.0)*x640*x643*x646))+((sj1*x647*x653))+(((-1.0)*pz*x660))+((x642*x659))+(((-0.38)*x669))+(((-1.0)*x641*x642*x643))+(((-1.0)*x638*x657))+((x637*x674))+((cj1*x640*x642))+(((-1.0)*x644*x678))+(((-1.0)*x644*x677)));
evalcond[7]=((((-1.0)*x640*x642*x644))+((x642*x665))+(((-1.0)*x643*x677))+(((-1.0)*x643*x678))+(((-1.0)*x642*x661))+(((-1.0)*x647*x648*x649))+((sj1*x640*x646))+((x646*x676))+((x658*x673))+(((-2.0)*sj0*x645*x653))+((cj1*x647*x669))+((x637*x657))+((sj1*x639*x642))+((x642*x676))+((cj1*x647*x653))+((x641*x650))+((x638*x674))+(((-0.0361)*x650))+((x652*x660))+((x646*x665))+(((-2.0)*px*x645*x663))+(((0.38)*cj0*x649))+(((-1.0)*x639*x644*x646))+(((-1.0)*x646*x661))+(((-1.0)*r02*sj0*x645*x647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x679=((10000.0)*cj4);
IkReal x680=(cj1*pz);
IkReal x681=((2223.0)*cj3);
IkReal x682=(cj0*sj1);
IkReal x683=(cj1*r02);
IkReal x684=(sj0*sj1);
IkReal x685=((2223.0)*sj3);
CheckValue<IkReal> x686=IKPowWithIntegerCheck(IKsign(((((2223.0)*cj4))+(((1390.0)*cj3*cj4)))),-1);
if(!x686.valid){
continue;
}
CheckValue<IkReal> x687 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*py*x679*x684))+((x683*x685))+(((-1.0)*cj3*px*x679*x682))+(((-1.0)*r01*x684*x685))+(((-1.0)*r00*x682*x685))+((cj3*x679*x680)))),IkReal(((((-1390.0)*r00*x682))+(((-1.0)*r00*x681*x682))+(((-1.0)*sj3*x679*x680))+(((1390.0)*x683))+((px*sj3*x679*x682))+((py*sj3*x679*x684))+((x681*x683))+(((-1390.0)*r01*x684))+(((-1.0)*r01*x681*x684)))),IKFAST_ATAN2_MAGTHRESH);
if(!x687.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x686.value)))+(x687.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x688=IKcos(j2);
IkReal x689=IKsin(j2);
IkReal x690=px*px;
IkReal x691=py*py;
IkReal x692=pz*pz;
IkReal x693=(r01*sj0);
IkReal x694=((1.0)*cj1);
IkReal x695=((1.0)*sj1);
IkReal x696=(py*sj1);
IkReal x697=(cj0*r00);
IkReal x698=((2.0)*pz);
IkReal x699=(cj0*sj1);
IkReal x700=(px*r02);
IkReal x701=(cj1*r02);
IkReal x702=(pz*r01);
IkReal x703=(py*sj0);
IkReal x704=(px*r00);
IkReal x705=((2.0)*cj1);
IkReal x706=(cj0*py);
IkReal x707=((0.2223)*sj3);
IkReal x708=((0.0617994)*cj4);
IkReal x709=((0.06873829)*cj4);
IkReal x710=((0.0361)*cj1);
IkReal x711=((0.38)*r02);
IkReal x712=((0.38)*pz);
IkReal x713=(r02*sj1);
IkReal x714=(cj0*r01);
IkReal x715=(px*r01);
IkReal x716=((0.0361)*sj1);
IkReal x717=(py*r00);
IkReal x718=(cj4*sj3);
IkReal x719=((0.2223)*sj4);
IkReal x720=(py*r01);
IkReal x721=((0.139)*x689);
IkReal x722=(pz*r00*sj0);
IkReal x723=(cj3*x689);
IkReal x724=(cj3*x688);
IkReal x725=((0.03009629)*x718);
IkReal x726=(sj4*x688);
IkReal x727=(sj1*x692);
IkReal x728=(r02*x691);
IkReal x729=(r02*x690);
evalcond[0]=(((cj4*x724))+((x689*x718))+((sj1*x693))+((sj1*x697))+(((-1.0)*r02*x694)));
evalcond[1]=((((-1.0)*x693*x694))+(((-1.0)*r02*x695))+(((-1.0)*x694*x697))+((x688*x718))+(((-1.0)*cj4*x723)));
evalcond[2]=(((sj0*x696))+(((0.2223)*x723))+((px*x699))+(((-1.0)*x688*x707))+(((-1.0)*pz*x694))+x721);
evalcond[3]=((0.19)+((x689*x707))+(((-1.0)*x694*x703))+(((0.2223)*x724))+(((-1.0)*pz*x695))+(((0.139)*x688))+(((-1.0)*cj0*px*x694)));
evalcond[4]=(((cj1*x722))+((x701*x706))+(((-1.0)*x695*x717))+((sj1*x715))+((x719*x723))+(((-1.0)*sj0*x694*x700))+((sj4*x721))+(((-1.0)*x707*x726))+(((-1.0)*cj0*x694*x702)));
evalcond[5]=((((-0.19)*x714))+(((-1.0)*x695*x722))+(((-0.139)*x726))+(((-1.0)*x694*x717))+(((-1.0)*sj4*x689*x707))+(((0.19)*r00*sj0))+(((-1.0)*r02*x695*x706))+(((-1.0)*x719*x724))+((cj1*x715))+((x699*x702))+((sj0*sj1*x700)));
evalcond[6]=((((-1.0)*x689*x708))+(((-1.0)*x691*x694*x697))+(((-1.0)*pz*x711))+((cj1*x691*x693))+((x703*x704*x705))+((cj1*x690*x697))+(((-1.0)*x709*x723))+(((-1.0)*x695*x728))+(((-1.0)*x695*x729))+((x698*x701*x703))+(((-1.0)*x692*x693*x694))+(((-1.0)*x690*x693*x694))+((x692*x713))+((cj0*cj1*x698*x700))+(((-1.0)*x692*x694*x697))+((x697*x710))+((x688*x725))+((sj1*x698*x704))+((r01*x696*x698))+(((-0.38)*x720))+((x705*x706*x715))+((x693*x710))+(((0.0361)*x713))+(((-0.38)*x704)));
evalcond[7]=((((-1.0)*x693*x712))+((x693*x727))+(((-0.0361)*x701))+((x689*x725))+(((-2.0)*px*x696*x714))+(((-1.0)*x694*x729))+(((-1.0)*x694*x728))+(((-2.0)*sj0*x696*x704))+((x709*x724))+((x703*x711))+((x692*x701))+(((0.38)*cj0*x700))+((x697*x727))+(((-1.0)*r02*sj0*x696*x698))+(((-1.0)*x690*x695*x697))+((sj1*x691*x697))+((x697*x716))+((sj1*x690*x693))+(((-1.0)*x697*x712))+((cj1*x698*x704))+((x688*x708))+((x693*x716))+(((-1.0)*x691*x693*x695))+((cj1*x698*x720))+(((-1.0)*x698*x699*x700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x730=(cj0*r00);
IkReal x731=(cj1*sj3);
IkReal x732=(sj1*sj3);
IkReal x733=(cj1*cj3);
IkReal x734=(r01*sj0);
IkReal x735=((1.0)*cj3*sj1);
IkReal x736=((1.0)*cj3*x734);
CheckValue<IkReal> x737 = IKatan2WithCheck(IkReal(((((-1.0)*x732*x734))+(((-1.0)*x730*x733))+(((-1.0)*x730*x732))+(((-1.0)*x733*x734))+(((-1.0)*r02*x735))+((r02*x731)))),IkReal((((x731*x734))+(((-1.0)*x734*x735))+(((-1.0)*x730*x735))+((r02*x733))+((r02*x732))+((x730*x731)))),IKFAST_ATAN2_MAGTHRESH);
if(!x737.valid){
continue;
}
CheckValue<IkReal> x738=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x738.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x737.value)+(((1.5707963267949)*(x738.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x739=IKcos(j2);
IkReal x740=IKsin(j2);
IkReal x741=px*px;
IkReal x742=py*py;
IkReal x743=pz*pz;
IkReal x744=(r01*sj0);
IkReal x745=((1.0)*cj1);
IkReal x746=((1.0)*sj1);
IkReal x747=(py*sj1);
IkReal x748=(cj0*r00);
IkReal x749=((2.0)*pz);
IkReal x750=(cj0*sj1);
IkReal x751=(px*r02);
IkReal x752=(cj1*r02);
IkReal x753=(pz*r01);
IkReal x754=(py*sj0);
IkReal x755=(px*r00);
IkReal x756=((2.0)*cj1);
IkReal x757=(cj0*py);
IkReal x758=((0.2223)*sj3);
IkReal x759=((0.0617994)*cj4);
IkReal x760=((0.06873829)*cj4);
IkReal x761=((0.0361)*cj1);
IkReal x762=((0.38)*r02);
IkReal x763=((0.38)*pz);
IkReal x764=(r02*sj1);
IkReal x765=(cj0*r01);
IkReal x766=(px*r01);
IkReal x767=((0.0361)*sj1);
IkReal x768=(py*r00);
IkReal x769=(cj4*sj3);
IkReal x770=((0.2223)*sj4);
IkReal x771=(py*r01);
IkReal x772=((0.139)*x740);
IkReal x773=(pz*r00*sj0);
IkReal x774=(cj3*x740);
IkReal x775=(cj3*x739);
IkReal x776=((0.03009629)*x769);
IkReal x777=(sj4*x739);
IkReal x778=(sj1*x743);
IkReal x779=(r02*x742);
IkReal x780=(r02*x741);
evalcond[0]=(((x740*x769))+((sj1*x748))+((sj1*x744))+(((-1.0)*r02*x745))+((cj4*x775)));
evalcond[1]=(((x739*x769))+(((-1.0)*x745*x748))+(((-1.0)*x744*x745))+(((-1.0)*cj4*x774))+(((-1.0)*r02*x746)));
evalcond[2]=(((px*x750))+(((-1.0)*x739*x758))+(((-1.0)*pz*x745))+((sj0*x747))+x772+(((0.2223)*x774)));
evalcond[3]=((0.19)+(((-1.0)*x745*x754))+(((0.139)*x739))+(((-1.0)*pz*x746))+((x740*x758))+(((0.2223)*x775))+(((-1.0)*cj0*px*x745)));
evalcond[4]=(((sj4*x772))+((x752*x757))+((x770*x774))+(((-1.0)*sj0*x745*x751))+((sj1*x766))+((cj1*x773))+(((-1.0)*x746*x768))+(((-1.0)*x758*x777))+(((-1.0)*cj0*x745*x753)));
evalcond[5]=((((-0.139)*x777))+((cj1*x766))+(((-0.19)*x765))+(((-1.0)*x746*x773))+(((-1.0)*sj4*x740*x758))+(((-1.0)*x745*x768))+((sj0*sj1*x751))+(((0.19)*r00*sj0))+(((-1.0)*r02*x746*x757))+((x750*x753))+(((-1.0)*x770*x775)));
evalcond[6]=(((x756*x757*x766))+(((0.0361)*x764))+(((-1.0)*x742*x745*x748))+((x739*x776))+((sj1*x749*x755))+(((-1.0)*x743*x745*x748))+(((-1.0)*x746*x779))+((cj1*x741*x748))+((x743*x764))+(((-1.0)*x746*x780))+((cj0*cj1*x749*x751))+(((-0.38)*x771))+(((-1.0)*x743*x744*x745))+((x754*x755*x756))+((r01*x747*x749))+(((-0.38)*x755))+((x749*x752*x754))+((cj1*x742*x744))+(((-1.0)*x741*x744*x745))+((x744*x761))+((x748*x761))+(((-1.0)*x740*x759))+(((-1.0)*x760*x774))+(((-1.0)*pz*x762)));
evalcond[7]=((((-2.0)*px*x747*x765))+(((-2.0)*sj0*x747*x755))+((x748*x778))+((x739*x759))+(((0.38)*cj0*x751))+((x744*x778))+((sj1*x741*x744))+(((-1.0)*x745*x779))+(((-0.0361)*x752))+(((-1.0)*x749*x750*x751))+((x743*x752))+((x740*x776))+(((-1.0)*x744*x763))+(((-1.0)*x742*x744*x746))+(((-1.0)*x741*x746*x748))+(((-1.0)*r02*sj0*x747*x749))+(((-1.0)*x745*x780))+((cj1*x749*x771))+((x744*x767))+((x760*x775))+((x748*x767))+(((-1.0)*x748*x763))+((cj1*x749*x755))+((x754*x762))+((sj1*x742*x748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x781=((1000.0)*r02);
IkReal x782=((1000.0)*r00);
IkReal x783=((1000.0)*r01);
IkReal x784=((190.0)*sj1);
IkReal x785=(cj0*r00);
IkReal x786=((190.0)*cj1);
IkReal x787=((190.0)*r01*sj0);
CheckValue<IkReal> x788=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x788.valid){
continue;
}
CheckValue<IkReal> x789 = IKatan2WithCheck(IkReal((((px*x782))+((pz*x781))+((py*x783))+(((-1.0)*r01*sj0*x786))+(((-1.0)*x785*x786))+(((-1.0)*r02*x784)))),IkReal((((r01*sj0*x784))+(((-222.3)*cj4))+(((-1.0)*cj0*pz*x782))+((x784*x785))+(((-1.0)*pz*sj0*x783))+((py*sj0*x781))+(((-1.0)*r02*x786))+((cj0*px*x781)))),IKFAST_ATAN2_MAGTHRESH);
if(!x789.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x788.value)))+(x789.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x790=IKcos(j3);
IkReal x791=px*px;
IkReal x792=pz*pz;
IkReal x793=py*py;
IkReal x794=(r01*sj0);
IkReal x795=((2.0)*py);
IkReal x796=(r00*sj0);
IkReal x797=((0.19)*cj1);
IkReal x798=(r02*sj0);
IkReal x799=((0.38)*sj1);
IkReal x800=((1.0)*pz);
IkReal x801=(cj0*r01);
IkReal x802=(cj0*r02);
IkReal x803=((0.38)*cj1);
IkReal x804=((0.19)*sj1);
IkReal x805=((0.139)*cj4);
IkReal x806=(cj0*r00);
IkReal x807=((0.0617994)*x790);
IkReal x808=((1.0)*x792);
IkReal x809=((1.0)*x793);
evalcond[0]=((((-1.0)*px*r00))+(((-1.0)*r02*x800))+((x797*x806))+((x805*(IKsin(j3))))+((r02*x804))+(((-1.0)*py*r01))+((x794*x797)));
evalcond[1]=((0.03263829)+((py*sj0*x803))+((pz*x799))+((cj0*px*x803))+(((-1.0)*x791))+x807+(((-1.0)*x808))+(((-1.0)*x809)));
evalcond[2]=(((x804*x806))+(((-1.0)*x790*x805))+(((-1.0)*x800*x806))+((x794*x804))+((py*x798))+(((-0.2223)*cj4))+((px*x802))+(((-1.0)*x794*x800))+(((-1.0)*r02*x797)));
evalcond[3]=((((-1.0)*sj4*x807))+((py*x799*x802))+(((-1.0)*x796*x809))+(((-1.0)*x796*x808))+(((-0.06873829)*sj4))+(((-1.0)*px*x795*x806))+(((-1.0)*px*x798*x799))+((x791*x801))+(((2.0)*px*pz*x798))+((px*x794*x795))+((py*r00*x803))+(((-1.0)*px*r01*x803))+(((-1.0)*pz*x799*x801))+((x792*x801))+(((-1.0)*pz*x795*x802))+(((-1.0)*x801*x809))+((pz*x796*x799))+((x791*x796))+(((0.0361)*x801))+(((-0.0361)*x796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x810=(cj3*cj4);
j2eval[0]=((((1.59928057553957)*cj4))+x810);
j2eval[1]=IKsign(((((1390.0)*x810))+(((2223.0)*cj4))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.11228086356825)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-6873829.0)+(((-6179940.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x811=((22230000.0)*sj3);
IkReal x812=(pz*sj1);
IkReal x813=(cj0*px);
IkReal x814=((13900000.0)*sj1);
IkReal x815=(cj1*pz);
IkReal x816=((22230000.0)*cj3);
IkReal x817=(py*sj0);
IkReal x818=((13900000.0)*cj1);
IkReal x819=(sj1*x817);
CheckValue<IkReal> x820 = IKatan2WithCheck(IkReal((((sj1*x813*x816))+((x816*x819))+(((4223700.0)*sj3))+(((-1.0)*x811*x812))+((x813*x814))+(((-1.0)*x815*x816))+((x814*x817))+(((-13900000.0)*x815))+(((-1.0)*cj1*x811*x817))+(((-1.0)*cj1*x811*x813)))),IkReal(((2641000.0)+(((-1.0)*x812*x816))+(((-1.0)*sj1*x811*x813))+(((-1.0)*cj1*x813*x816))+(((4223700.0)*cj3))+(((-1.0)*x817*x818))+(((-1.0)*x811*x819))+((x811*x815))+(((-1.0)*x813*x818))+(((-13900000.0)*x812))+(((-1.0)*cj1*x816*x817)))),IKFAST_ATAN2_MAGTHRESH);
if(!x820.valid){
continue;
}
CheckValue<IkReal> x821=IKPowWithIntegerCheck(IKsign(((-6873829.0)+(((-6179940.0)*cj3)))),-1);
if(!x821.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x820.value)+(((1.5707963267949)*(x821.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x822=IKsin(j2);
IkReal x823=IKcos(j2);
IkReal x824=(px*sj1);
IkReal x825=(py*sj1);
IkReal x826=((1.0)*r00);
IkReal x827=(cj1*sj0);
IkReal x828=((1.0)*px);
IkReal x829=((0.2223)*sj3);
IkReal x830=((1.0)*pz);
IkReal x831=(cj0*r01);
IkReal x832=(pz*sj1);
IkReal x833=(cj0*cj1);
IkReal x834=((0.2223)*cj3);
IkReal x835=((0.139)*x822);
IkReal x836=((0.139)*x823);
IkReal x837=(x822*x834);
IkReal x838=(x823*x829);
IkReal x839=(x822*x829);
IkReal x840=(x823*x834);
IkReal x841=(x835+x837);
IkReal x842=(x836+x839+x840);
evalcond[0]=(((sj0*x825))+((cj0*x824))+(((-1.0)*x838))+x841+(((-1.0)*cj1*x830)));
evalcond[1]=((0.19)+(((-1.0)*sj1*x830))+(((-1.0)*x828*x833))+x842+(((-1.0)*py*x827)));
evalcond[2]=(((pz*r00*x827))+(((-1.0)*cj1*x830*x831))+(((-1.0)*r02*x827*x828))+((r01*x824))+(((-1.0)*x838))+x841+(((-1.0)*x825*x826))+((py*r02*x833)));
evalcond[3]=(((x831*x832))+(((-1.0)*cj1*py*x826))+((r02*sj0*x824))+(((-1.0)*cj0*r02*x825))+(((-1.0)*sj0*x826*x832))+(((-1.0)*x842))+(((0.19)*r00*sj0))+(((-0.19)*x831))+((cj1*px*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.11228086356825)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-6873829.0)+(((-6179940.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x843=((22230000.0)*sj3);
IkReal x844=(pz*sj1);
IkReal x845=(cj0*px);
IkReal x846=((13900000.0)*sj1);
IkReal x847=(cj1*pz);
IkReal x848=((22230000.0)*cj3);
IkReal x849=(py*sj0);
IkReal x850=((13900000.0)*cj1);
IkReal x851=(sj1*x849);
CheckValue<IkReal> x852 = IKatan2WithCheck(IkReal((((x848*x851))+(((-1.0)*x847*x848))+((sj1*x845*x848))+((x846*x849))+(((-13900000.0)*x847))+(((4223700.0)*sj3))+(((-1.0)*x843*x844))+(((-1.0)*cj1*x843*x845))+(((-1.0)*cj1*x843*x849))+((x845*x846)))),IkReal(((2641000.0)+(((-1.0)*cj1*x845*x848))+(((-1.0)*x845*x850))+(((4223700.0)*cj3))+(((-1.0)*sj1*x843*x845))+(((-1.0)*x849*x850))+(((-13900000.0)*x844))+((x843*x847))+(((-1.0)*cj1*x848*x849))+(((-1.0)*x844*x848))+(((-1.0)*x843*x851)))),IKFAST_ATAN2_MAGTHRESH);
if(!x852.valid){
continue;
}
CheckValue<IkReal> x853=IKPowWithIntegerCheck(IKsign(((-6873829.0)+(((-6179940.0)*cj3)))),-1);
if(!x853.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x852.value)+(((1.5707963267949)*(x853.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x854=IKsin(j2);
IkReal x855=IKcos(j2);
IkReal x856=(px*sj1);
IkReal x857=(py*sj1);
IkReal x858=((1.0)*r00);
IkReal x859=(cj1*sj0);
IkReal x860=((1.0)*px);
IkReal x861=((0.2223)*sj3);
IkReal x862=((1.0)*pz);
IkReal x863=(cj0*r01);
IkReal x864=(pz*sj1);
IkReal x865=(cj0*cj1);
IkReal x866=((0.2223)*cj3);
IkReal x867=((0.139)*x854);
IkReal x868=((0.139)*x855);
IkReal x869=(x855*x861);
IkReal x870=(x854*x866);
IkReal x871=(x854*x861);
IkReal x872=(x855*x866);
IkReal x873=(x867+x870);
IkReal x874=(x868+x871+x872);
evalcond[0]=((((-1.0)*x869))+((sj0*x857))+(((-1.0)*cj1*x862))+x873+((cj0*x856)));
evalcond[1]=((0.19)+(((-1.0)*py*x859))+(((-1.0)*x860*x865))+(((-1.0)*sj1*x862))+x874);
evalcond[2]=(((pz*r00*x859))+(((-1.0)*r02*x859*x860))+((py*r02*x865))+(((-1.0)*cj1*x862*x863))+x869+(((-1.0)*x857*x858))+((r01*x856))+(((-1.0)*x873)));
evalcond[3]=((((-1.0)*cj1*py*x858))+(((-0.19)*x863))+((x863*x864))+(((-1.0)*sj0*x858*x864))+((r02*sj0*x856))+(((0.19)*r00*sj0))+x874+((cj1*px*r01))+(((-1.0)*cj0*r02*x857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x875=((2.76778300581234)*pz);
IkReal x876=((2.76778300581234)*py*sj0);
IkReal x877=((2.76778300581234)*cj0*px);
if( IKabs(((((-1.0)*sj1*x876))+(((-1.0)*sj1*x877))+((cj1*x875)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.525878771104345)+((sj1*x875))+((cj1*x876))+((cj1*x877)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x876))+(((-1.0)*sj1*x877))+((cj1*x875))))+IKsqr(((-0.525878771104345)+((sj1*x875))+((cj1*x876))+((cj1*x877))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj1*x876))+(((-1.0)*sj1*x877))+((cj1*x875))), ((-0.525878771104345)+((sj1*x875))+((cj1*x876))+((cj1*x877))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x878=IKsin(j2);
IkReal x879=IKcos(j2);
IkReal x880=px*px;
IkReal x881=py*py;
IkReal x882=pz*pz;
IkReal x883=(px*sj1);
IkReal x884=(cj0*r00);
IkReal x885=(cj1*sj0);
IkReal x886=((1.0)*r01);
IkReal x887=(sj0*sj1);
IkReal x888=((1.0)*sj1);
IkReal x889=(py*r00);
IkReal x890=((1.0)*cj1);
IkReal x891=((2.0)*pz);
IkReal x892=(cj0*r02);
IkReal x893=((0.38)*pz);
IkReal x894=(r01*sj0);
IkReal x895=(r01*sj1);
IkReal x896=(pz*r00);
IkReal x897=((0.38)*px);
IkReal x898=(r02*sj0);
IkReal x899=((0.0361)*cj1);
IkReal x900=((0.0361)*r01);
IkReal x901=((0.38)*py);
IkReal x902=(cj0*pz);
IkReal x903=((0.0361)*sj1);
IkReal x904=(py*r01);
IkReal x905=((2.0)*cj0);
IkReal x906=(cj1*px);
IkReal x907=(sj1*x882);
IkReal x908=((0.3613)*x879);
IkReal x909=(r02*x881);
IkReal x910=(r02*x880);
IkReal x911=(cj4*x878);
IkReal x912=((0.3613)*x878);
IkReal x913=(cj4*x879);
IkReal x914=(py*r02*x891);
evalcond[0]=(((sj1*x884))+((r01*x887))+(((-1.0)*r02*x890))+x913);
evalcond[1]=(((cj0*x883))+((py*x887))+(((-1.0)*pz*x890))+x912);
evalcond[2]=((((-1.0)*x884*x890))+(((-1.0)*x911))+(((-1.0)*r02*x888))+(((-1.0)*x885*x886)));
evalcond[3]=((0.19)+(((-1.0)*pz*x888))+(((-1.0)*cj0*px*x890))+(((-1.0)*py*x885))+x908);
evalcond[4]=((((-1.0)*px*r02*x885))+(((-1.0)*cj1*x886*x902))+((r01*x883))+((cj1*py*x892))+(((-1.0)*x888*x889))+((x885*x896))+((sj4*x912)));
evalcond[5]=(((x895*x902))+(((-1.0)*x887*x896))+((r01*x906))+(((-1.0)*py*x888*x892))+((x883*x898))+(((-0.19)*cj0*r01))+(((-1.0)*x889*x890))+(((-1.0)*sj4*x908))+(((0.19)*r00*sj0)));
evalcond[6]=(((x884*x899))+((py*x891*x895))+((x885*x914))+(((-1.0)*x888*x909))+((r00*x883*x891))+(((-1.0)*x888*x910))+((x885*x900))+((r02*x903))+((r02*x907))+((r01*x881*x885))+((x891*x892*x906))+((x904*x905*x906))+((cj1*x880*x884))+(((-1.0)*x880*x885*x886))+(((-1.0)*r01*x901))+(((-1.0)*x882*x885*x886))+(((-0.13053769)*x911))+(((-1.0)*x882*x884*x890))+(((2.0)*px*x885*x889))+(((-1.0)*r02*x893))+(((-1.0)*x881*x884*x890))+(((-1.0)*r00*x897)));
evalcond[7]=((((-1.0)*x890*x909))+(((-1.0)*x881*x886*x887))+((cj1*r02*x882))+(((-1.0)*x884*x893))+(((0.13053769)*x913))+((x884*x903))+((x884*x907))+((x887*x900))+(((-1.0)*x890*x910))+((r00*x891*x906))+(((-2.0)*sj0*x883*x889))+((r01*x882*x887))+(((-1.0)*x887*x914))+((sj1*x881*x884))+(((-1.0)*x883*x891*x892))+((x892*x897))+(((-1.0)*x880*x884*x888))+((r01*x880*x887))+(((-1.0)*x893*x894))+(((-1.0)*r02*x899))+((x898*x901))+(((-1.0)*x883*x904*x905))+((cj1*x891*x904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x915=((12.0048019207683)*sj1);
IkReal x916=(py*sj0);
IkReal x917=(cj0*px);
IkReal x918=((12.0048019207683)*cj1);
if( IKabs(((((-1.0)*pz*x918))+((x915*x917))+((x915*x916)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.28091236494598)+(((-1.0)*pz*x915))+(((-1.0)*x916*x918))+(((-1.0)*x917*x918)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*pz*x918))+((x915*x917))+((x915*x916))))+IKsqr(((2.28091236494598)+(((-1.0)*pz*x915))+(((-1.0)*x916*x918))+(((-1.0)*x917*x918))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*pz*x918))+((x915*x917))+((x915*x916))), ((2.28091236494598)+(((-1.0)*pz*x915))+(((-1.0)*x916*x918))+(((-1.0)*x917*x918))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x919=IKsin(j2);
IkReal x920=IKcos(j2);
IkReal x921=px*px;
IkReal x922=py*py;
IkReal x923=pz*pz;
IkReal x924=(cj0*sj1);
IkReal x925=(r01*sj0);
IkReal x926=((1.0)*cj1);
IkReal x927=(r02*sj1);
IkReal x928=(cj1*r02);
IkReal x929=((1.0)*sj1);
IkReal x930=(py*sj1);
IkReal x931=(py*r00);
IkReal x932=(px*r02);
IkReal x933=(px*r01);
IkReal x934=((0.00693889)*cj4);
IkReal x935=((2.0)*pz);
IkReal x936=((0.38)*pz);
IkReal x937=(r00*sj0);
IkReal x938=((2.0)*px);
IkReal x939=(cj0*r00);
IkReal x940=((0.0361)*cj1);
IkReal x941=(py*sj0);
IkReal x942=(pz*r01);
IkReal x943=((2.0)*py);
IkReal x944=(py*r01);
IkReal x945=(cj0*px);
IkReal x946=(px*r00);
IkReal x947=(r00*x923);
IkReal x948=(r00*x922);
IkReal x949=((1.0)*x921);
IkReal x950=((0.0833)*x920);
IkReal x951=((0.0833)*x919);
IkReal x952=(x935*x941);
evalcond[0]=(((sj0*x930))+(((-1.0)*pz*x926))+((px*x924))+(((-1.0)*x951)));
evalcond[1]=((((-1.0)*cj4*x920))+(((-1.0)*r02*x926))+((sj1*x925))+((r00*x924)));
evalcond[2]=((((-1.0)*x925*x926))+(((-1.0)*x927))+(((-1.0)*x926*x939))+((cj4*x919)));
evalcond[3]=((0.19)+(((-1.0)*x926*x945))+(((-1.0)*x926*x941))+(((-1.0)*pz*x929))+(((-1.0)*x950)));
evalcond[4]=(((cj0*py*x928))+((sj1*x933))+((cj1*pz*x937))+(((-1.0)*x929*x931))+(((-1.0)*sj4*x951))+(((-1.0)*cj0*x926*x942))+(((-1.0)*sj0*x926*x932)));
evalcond[5]=((((0.19)*x937))+((sj4*x950))+(((-1.0)*pz*x929*x937))+(((-0.19)*cj0*r01))+(((-1.0)*py*r02*x924))+(((-1.0)*x926*x931))+((cj1*x933))+((x924*x942))+((px*sj0*x927)));
evalcond[6]=(((x919*x934))+((cj1*x922*x925))+(((-1.0)*x923*x925*x926))+((sj1*x935*x946))+((cj0*cj1*x933*x943))+(((-1.0)*x927*x949))+((x928*x935*x945))+(((-1.0)*r02*x936))+((cj1*x921*x939))+((x939*x940))+(((-0.38)*x946))+(((-0.38)*x944))+(((-1.0)*x922*x926*x939))+((x925*x940))+(((0.0361)*x927))+(((-1.0)*x922*x927))+((x923*x927))+((cj1*sj0*x931*x938))+(((-1.0)*x921*x925*x926))+(((-1.0)*x923*x926*x939))+((r01*x930*x935))+((x928*x952)));
evalcond[7]=((((-1.0)*r02*x922*x926))+((sj1*x921*x925))+(((-1.0)*x925*x936))+(((-1.0)*r00*x924*x949))+(((-1.0)*x922*x925*x929))+(((0.0361)*sj1*x925))+(((0.38)*cj0*x932))+(((-1.0)*x924*x933*x943))+(((-1.0)*x924*x932*x935))+(((0.38)*r02*x941))+(((-1.0)*x920*x934))+(((-1.0)*x927*x952))+(((0.0361)*r00*x924))+((x923*x928))+(((-1.0)*x936*x939))+(((-0.0361)*x928))+((cj1*x935*x944))+((cj1*x935*x946))+((sj1*x923*x925))+((x924*x948))+((x924*x947))+(((-1.0)*r02*x921*x926))+(((-1.0)*x930*x937*x938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x965=IKPowWithIntegerCheck(cj4,-1);
if(!x965.valid){
continue;
}
IkReal x953=x965.value;
IkReal x954=(cj3*sj1);
IkReal x955=((2223.0)*r02);
IkReal x956=((10000.0)*cj4);
IkReal x957=(py*sj0);
IkReal x958=(cj1*cj3);
IkReal x959=(cj0*r00);
IkReal x960=(cj0*px);
IkReal x961=(r01*sj0);
IkReal x962=((1390.0)*cj1);
IkReal x963=((2223.0)*cj1);
IkReal x964=((-0.000719424460431655)*x953);
CheckValue<IkReal> x966=IKPowWithIntegerCheck(sj3,-1);
if(!x966.valid){
continue;
}
if( IKabs((x964*(((((-1.0)*x961*x963))+(((-1.0)*x959*x963))+(((-1.0)*sj1*x955))+((sj1*x956*x960))+((sj1*x956*x957))+(((-1.0)*cj1*pz*x956)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x964*(x966.value)*(((((-1.0)*x961*x962))+(((-1390.0)*r02*sj1))+(((-1.0)*x959*x962))+(((-1.0)*x954*x955))+(((-2223.0)*x958*x961))+((x954*x956*x957))+(((-1.0)*pz*x956*x958))+((x954*x956*x960))+(((-2223.0)*x958*x959)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x964*(((((-1.0)*x961*x963))+(((-1.0)*x959*x963))+(((-1.0)*sj1*x955))+((sj1*x956*x960))+((sj1*x956*x957))+(((-1.0)*cj1*pz*x956))))))+IKsqr((x964*(x966.value)*(((((-1.0)*x961*x962))+(((-1390.0)*r02*sj1))+(((-1.0)*x959*x962))+(((-1.0)*x954*x955))+(((-2223.0)*x958*x961))+((x954*x956*x957))+(((-1.0)*pz*x956*x958))+((x954*x956*x960))+(((-2223.0)*x958*x959))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x964*(((((-1.0)*x961*x963))+(((-1.0)*x959*x963))+(((-1.0)*sj1*x955))+((sj1*x956*x960))+((sj1*x956*x957))+(((-1.0)*cj1*pz*x956))))), (x964*(x966.value)*(((((-1.0)*x961*x962))+(((-1390.0)*r02*sj1))+(((-1.0)*x959*x962))+(((-1.0)*x954*x955))+(((-2223.0)*x958*x961))+((x954*x956*x957))+(((-1.0)*pz*x956*x958))+((x954*x956*x960))+(((-2223.0)*x958*x959))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x967=IKcos(j2);
IkReal x968=IKsin(j2);
IkReal x969=px*px;
IkReal x970=py*py;
IkReal x971=pz*pz;
IkReal x972=(r01*sj0);
IkReal x973=((1.0)*cj1);
IkReal x974=((1.0)*sj1);
IkReal x975=(py*sj1);
IkReal x976=(cj0*r00);
IkReal x977=((2.0)*pz);
IkReal x978=(cj0*sj1);
IkReal x979=(px*r02);
IkReal x980=(cj1*r02);
IkReal x981=(pz*r01);
IkReal x982=(py*sj0);
IkReal x983=(px*r00);
IkReal x984=((2.0)*cj1);
IkReal x985=(cj0*py);
IkReal x986=((0.2223)*sj3);
IkReal x987=((0.0617994)*cj4);
IkReal x988=((0.06873829)*cj4);
IkReal x989=((0.0361)*cj1);
IkReal x990=((0.38)*r02);
IkReal x991=((0.38)*pz);
IkReal x992=(r02*sj1);
IkReal x993=(cj0*r01);
IkReal x994=(px*r01);
IkReal x995=((0.0361)*sj1);
IkReal x996=(py*r00);
IkReal x997=(cj4*sj3);
IkReal x998=((0.2223)*sj4);
IkReal x999=(py*r01);
IkReal x1000=((0.139)*x968);
IkReal x1001=(pz*r00*sj0);
IkReal x1002=(cj3*x968);
IkReal x1003=(cj3*x967);
IkReal x1004=((0.03009629)*x997);
IkReal x1005=(sj4*x967);
IkReal x1006=(sj1*x971);
IkReal x1007=(r02*x970);
IkReal x1008=(r02*x969);
evalcond[0]=(((x968*x997))+((cj4*x1003))+((sj1*x976))+((sj1*x972))+(((-1.0)*r02*x973)));
evalcond[1]=((((-1.0)*x972*x973))+(((-1.0)*r02*x974))+(((-1.0)*cj4*x1002))+((x967*x997))+(((-1.0)*x973*x976)));
evalcond[2]=(x1000+(((-1.0)*pz*x973))+((sj0*x975))+(((-1.0)*x967*x986))+(((0.2223)*x1002))+((px*x978)));
evalcond[3]=((0.19)+(((-1.0)*cj0*px*x973))+(((0.139)*x967))+(((-1.0)*pz*x974))+((x968*x986))+(((0.2223)*x1003))+(((-1.0)*x973*x982)));
evalcond[4]=(((sj4*x1000))+(((-1.0)*sj0*x973*x979))+(((-1.0)*x1005*x986))+((x1002*x998))+(((-1.0)*cj0*x973*x981))+((cj1*x1001))+((x980*x985))+(((-1.0)*x974*x996))+((sj1*x994)));
evalcond[5]=(((cj1*x994))+(((-1.0)*x1003*x998))+((sj0*sj1*x979))+(((-0.19)*x993))+(((-1.0)*x1001*x974))+(((0.19)*r00*sj0))+(((-1.0)*r02*x974*x985))+(((-1.0)*sj4*x968*x986))+(((-1.0)*x973*x996))+((x978*x981))+(((-0.139)*x1005)));
evalcond[6]=(((x1004*x967))+((x972*x989))+((x984*x985*x994))+(((0.0361)*x992))+((sj1*x977*x983))+((cj0*cj1*x977*x979))+((r01*x975*x977))+(((-1.0)*x971*x973*x976))+((x976*x989))+(((-1.0)*pz*x990))+(((-1.0)*x1008*x974))+((x971*x992))+(((-1.0)*x970*x973*x976))+((x982*x983*x984))+(((-0.38)*x983))+((cj1*x969*x976))+(((-0.38)*x999))+(((-1.0)*x969*x972*x973))+(((-1.0)*x971*x972*x973))+((cj1*x970*x972))+(((-1.0)*x1007*x974))+(((-1.0)*x1002*x988))+(((-1.0)*x968*x987))+((x977*x980*x982)));
evalcond[7]=(((x1004*x968))+((x976*x995))+((x1006*x972))+((x1006*x976))+(((-1.0)*r02*sj0*x975*x977))+((sj1*x970*x976))+(((-0.0361)*x980))+((x972*x995))+(((-1.0)*x977*x978*x979))+(((-1.0)*x1008*x973))+(((-2.0)*px*x975*x993))+(((-1.0)*x970*x972*x974))+(((-1.0)*x972*x991))+((x1003*x988))+((sj1*x969*x972))+((x967*x987))+((cj1*x977*x983))+(((-2.0)*sj0*x975*x983))+((x971*x980))+(((0.38)*cj0*x979))+(((-1.0)*x969*x974*x976))+((cj1*x977*x999))+(((-1.0)*x976*x991))+(((-1.0)*x1007*x973))+((x982*x990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1009=((10000.0)*cj4);
IkReal x1010=(cj1*pz);
IkReal x1011=((2223.0)*cj3);
IkReal x1012=(cj0*sj1);
IkReal x1013=(cj1*r02);
IkReal x1014=(sj0*sj1);
IkReal x1015=((2223.0)*sj3);
CheckValue<IkReal> x1016=IKPowWithIntegerCheck(IKsign(((((2223.0)*cj4))+(((1390.0)*cj3*cj4)))),-1);
if(!x1016.valid){
continue;
}
CheckValue<IkReal> x1017 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x1012*x1015))+(((-1.0)*cj3*px*x1009*x1012))+(((-1.0)*cj3*py*x1009*x1014))+((x1013*x1015))+(((-1.0)*r01*x1014*x1015))+((cj3*x1009*x1010)))),IkReal(((((1390.0)*x1013))+((px*sj3*x1009*x1012))+(((-1.0)*r00*x1011*x1012))+(((-1.0)*sj3*x1009*x1010))+(((-1390.0)*r00*x1012))+(((-1390.0)*r01*x1014))+((py*sj3*x1009*x1014))+(((-1.0)*r01*x1011*x1014))+((x1011*x1013)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1017.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1016.value)))+(x1017.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1018=IKcos(j2);
IkReal x1019=IKsin(j2);
IkReal x1020=px*px;
IkReal x1021=py*py;
IkReal x1022=pz*pz;
IkReal x1023=(r01*sj0);
IkReal x1024=((1.0)*cj1);
IkReal x1025=((1.0)*sj1);
IkReal x1026=(py*sj1);
IkReal x1027=(cj0*r00);
IkReal x1028=((2.0)*pz);
IkReal x1029=(cj0*sj1);
IkReal x1030=(px*r02);
IkReal x1031=(cj1*r02);
IkReal x1032=(pz*r01);
IkReal x1033=(py*sj0);
IkReal x1034=(px*r00);
IkReal x1035=((2.0)*cj1);
IkReal x1036=(cj0*py);
IkReal x1037=((0.2223)*sj3);
IkReal x1038=((0.0617994)*cj4);
IkReal x1039=((0.06873829)*cj4);
IkReal x1040=((0.0361)*cj1);
IkReal x1041=((0.38)*r02);
IkReal x1042=((0.38)*pz);
IkReal x1043=(r02*sj1);
IkReal x1044=(cj0*r01);
IkReal x1045=(px*r01);
IkReal x1046=((0.0361)*sj1);
IkReal x1047=(py*r00);
IkReal x1048=(cj4*sj3);
IkReal x1049=((0.2223)*sj4);
IkReal x1050=(py*r01);
IkReal x1051=((0.139)*x1019);
IkReal x1052=(pz*r00*sj0);
IkReal x1053=(cj3*x1019);
IkReal x1054=(cj3*x1018);
IkReal x1055=((0.03009629)*x1048);
IkReal x1056=(sj4*x1018);
IkReal x1057=(sj1*x1022);
IkReal x1058=(r02*x1021);
IkReal x1059=(r02*x1020);
evalcond[0]=(((sj1*x1023))+((sj1*x1027))+((x1019*x1048))+(((-1.0)*r02*x1024))+((cj4*x1054)));
evalcond[1]=((((-1.0)*x1023*x1024))+((x1018*x1048))+(((-1.0)*cj4*x1053))+(((-1.0)*r02*x1025))+(((-1.0)*x1024*x1027)));
evalcond[2]=(((sj0*x1026))+(((-1.0)*pz*x1024))+x1051+(((0.2223)*x1053))+((px*x1029))+(((-1.0)*x1018*x1037)));
evalcond[3]=((0.19)+(((-1.0)*x1024*x1033))+(((-1.0)*cj0*px*x1024))+(((-1.0)*pz*x1025))+(((0.2223)*x1054))+((x1019*x1037))+(((0.139)*x1018)));
evalcond[4]=(((x1031*x1036))+(((-1.0)*x1025*x1047))+(((-1.0)*cj0*x1024*x1032))+((cj1*x1052))+((sj1*x1045))+(((-1.0)*x1037*x1056))+((x1049*x1053))+((sj4*x1051))+(((-1.0)*sj0*x1024*x1030)));
evalcond[5]=(((sj0*sj1*x1030))+(((-0.139)*x1056))+(((-1.0)*x1025*x1052))+(((-1.0)*x1024*x1047))+(((-0.19)*x1044))+((cj1*x1045))+(((-1.0)*sj4*x1019*x1037))+((x1029*x1032))+(((0.19)*r00*sj0))+(((-1.0)*r02*x1025*x1036))+(((-1.0)*x1049*x1054)));
evalcond[6]=((((-1.0)*x1020*x1023*x1024))+((x1035*x1036*x1045))+((x1022*x1043))+((x1018*x1055))+((x1023*x1040))+((x1027*x1040))+(((-1.0)*x1039*x1053))+(((-1.0)*x1025*x1058))+(((-1.0)*x1025*x1059))+(((-0.38)*x1050))+((x1033*x1034*x1035))+((cj1*x1020*x1027))+(((0.0361)*x1043))+(((-1.0)*pz*x1041))+((cj1*x1021*x1023))+((x1028*x1031*x1033))+((r01*x1026*x1028))+((sj1*x1028*x1034))+(((-1.0)*x1019*x1038))+(((-1.0)*x1022*x1024*x1027))+(((-1.0)*x1021*x1024*x1027))+((cj0*cj1*x1028*x1030))+(((-0.38)*x1034))+(((-1.0)*x1022*x1023*x1024)));
evalcond[7]=(((x1023*x1057))+(((-1.0)*x1028*x1029*x1030))+((x1023*x1046))+((x1019*x1055))+((x1039*x1054))+((cj1*x1028*x1034))+((x1027*x1046))+((x1027*x1057))+((sj1*x1020*x1023))+((cj1*x1028*x1050))+(((-1.0)*x1027*x1042))+((sj1*x1021*x1027))+(((-1.0)*x1024*x1059))+(((-1.0)*x1024*x1058))+(((-1.0)*x1023*x1042))+(((-1.0)*x1021*x1023*x1025))+((x1022*x1031))+(((0.38)*cj0*x1030))+(((-0.0361)*x1031))+((x1018*x1038))+(((-2.0)*sj0*x1026*x1034))+(((-2.0)*px*x1026*x1044))+(((-1.0)*r02*sj0*x1026*x1028))+((x1033*x1041))+(((-1.0)*x1020*x1025*x1027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1060=(cj0*r00);
IkReal x1061=(cj1*sj3);
IkReal x1062=(sj1*sj3);
IkReal x1063=(cj1*cj3);
IkReal x1064=(r01*sj0);
IkReal x1065=((1.0)*cj3*sj1);
IkReal x1066=((1.0)*cj3*x1064);
CheckValue<IkReal> x1067=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1067.valid){
continue;
}
CheckValue<IkReal> x1068 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1065))+(((-1.0)*x1060*x1062))+(((-1.0)*x1060*x1063))+(((-1.0)*x1062*x1064))+((r02*x1061))+(((-1.0)*x1063*x1064)))),IkReal(((((-1.0)*x1060*x1065))+((x1061*x1064))+((x1060*x1061))+(((-1.0)*x1064*x1065))+((r02*x1063))+((r02*x1062)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1068.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1067.value)))+(x1068.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1069=IKcos(j2);
IkReal x1070=IKsin(j2);
IkReal x1071=px*px;
IkReal x1072=py*py;
IkReal x1073=pz*pz;
IkReal x1074=(r01*sj0);
IkReal x1075=((1.0)*cj1);
IkReal x1076=((1.0)*sj1);
IkReal x1077=(py*sj1);
IkReal x1078=(cj0*r00);
IkReal x1079=((2.0)*pz);
IkReal x1080=(cj0*sj1);
IkReal x1081=(px*r02);
IkReal x1082=(cj1*r02);
IkReal x1083=(pz*r01);
IkReal x1084=(py*sj0);
IkReal x1085=(px*r00);
IkReal x1086=((2.0)*cj1);
IkReal x1087=(cj0*py);
IkReal x1088=((0.2223)*sj3);
IkReal x1089=((0.0617994)*cj4);
IkReal x1090=((0.06873829)*cj4);
IkReal x1091=((0.0361)*cj1);
IkReal x1092=((0.38)*r02);
IkReal x1093=((0.38)*pz);
IkReal x1094=(r02*sj1);
IkReal x1095=(cj0*r01);
IkReal x1096=(px*r01);
IkReal x1097=((0.0361)*sj1);
IkReal x1098=(py*r00);
IkReal x1099=(cj4*sj3);
IkReal x1100=((0.2223)*sj4);
IkReal x1101=(py*r01);
IkReal x1102=((0.139)*x1070);
IkReal x1103=(pz*r00*sj0);
IkReal x1104=(cj3*x1070);
IkReal x1105=(cj3*x1069);
IkReal x1106=((0.03009629)*x1099);
IkReal x1107=(sj4*x1069);
IkReal x1108=(sj1*x1073);
IkReal x1109=(r02*x1072);
IkReal x1110=(r02*x1071);
evalcond[0]=((((-1.0)*r02*x1075))+((cj4*x1105))+((sj1*x1074))+((sj1*x1078))+((x1070*x1099)));
evalcond[1]=((((-1.0)*x1075*x1078))+(((-1.0)*cj4*x1104))+(((-1.0)*x1074*x1075))+(((-1.0)*r02*x1076))+((x1069*x1099)));
evalcond[2]=((((0.2223)*x1104))+x1102+((px*x1080))+(((-1.0)*pz*x1075))+(((-1.0)*x1069*x1088))+((sj0*x1077)));
evalcond[3]=((0.19)+(((0.2223)*x1105))+(((-1.0)*pz*x1076))+(((0.139)*x1069))+((x1070*x1088))+(((-1.0)*cj0*px*x1075))+(((-1.0)*x1075*x1084)));
evalcond[4]=(((x1082*x1087))+(((-1.0)*x1088*x1107))+((sj1*x1096))+(((-1.0)*sj0*x1075*x1081))+(((-1.0)*cj0*x1075*x1083))+((cj1*x1103))+((sj4*x1102))+((x1100*x1104))+(((-1.0)*x1076*x1098)));
evalcond[5]=(((sj0*sj1*x1081))+(((-1.0)*sj4*x1070*x1088))+((cj1*x1096))+(((-1.0)*r02*x1076*x1087))+(((-1.0)*x1100*x1105))+(((-1.0)*x1075*x1098))+((x1080*x1083))+(((0.19)*r00*sj0))+(((-0.139)*x1107))+(((-1.0)*x1076*x1103))+(((-0.19)*x1095)));
evalcond[6]=((((-1.0)*x1090*x1104))+(((-1.0)*x1073*x1074*x1075))+(((0.0361)*x1094))+((x1073*x1094))+(((-1.0)*pz*x1092))+(((-1.0)*x1073*x1075*x1078))+(((-1.0)*x1072*x1075*x1078))+((r01*x1077*x1079))+((sj1*x1079*x1085))+((cj0*cj1*x1079*x1081))+((x1079*x1082*x1084))+(((-1.0)*x1071*x1074*x1075))+((x1074*x1091))+(((-0.38)*x1085))+((x1086*x1087*x1096))+(((-0.38)*x1101))+((cj1*x1072*x1074))+((x1078*x1091))+((x1069*x1106))+(((-1.0)*x1076*x1110))+((cj1*x1071*x1078))+(((-1.0)*x1070*x1089))+(((-1.0)*x1076*x1109))+((x1084*x1085*x1086)));
evalcond[7]=((((-0.0361)*x1082))+((x1073*x1082))+(((-1.0)*x1071*x1076*x1078))+(((-1.0)*x1072*x1074*x1076))+((x1074*x1108))+(((-1.0)*x1075*x1110))+((x1084*x1092))+(((-1.0)*x1075*x1109))+((cj1*x1079*x1085))+((x1090*x1105))+(((-1.0)*r02*sj0*x1077*x1079))+(((0.38)*cj0*x1081))+((x1069*x1089))+(((-1.0)*x1079*x1080*x1081))+((sj1*x1071*x1074))+((sj1*x1072*x1078))+((x1078*x1108))+(((-2.0)*sj0*x1077*x1085))+((x1074*x1097))+((cj1*x1079*x1101))+(((-2.0)*px*x1077*x1095))+((x1078*x1097))+(((-1.0)*x1074*x1093))+((x1070*x1106))+(((-1.0)*x1078*x1093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - tobi (112e3688659eddc12d744d3ffdd6e81a)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
