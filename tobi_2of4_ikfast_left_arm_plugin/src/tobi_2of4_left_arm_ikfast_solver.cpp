/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-05-30 02:00:49.473654
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[0]);
x6=IKsin(j[3]);
x7=IKcos(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((0.139)*x0);
x11=((0.2573)*x5);
x12=((1.0)*x7);
x13=((0.2573)*x0);
x14=((0.139)*x5);
x15=((1.0)*x6);
x16=((1.0)*x5);
x17=((1.0)*x0);
x18=((0.19)*x1);
x19=(x1*x2);
x20=(x1*x4);
x21=(x2*x3);
x22=(x3*x4);
IkReal x23=((1.0)*x22);
eetrans[0]=(((x0*x18))+((x6*((((x13*x21))+((x13*x20))))))+(((-1.0)*x10*x23))+((x10*x19))+((x7*(((((-1.0)*x13*x23))+((x13*x19)))))));
IkReal x24=((1.0)*x22);
eetrans[1]=(((x18*x5))+((x6*((((x11*x20))+((x11*x21))))))+((x7*((((x11*x19))+(((-1.0)*x11*x24))))))+((x14*x19))+(((-1.0)*x14*x24)));
eetrans[2]=((0.2015)+((x6*(((((0.2573)*x22))+(((-0.2573)*x19))))))+((x7*(((((0.2573)*x21))+(((0.2573)*x20))))))+(((0.19)*x3))+(((0.139)*x21))+(((0.139)*x20)));
eerot[0]=((((-1.0)*x16*x9))+(((-1.0)*x8*((((x12*((((x0*x20))+((x0*x21))))))+((x15*(((((-1.0)*x17*x19))+((x17*x22)))))))))));
eerot[1]=(((x0*x9))+(((-1.0)*x8*((((x12*((((x21*x5))+((x20*x5))))))+((x15*(((((-1.0)*x16*x19))+((x16*x22)))))))))));
eerot[2]=((-1.0)*x8*((((x12*(((((-1.0)*x19))+x22))))+((x15*(((((-1.0)*x21))+(((-1.0)*x20)))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.2015)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x26 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x26.valid){
continue;
}
IkReal x25=x26.value;
j0array[0]=((-1.0)*x25);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x25)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
op[0]=((((-9.88550282984996e-5)*(py*py)*(pz*pz)*(r01*r01)))+(((-4.88583958658325e-6)*cj0*py*pz*r00*r02*sj0))+(((-3.75649107534298e-5)*py*sj0*(px*px)*(r00*r00)))+(((-4.88583958658325e-6)*px*pz*r00*r02*(cj0*cj0)))+(((5.32941791536314e-7)*(px*px)*(r02*r02)))+(((3.75649107534298e-5)*cj0*pz*r00*r02*(py*py)))+(((-8.2032166262243e-6)*cj0*px*py*sj0*(r01*r01)))+(((-1.87824553767149e-5)*cj0*px*(pz*pz)*(r00*r00)))+(((-2.48692068043343e-6)*cj0*pz*r00*r02))+(((-9.88550282984996e-5)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-1.70180425252542e-7)*(r01*r01)*(sj0*sj0)))+(((-1.87824553767149e-5)*cj0*(px*px*px)*(r02*r02)))+(((4.94275141492498e-5)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-4.94275141492498e-5)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-1.55861115898262e-6)*cj0*px*(r00*r00)))+(((-1.70180425252542e-7)*(cj0*cj0)*(r00*r00)))+(((-3.75649107534298e-5)*cj0*px*py*pz*r01*r02))+(((-2.47137570746249e-5)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((4.94275141492498e-5)*(px*px)*(pz*pz)*(r02*r02)))+(((9.88550282984996e-5)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((9.88550282984996e-5)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((4.94275141492498e-5)*cj0*r00*r01*sj0*(py*py*py*py)))+(((-9.88550282984996e-5)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((1.87824553767149e-5)*py*sj0*(px*px)*(r01*r01)))+(((9.88550282984996e-5)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-9.88550282984996e-5)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((-0.000197710056596999)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-2.47137570746249e-5)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((9.88550282984996e-5)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((2.44291979329162e-6)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-9.88550282984996e-5)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((9.28309521450817e-7)*py*sj0*(r02*r02)))+(((-1.55861115898262e-6)*cj0*py*r00*r01))+(((-2.47137570746249e-5)*(py*py*py*py)*(r02*r02)))+(((3.75649107534298e-5)*pz*r01*r02*sj0*(px*px)))+(((1.87824553767149e-5)*r00*r01*sj0*(px*px*px)))+(((5.32941791536314e-7)*(py*py)*(r02*r02)))+(((-3.75649107534298e-5)*px*py*pz*r00*r02*sj0))+(((-9.88550282984996e-5)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-2.47137570746249e-5)*(pz*pz*pz*pz)*(r02*r02)))+(((-9.88550282984996e-5)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((9.88550282984996e-5)*px*pz*r00*r02*(py*py)))+(((-1.87824553767149e-5)*sj0*(py*py*py)*(r02*r02)))+(((-1.87824553767149e-5)*cj0*px*(pz*pz)*(r02*r02)))+(((-4.94275141492498e-5)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((-2.47137570746249e-5)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((-9.88550282984996e-5)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((2.44291979329162e-6)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.000197710056596999)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((-7.13733304315167e-6)*px*py*r00*r01))+(((-4.10160831311215e-6)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-8.2032166262243e-6)*py*pz*r01*r02))+(((-1.87824553767149e-5)*py*sj0*(pz*pz)*(r01*r01)))+(((9.88550282984996e-5)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((-8.2032166262243e-6)*px*pz*r00*r02))+(((4.94275141492498e-5)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-1.55861115898262e-6)*px*r00*r01*sj0))+(((9.88550282984996e-5)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((9.88550282984996e-5)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((9.88550282984996e-5)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((-3.40360850505083e-7)*cj0*r00*r01*sj0))+(((-9.88550282984996e-5)*py*r01*r02*(pz*pz*pz)))+(((-2.47137570746249e-5)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((-9.88550282984996e-5)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((9.88550282984996e-5)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((-9.88550282984996e-5)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-4.88583958658325e-6)*cj0*px*pz*r01*r02*sj0))+(((9.88550282984996e-5)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-8.2032166262243e-6)*cj0*px*py*sj0*(r00*r00)))+(((-0.000197710056596999)*px*py*r00*r01*(pz*pz)))+(((-2.47137570746249e-5)*(px*px*px*px)*(r02*r02)))+(((-3.75649107534298e-5)*cj0*px*(py*py)*(r01*r01)))+(((-1.55861115898262e-6)*py*sj0*(r01*r01)))+(((-4.94275141492498e-5)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((-8.2032166262243e-6)*px*py*r00*r01*(cj0*cj0)))+(((-1.87824553767149e-5)*py*sj0*(pz*pz)*(r02*r02)))+(((9.88550282984996e-5)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((-5.63473661301448e-5)*cj0*py*r00*r01*(px*px)))+(((-0.000197710056596999)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((-0.000296565084895499)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((9.88550282984996e-5)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((6.60770393886347e-8)*(r02*r02)))+(((-8.2032166262243e-6)*px*py*r00*r01*(sj0*sj0)))+(((-1.87824553767149e-5)*cj0*px*(py*py)*(r02*r02)))+(((9.88550282984996e-5)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((9.88550282984996e-5)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((-5.63473661301448e-5)*px*r00*r01*sj0*(py*py)))+(((-3.31737703964105e-6)*cj0*px*py*sj0*(r02*r02)))+(((-9.88550282984996e-5)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((4.94275141492498e-5)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-1.87824553767149e-5)*sj0*(py*py*py)*(r01*r01)))+(((4.10160831311215e-6)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-1.87824553767149e-5)*py*sj0*(px*px)*(r02*r02)))+(((4.94275141492498e-5)*(py*py)*(pz*pz)*(r02*r02)))+(((-2.47137570746249e-5)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((-1.87824553767149e-5)*px*r00*r01*sj0*(pz*pz)))+(((-4.88583958658325e-6)*py*pz*r01*r02*(sj0*sj0)))+(((4.88583958658325e-6)*cj0*r00*r01*sj0*(pz*pz)))+(((-3.56866652157583e-6)*(px*px)*(r00*r00)))+(((9.88550282984996e-5)*pz*r01*r02*(py*py*py)))+(((1.87824553767149e-5)*cj0*r00*r01*(py*py*py)))+(((9.88550282984996e-5)*py*pz*r01*r02*(px*px)))+(((1.87824553767149e-5)*cj0*px*(py*py)*(r00*r00)))+(((-4.10160831311215e-6)*(py*py)*(r01*r01)*(sj0*sj0)))+(((9.28309521450817e-7)*cj0*px*(r02*r02)))+(((4.94275141492498e-5)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((-0.000296565084895499)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-4.94275141492498e-5)*(px*px)*(py*py)*(r02*r02)))+(((-9.88550282984996e-5)*(px*px)*(pz*pz)*(r00*r00)))+(((9.88550282984996e-5)*pz*r00*r02*(px*px*px)))+(((9.88550282984996e-5)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((-1.87824553767149e-5)*cj0*(px*px*px)*(r00*r00)))+(((-3.56866652157583e-6)*(py*py)*(r01*r01)))+(((4.10160831311215e-6)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-2.48692068043343e-6)*pz*r01*r02*sj0))+(((-0.000296565084895499)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-1.65868851982052e-6)*(cj0*cj0)*(px*px)*(r02*r02)))+(((-1.65868851982052e-6)*(py*py)*(r02*r02)*(sj0*sj0)))+(((9.88550282984996e-5)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-9.88550282984996e-5)*px*r00*r02*(pz*pz*pz)))+(((-1.87824553767149e-5)*cj0*py*r00*r01*(pz*pz)))+(((-4.10160831311215e-6)*(pz*pz)*(r02*r02)))+(((-2.47137570746249e-5)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((4.94275141492498e-5)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0))));
op[1]=((((7.51298215068597e-5)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((3.75649107534298e-5)*(pz*pz*pz)*(r02*r02)))+(((3.11722231796523e-6)*pz*(r02*r02)))+(((7.51298215068597e-5)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((3.75649107534298e-5)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((1.42746660863033e-5)*cj0*px*pz*(r02*r02)))+(((1.42746660863033e-5)*py*pz*sj0*(r02*r02)))+(((0.00011269473226029)*cj0*px*r01*r02*sj0*(py*py)))+(((7.51298215068597e-5)*pz*(py*py)*(r01*r01)))+(((-3.75649107534298e-5)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-0.00011269473226029)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-3.75649107534298e-5)*pz*(py*py)*(r02*r02)))+(((3.75649107534298e-5)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((-3.75649107534298e-5)*r00*r02*(px*px*px)))+(((-7.51298215068597e-5)*cj0*px*py*pz*sj0*(r00*r00)))+(((7.51298215068597e-5)*px*r00*r02*(py*py)*(sj0*sj0)))+(((-1.42746660863033e-5)*cj0*r00*r02*(py*py)))+(((9.45029858564705e-7)*cj0*r00*r02))+(((-3.75649107534298e-5)*cj0*r01*r02*sj0*(px*px*px)))+(((-3.71323808580327e-6)*cj0*pz*r00*r01*sj0))+(((-1.85661904290163e-6)*pz*(r01*r01)*(sj0*sj0)))+(((7.51298215068597e-5)*pz*(px*px)*(r00*r00)))+(((1.85661904290163e-6)*px*r00*r02*(cj0*cj0)))+(((-7.51298215068597e-5)*px*py*pz*r00*r01*(cj0*cj0)))+(((-1.85661904290163e-6)*pz*(cj0*cj0)*(r00*r00)))+(((7.51298215068597e-5)*py*r01*r02*(cj0*cj0)*(px*px)))+(((1.85661904290163e-6)*py*r01*r02*(sj0*sj0)))+(((-7.51298215068597e-5)*cj0*px*py*pz*sj0*(r01*r01)))+(((0.00011269473226029)*py*r01*r02*(pz*pz)))+(((1.85661904290163e-6)*cj0*px*r01*r02*sj0))+(((0.00011269473226029)*px*r00*r02*(pz*pz)))+(((1.42746660863033e-5)*py*pz*sj0*(r01*r01)))+(((1.42746660863033e-5)*cj0*px*py*r01*r02))+(((-7.51298215068597e-5)*px*py*pz*r00*r01*(sj0*sj0)))+(((-3.75649107534298e-5)*cj0*r00*r02*sj0*(py*py*py)))+(((3.11722231796523e-6)*px*r00*r02))+(((-1.42746660863033e-5)*r01*r02*sj0*(px*px)))+(((-3.75649107534298e-5)*r01*r02*(py*py*py)))+(((0.00011269473226029)*cj0*py*r00*r02*sj0*(px*px)))+(((1.42746660863033e-5)*px*pz*r00*r01*sj0))+(((-3.75649107534298e-5)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((1.42746660863033e-5)*cj0*py*pz*r00*r01))+(((3.75649107534298e-5)*r00*r02*(cj0*cj0)*(px*px*px)))+(((-0.00011269473226029)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-0.00011269473226029)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((-3.75649107534298e-5)*px*r00*r02*(py*py)))+(((3.11722231796523e-6)*py*r01*r02))+(((1.42746660863033e-5)*px*py*r00*r02*sj0))+(((-3.75649107534298e-5)*px*r00*r02*(cj0*cj0)*(py*py)))+(((-0.00011269473226029)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((-3.75649107534298e-5)*pz*(px*px)*(r02*r02)))+(((3.75649107534298e-5)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((7.51298215068597e-5)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((9.45029858564705e-7)*r01*r02*sj0))+(((1.42746660863033e-5)*cj0*px*pz*(r00*r00)))+(((-3.75649107534298e-5)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((3.75649107534298e-5)*r01*r02*(py*py*py)*(sj0*sj0)))+(((-3.75649107534298e-5)*py*r01*r02*(px*px)))+(((1.85661904290163e-6)*cj0*py*r00*r02*sj0))+(((0.000150259643013719)*px*py*pz*r00*r01))+(((0.000150259643013719)*cj0*px*py*pz*sj0*(r02*r02)))+(((3.75649107534298e-5)*pz*(cj0*cj0)*(py*py)*(r00*r00))));
op[2]=((((-6.07144946007904e-6)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-4.94275141492498e-5)*(pz*pz*pz*pz)*(r02*r02)))+(((-9.38882649972009e-6)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((1.20933801611924e-6)*cj0*r00*r01*sj0))+(((-7.13733304315167e-6)*(py*py)*(r01*r01)))+(((0.000197710056596999)*px*pz*r00*r02*(py*py)))+(((9.88550282984996e-5)*(py*py)*(pz*pz)*(r02*r02)))+(((-0.000197710056596999)*(py*py)*(pz*pz)*(r01*r01)))+(((-0.000197710056596999)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((-4.94275141492498e-5)*(py*py*py*py)*(r02*r02)))+(((-0.000197710056596999)*(px*px)*(pz*pz)*(r00*r00)))+(((-8.12875779787435e-7)*(r02*r02)))+(((0.000197710056596999)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((0.000197710056596999)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((6.07144946007904e-6)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-4.94275141492498e-5)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.000593130169790997)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-0.000197710056596999)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-1.87776529994402e-5)*cj0*r00*r01*sj0*(pz*pz)))+(((6.07144946007904e-6)*(py*py)*(r01*r01)*(sj0*sj0)))+(((1.21428989201581e-5)*px*py*r00*r01*(cj0*cj0)))+(((-0.000395420113193998)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-0.000395420113193998)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((-4.49557654250553e-5)*py*pz*r01*r02))+(((-0.000395420113193998)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((-9.88550282984996e-5)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((1.87776529994402e-5)*cj0*px*pz*r01*r02*sj0))+(((-0.000593130169790997)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((1.87776529994402e-5)*cj0*py*pz*r00*r02*sj0))+(((9.88550282984996e-5)*cj0*r00*r01*sj0*(py*py*py*py)))+(((-6.6347540792821e-6)*cj0*px*py*sj0*(r02*r02)))+(((-1.42746660863033e-5)*px*py*r00*r01))+(((0.000197710056596999)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((6.04669008059622e-7)*(r01*r01)*(sj0*sj0)))+(((-4.94275141492498e-5)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((9.88550282984996e-5)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.000197710056596999)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-7.13733304315167e-6)*(px*px)*(r00*r00)))+(((-0.000197710056596999)*py*r01*r02*(pz*pz*pz)))+(((-4.94275141492498e-5)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((-4.49557654250553e-5)*px*pz*r00*r02))+(((0.000197710056596999)*pz*r00*r02*(px*px*px)))+(((0.000197710056596999)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((-0.000197710056596999)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((0.000197710056596999)*py*pz*r01*r02*(px*px)))+(((0.000197710056596999)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((1.87776529994402e-5)*px*pz*r00*r02*(cj0*cj0)))+(((-0.000197710056596999)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((-0.000197710056596999)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-0.000197710056596999)*px*r00*r02*(pz*pz*pz)))+(((-0.000197710056596999)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((9.88550282984996e-5)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((1.87776529994402e-5)*py*pz*r01*r02*(sj0*sj0)))+(((-0.000197710056596999)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((-9.88550282984996e-5)*(px*px)*(py*py)*(r02*r02)))+(((0.000197710056596999)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((0.000197710056596999)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((1.5340549669376e-5)*(px*px)*(r02*r02)))+(((0.000197710056596999)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((0.000197710056596999)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((9.88550282984996e-5)*cj0*r00*r01*sj0*(px*px*px*px)))+(((0.000197710056596999)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((1.21428989201581e-5)*cj0*px*py*sj0*(r01*r01)))+(((-3.31737703964105e-6)*(cj0*cj0)*(px*px)*(r02*r02)))+(((-4.94275141492498e-5)*(px*px*px*px)*(r02*r02)))+(((-2.24778827125276e-5)*(pz*pz)*(r02*r02)))+(((0.000197710056596999)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((-0.000197710056596999)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-4.94275141492498e-5)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((-4.94275141492498e-5)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((-9.88550282984996e-5)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((1.21428989201581e-5)*px*py*r00*r01*(sj0*sj0)))+(((-4.94275141492498e-5)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((6.04669008059622e-7)*(cj0*cj0)*(r00*r00)))+(((9.88550282984996e-5)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((0.000197710056596999)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((9.88550282984996e-5)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-3.31737703964105e-6)*(py*py)*(r02*r02)*(sj0*sj0)))+(((-0.000197710056596999)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((1.5340549669376e-5)*(py*py)*(r02*r02)))+(((-6.07144946007904e-6)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-0.000593130169790997)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((1.21428989201581e-5)*cj0*px*py*sj0*(r00*r00)))+(((-9.38882649972009e-6)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((0.000197710056596999)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((0.000197710056596999)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-0.000197710056596999)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((0.000197710056596999)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-0.000395420113193998)*px*py*r00*r01*(pz*pz)))+(((-9.88550282984996e-5)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((0.000197710056596999)*pz*r01*r02*(py*py*py)))+(((9.88550282984996e-5)*(px*px)*(pz*pz)*(r02*r02))));
op[3]=((((-1.42746660863033e-5)*cj0*px*py*r01*r02))+(((7.51298215068597e-5)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((3.75649107534298e-5)*(pz*pz*pz)*(r02*r02)))+(((3.11722231796523e-6)*pz*(r02*r02)))+(((7.51298215068597e-5)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((3.75649107534298e-5)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-1.42746660863033e-5)*cj0*py*pz*r00*r01))+(((1.42746660863033e-5)*r01*r02*sj0*(px*px)))+(((0.00011269473226029)*cj0*px*r01*r02*sj0*(py*py)))+(((7.51298215068597e-5)*pz*(py*py)*(r01*r01)))+(((-3.75649107534298e-5)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-0.00011269473226029)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-3.75649107534298e-5)*pz*(py*py)*(r02*r02)))+(((3.75649107534298e-5)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((-3.75649107534298e-5)*r00*r02*(px*px*px)))+(((-7.51298215068597e-5)*cj0*px*py*pz*sj0*(r00*r00)))+(((1.42746660863033e-5)*cj0*r00*r02*(py*py)))+(((7.51298215068597e-5)*px*r00*r02*(py*py)*(sj0*sj0)))+(((-1.42746660863033e-5)*py*pz*sj0*(r01*r01)))+(((-3.75649107534298e-5)*cj0*r01*r02*sj0*(px*px*px)))+(((-3.71323808580327e-6)*cj0*pz*r00*r01*sj0))+(((-1.42746660863033e-5)*cj0*px*pz*(r02*r02)))+(((-1.85661904290163e-6)*pz*(r01*r01)*(sj0*sj0)))+(((-1.42746660863033e-5)*px*py*r00*r02*sj0))+(((7.51298215068597e-5)*pz*(px*px)*(r00*r00)))+(((1.85661904290163e-6)*px*r00*r02*(cj0*cj0)))+(((-7.51298215068597e-5)*px*py*pz*r00*r01*(cj0*cj0)))+(((-1.85661904290163e-6)*pz*(cj0*cj0)*(r00*r00)))+(((7.51298215068597e-5)*py*r01*r02*(cj0*cj0)*(px*px)))+(((1.85661904290163e-6)*py*r01*r02*(sj0*sj0)))+(((-7.51298215068597e-5)*cj0*px*py*pz*sj0*(r01*r01)))+(((0.00011269473226029)*py*r01*r02*(pz*pz)))+(((-1.42746660863033e-5)*px*pz*r00*r01*sj0))+(((1.85661904290163e-6)*cj0*px*r01*r02*sj0))+(((0.00011269473226029)*px*r00*r02*(pz*pz)))+(((-9.45029858564705e-7)*r01*r02*sj0))+(((-7.51298215068597e-5)*px*py*pz*r00*r01*(sj0*sj0)))+(((-3.75649107534298e-5)*cj0*r00*r02*sj0*(py*py*py)))+(((-1.42746660863033e-5)*cj0*px*pz*(r00*r00)))+(((3.11722231796523e-6)*px*r00*r02))+(((-3.75649107534298e-5)*r01*r02*(py*py*py)))+(((-1.42746660863033e-5)*py*pz*sj0*(r02*r02)))+(((0.00011269473226029)*cj0*py*r00*r02*sj0*(px*px)))+(((-3.75649107534298e-5)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((3.75649107534298e-5)*r00*r02*(cj0*cj0)*(px*px*px)))+(((-9.45029858564705e-7)*cj0*r00*r02))+(((-0.00011269473226029)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-0.00011269473226029)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((-3.75649107534298e-5)*px*r00*r02*(py*py)))+(((3.11722231796523e-6)*py*r01*r02))+(((-3.75649107534298e-5)*px*r00*r02*(cj0*cj0)*(py*py)))+(((-0.00011269473226029)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((-3.75649107534298e-5)*pz*(px*px)*(r02*r02)))+(((3.75649107534298e-5)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((7.51298215068597e-5)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((-3.75649107534298e-5)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((3.75649107534298e-5)*r01*r02*(py*py*py)*(sj0*sj0)))+(((-3.75649107534298e-5)*py*r01*r02*(px*px)))+(((1.85661904290163e-6)*cj0*py*r00*r02*sj0))+(((0.000150259643013719)*px*py*pz*r00*r01))+(((0.000150259643013719)*cj0*px*py*pz*sj0*(r02*r02)))+(((3.75649107534298e-5)*pz*(cj0*cj0)*(py*py)*(r00*r00))));
op[4]=((((-9.88550282984996e-5)*(py*py)*(pz*pz)*(r01*r01)))+(((3.75649107534298e-5)*cj0*px*(py*py)*(r01*r01)))+(((-4.88583958658325e-6)*cj0*py*pz*r00*r02*sj0))+(((5.63473661301448e-5)*px*r00*r01*sj0*(py*py)))+(((-4.88583958658325e-6)*px*pz*r00*r02*(cj0*cj0)))+(((1.87824553767149e-5)*px*r00*r01*sj0*(pz*pz)))+(((5.32941791536314e-7)*(px*px)*(r02*r02)))+(((-8.2032166262243e-6)*cj0*px*py*sj0*(r01*r01)))+(((-1.87824553767149e-5)*r00*r01*sj0*(px*px*px)))+(((-3.75649107534298e-5)*pz*r01*r02*sj0*(px*px)))+(((-9.88550282984996e-5)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-1.70180425252542e-7)*(r01*r01)*(sj0*sj0)))+(((4.94275141492498e-5)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-4.94275141492498e-5)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((1.87824553767149e-5)*cj0*px*(pz*pz)*(r00*r00)))+(((-1.70180425252542e-7)*(cj0*cj0)*(r00*r00)))+(((1.87824553767149e-5)*cj0*px*(py*py)*(r02*r02)))+(((-2.47137570746249e-5)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((1.87824553767149e-5)*cj0*(px*px*px)*(r00*r00)))+(((4.94275141492498e-5)*(px*px)*(pz*pz)*(r02*r02)))+(((9.88550282984996e-5)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((9.88550282984996e-5)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((4.94275141492498e-5)*cj0*r00*r01*sj0*(py*py*py*py)))+(((1.55861115898262e-6)*cj0*py*r00*r01))+(((-9.88550282984996e-5)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((1.87824553767149e-5)*py*sj0*(pz*pz)*(r02*r02)))+(((9.88550282984996e-5)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-9.88550282984996e-5)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((-0.000197710056596999)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((1.87824553767149e-5)*cj0*(px*px*px)*(r02*r02)))+(((-2.47137570746249e-5)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((9.88550282984996e-5)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((2.44291979329162e-6)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-1.87824553767149e-5)*cj0*r00*r01*(py*py*py)))+(((-9.88550282984996e-5)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-2.47137570746249e-5)*(py*py*py*py)*(r02*r02)))+(((5.32941791536314e-7)*(py*py)*(r02*r02)))+(((-9.88550282984996e-5)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-2.47137570746249e-5)*(pz*pz*pz*pz)*(r02*r02)))+(((-9.88550282984996e-5)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((5.63473661301448e-5)*cj0*py*r00*r01*(px*px)))+(((9.88550282984996e-5)*px*pz*r00*r02*(py*py)))+(((3.75649107534298e-5)*py*sj0*(px*px)*(r00*r00)))+(((1.55861115898262e-6)*px*r00*r01*sj0))+(((-4.94275141492498e-5)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((-2.47137570746249e-5)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((-9.88550282984996e-5)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((2.44291979329162e-6)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.000197710056596999)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((2.48692068043343e-6)*pz*r01*r02*sj0))+(((-7.13733304315167e-6)*px*py*r00*r01))+(((-9.28309521450817e-7)*cj0*px*(r02*r02)))+(((-4.10160831311215e-6)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-8.2032166262243e-6)*py*pz*r01*r02))+(((1.87824553767149e-5)*sj0*(py*py*py)*(r01*r01)))+(((1.87824553767149e-5)*sj0*(py*py*py)*(r02*r02)))+(((9.88550282984996e-5)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((-8.2032166262243e-6)*px*pz*r00*r02))+(((4.94275141492498e-5)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((9.88550282984996e-5)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((9.88550282984996e-5)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((9.88550282984996e-5)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((-3.40360850505083e-7)*cj0*r00*r01*sj0))+(((-9.88550282984996e-5)*py*r01*r02*(pz*pz*pz)))+(((-2.47137570746249e-5)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((-9.88550282984996e-5)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((9.88550282984996e-5)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((-9.88550282984996e-5)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-4.88583958658325e-6)*cj0*px*pz*r01*r02*sj0))+(((9.88550282984996e-5)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-8.2032166262243e-6)*cj0*px*py*sj0*(r00*r00)))+(((-0.000197710056596999)*px*py*r00*r01*(pz*pz)))+(((1.55861115898262e-6)*cj0*px*(r00*r00)))+(((-2.47137570746249e-5)*(px*px*px*px)*(r02*r02)))+(((-4.94275141492498e-5)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((-8.2032166262243e-6)*px*py*r00*r01*(cj0*cj0)))+(((9.88550282984996e-5)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((-1.87824553767149e-5)*cj0*px*(py*py)*(r00*r00)))+(((-0.000197710056596999)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((-0.000296565084895499)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((1.87824553767149e-5)*cj0*py*r00*r01*(pz*pz)))+(((1.87824553767149e-5)*cj0*px*(pz*pz)*(r02*r02)))+(((9.88550282984996e-5)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((6.60770393886347e-8)*(r02*r02)))+(((-8.2032166262243e-6)*px*py*r00*r01*(sj0*sj0)))+(((1.87824553767149e-5)*py*sj0*(px*px)*(r02*r02)))+(((9.88550282984996e-5)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((9.88550282984996e-5)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((1.55861115898262e-6)*py*sj0*(r01*r01)))+(((-3.31737703964105e-6)*cj0*px*py*sj0*(r02*r02)))+(((-9.88550282984996e-5)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((4.94275141492498e-5)*cj0*r00*r01*sj0*(px*px*px*px)))+(((4.10160831311215e-6)*(px*px)*(r01*r01)*(sj0*sj0)))+(((4.94275141492498e-5)*(py*py)*(pz*pz)*(r02*r02)))+(((-2.47137570746249e-5)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((-4.88583958658325e-6)*py*pz*r01*r02*(sj0*sj0)))+(((4.88583958658325e-6)*cj0*r00*r01*sj0*(pz*pz)))+(((-3.56866652157583e-6)*(px*px)*(r00*r00)))+(((9.88550282984996e-5)*pz*r01*r02*(py*py*py)))+(((2.48692068043343e-6)*cj0*pz*r00*r02))+(((9.88550282984996e-5)*py*pz*r01*r02*(px*px)))+(((3.75649107534298e-5)*px*py*pz*r00*r02*sj0))+(((-4.10160831311215e-6)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-3.75649107534298e-5)*cj0*pz*r00*r02*(py*py)))+(((4.94275141492498e-5)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((-0.000296565084895499)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-4.94275141492498e-5)*(px*px)*(py*py)*(r02*r02)))+(((-9.88550282984996e-5)*(px*px)*(pz*pz)*(r00*r00)))+(((-1.87824553767149e-5)*py*sj0*(px*px)*(r01*r01)))+(((9.88550282984996e-5)*pz*r00*r02*(px*px*px)))+(((-9.28309521450817e-7)*py*sj0*(r02*r02)))+(((1.87824553767149e-5)*py*sj0*(pz*pz)*(r01*r01)))+(((9.88550282984996e-5)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((-3.56866652157583e-6)*(py*py)*(r01*r01)))+(((4.10160831311215e-6)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.000296565084895499)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-1.65868851982052e-6)*(cj0*cj0)*(px*px)*(r02*r02)))+(((-1.65868851982052e-6)*(py*py)*(r02*r02)*(sj0*sj0)))+(((9.88550282984996e-5)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-9.88550282984996e-5)*px*r00*r02*(pz*pz*pz)))+(((3.75649107534298e-5)*cj0*px*py*pz*r01*r02))+(((-4.10160831311215e-6)*(pz*pz)*(r02*r02)))+(((-2.47137570746249e-5)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((4.94275141492498e-5)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0))));
polyroots4(op,zeror,numroots);
IkReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=((((-1.0)*r00*sj0))+((cj0*r01)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x27=((5.31250087376659)*cj1);
cj3array[0]=((-0.690964694237614)+(((13.9802654572805)*(px*px)))+(((13.9802654572805)*(py*py)))+(((-1.0)*cj0*px*x27))+(((-5.31250087376659)*pz*sj1))+(((13.9802654572805)*(pz*pz)))+(((-1.0)*py*sj0*x27)));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x28=px*px;
IkReal x29=pz*pz;
IkReal x30=py*py;
IkReal x31=(px*sj0);
IkReal x32=((2.0)*py);
IkReal x33=(r00*sj0);
IkReal x34=(cj0*r01);
IkReal x35=(pz*r02);
IkReal x36=((0.38)*cj1);
IkReal x37=((0.38)*r02*sj1);
IkReal x38=((0.38)*pz*sj1);
IkReal x39=((1.0)*x30);
evalcond[0]=((-0.08552429)+((x29*x34))+(((2.0)*x31*x35))+(((0.0361)*x34))+((py*r00*x36))+((x28*x33))+((x28*x34))+(((-0.0361)*x33))+((cj0*py*x37))+(((-1.0)*x31*x37))+(((-1.0)*x33*x39))+(((-1.0)*x29*x33))+(((-1.0)*px*r01*x36))+(((-1.0)*cj0*px*r00*x32))+(((-1.0)*cj0*x32*x35))+(((-1.0)*x34*x39))+(((-1.0)*x34*x38))+(((-0.0715294)*(IKcos(j3))))+((r01*x31*x32))+((x33*x38)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.19565227724544)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-8552429.0)+(((-7152940.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x40=((25730000.0)*cj1);
IkReal x41=(cj3*pz);
IkReal x42=(py*sj0);
IkReal x43=((25730000.0)*sj1);
IkReal x44=(pz*sj3);
IkReal x45=(cj0*px);
IkReal x46=((13900000.0)*cj1);
IkReal x47=((13900000.0)*sj1);
IkReal x48=(sj1*x45);
CheckValue<IkReal> x49=IKPowWithIntegerCheck(IKsign(((-8552429.0)+(((-7152940.0)*cj3)))),-1);
if(!x49.valid){
continue;
}
CheckValue<IkReal> x50 = IKatan2WithCheck(IkReal(((((-1.0)*pz*x46))+((cj3*x42*x43))+(((-1.0)*x40*x41))+(((-1.0)*x43*x44))+((x42*x47))+((x45*x47))+(((-1.0)*sj3*x40*x45))+(((-1.0)*sj3*x40*x42))+(((4888700.0)*sj3))+((cj3*x43*x45)))),IkReal(((2641000.0)+(((-1.0)*cj3*x40*x42))+(((-1.0)*cj3*x40*x45))+(((-1.0)*x42*x46))+((x40*x44))+(((-1.0)*pz*x47))+(((-1.0)*x41*x43))+(((-1.0)*x45*x46))+(((-1.0)*sj3*x43*x45))+(((-1.0)*sj3*x42*x43))+(((4888700.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x50.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x49.value)))+(x50.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x51=IKsin(j2);
IkReal x52=IKcos(j2);
IkReal x53=((0.2573)*sj3);
IkReal x54=(px*sj1);
IkReal x55=((0.2573)*cj3);
IkReal x56=(py*sj1);
IkReal x57=((1.0)*r00);
IkReal x58=(cj1*sj0);
IkReal x59=((1.0)*px);
IkReal x60=((1.0)*pz);
IkReal x61=(cj0*r01);
IkReal x62=(pz*sj1);
IkReal x63=(cj0*cj1);
IkReal x64=((0.139)*x51);
IkReal x65=((0.139)*x52);
IkReal x66=(x51*x55);
IkReal x67=(x52*x53);
IkReal x68=(x51*x53);
IkReal x69=(x52*x55);
IkReal x70=(x64+x66);
IkReal x71=(x65+x68+x69);
evalcond[0]=((((-1.0)*cj1*x60))+((sj0*x56))+((cj0*x54))+x70+(((-1.0)*x67)));
evalcond[1]=((0.19)+(((-1.0)*py*x58))+(((-1.0)*x59*x63))+x71+(((-1.0)*sj1*x60)));
evalcond[2]=((((-1.0)*x56*x57))+(((-1.0)*r02*x58*x59))+((pz*r00*x58))+((r01*x54))+((py*r02*x63))+x70+(((-1.0)*x67))+(((-1.0)*cj1*x60*x61)));
evalcond[3]=((((-0.19)*x61))+(((-1.0)*x71))+((r02*sj0*x54))+((x61*x62))+(((-1.0)*cj0*r02*x56))+(((0.19)*r00*sj0))+(((-1.0)*cj1*py*x57))+((cj1*px*r01))+(((-1.0)*sj0*x57*x62)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x72=((5.31250087376659)*cj1);
cj3array[0]=((-0.690964694237614)+(((13.9802654572805)*(px*px)))+(((13.9802654572805)*(py*py)))+(((-5.31250087376659)*pz*sj1))+(((-1.0)*py*sj0*x72))+(((-1.0)*cj0*px*x72))+(((13.9802654572805)*(pz*pz))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x73=px*px;
IkReal x74=pz*pz;
IkReal x75=py*py;
IkReal x76=(px*sj0);
IkReal x77=((2.0)*py);
IkReal x78=(r00*sj0);
IkReal x79=(cj0*r01);
IkReal x80=(pz*r02);
IkReal x81=((0.38)*cj1);
IkReal x82=((0.38)*r02*sj1);
IkReal x83=((0.38)*pz*sj1);
IkReal x84=((1.0)*x75);
evalcond[0]=((0.08552429)+(((-0.0361)*x78))+(((0.0715294)*(IKcos(j3))))+((x78*x83))+(((-1.0)*cj0*px*r00*x77))+(((-1.0)*px*r01*x81))+((py*r00*x81))+(((-1.0)*x79*x84))+(((-1.0)*x79*x83))+(((-1.0)*x78*x84))+((cj0*py*x82))+(((-1.0)*x76*x82))+((x73*x79))+((x73*x78))+(((2.0)*x76*x80))+(((-1.0)*x74*x78))+((x74*x79))+(((0.0361)*x79))+(((-1.0)*cj0*x77*x80))+((r01*x76*x77)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.19565227724544)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-8552429.0)+(((-7152940.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x85=((25730000.0)*cj1);
IkReal x86=(cj3*pz);
IkReal x87=(py*sj0);
IkReal x88=((25730000.0)*sj1);
IkReal x89=(pz*sj3);
IkReal x90=(cj0*px);
IkReal x91=((13900000.0)*cj1);
IkReal x92=((13900000.0)*sj1);
IkReal x93=(sj1*x90);
CheckValue<IkReal> x94=IKPowWithIntegerCheck(IKsign(((-8552429.0)+(((-7152940.0)*cj3)))),-1);
if(!x94.valid){
continue;
}
CheckValue<IkReal> x95 = IKatan2WithCheck(IkReal((((cj3*x87*x88))+(((-1.0)*pz*x91))+((x87*x92))+(((-1.0)*sj3*x85*x90))+(((-1.0)*sj3*x85*x87))+((x90*x92))+((cj3*x88*x90))+(((4888700.0)*sj3))+(((-1.0)*x88*x89))+(((-1.0)*x85*x86)))),IkReal(((2641000.0)+(((-1.0)*pz*x92))+(((-1.0)*sj3*x88*x90))+(((-1.0)*cj3*x85*x90))+(((-1.0)*cj3*x85*x87))+(((-1.0)*x90*x91))+((x85*x89))+(((-1.0)*x86*x88))+(((-1.0)*x87*x91))+(((4888700.0)*cj3))+(((-1.0)*sj3*x87*x88)))),IKFAST_ATAN2_MAGTHRESH);
if(!x95.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x94.value)))+(x95.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x96=IKsin(j2);
IkReal x97=IKcos(j2);
IkReal x98=((0.2573)*sj3);
IkReal x99=(px*sj1);
IkReal x100=((0.2573)*cj3);
IkReal x101=(py*sj1);
IkReal x102=((1.0)*r00);
IkReal x103=(cj1*sj0);
IkReal x104=((1.0)*px);
IkReal x105=((1.0)*pz);
IkReal x106=(cj0*r01);
IkReal x107=(pz*sj1);
IkReal x108=(cj0*cj1);
IkReal x109=((0.139)*x96);
IkReal x110=((0.139)*x97);
IkReal x111=(x97*x98);
IkReal x112=(x100*x96);
IkReal x113=(x96*x98);
IkReal x114=(x100*x97);
IkReal x115=(x112+x109);
IkReal x116=(x113+x110+x114);
evalcond[0]=((((-1.0)*cj1*x105))+(((-1.0)*x111))+x115+((cj0*x99))+((sj0*x101)));
evalcond[1]=((0.19)+(((-1.0)*x104*x108))+x116+(((-1.0)*py*x103))+(((-1.0)*sj1*x105)));
evalcond[2]=(((py*r02*x108))+(((-1.0)*x101*x102))+((r01*x99))+(((-1.0)*x115))+x111+(((-1.0)*cj1*x105*x106))+(((-1.0)*r02*x103*x104))+((pz*r00*x103)));
evalcond[3]=(((x106*x107))+x116+(((-0.19)*x106))+(((-1.0)*cj1*py*x102))+((r02*sj0*x99))+(((-1.0)*sj0*x102*x107))+(((0.19)*r00*sj0))+((cj1*px*r01))+(((-1.0)*cj0*r02*x101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x117=px*px;
IkReal x118=pz*pz;
IkReal x119=py*py;
IkReal x120=(pz*sj0);
IkReal x121=((10000000.0)*px);
IkReal x122=((1900000.0)*sj1);
IkReal x123=(cj0*py);
IkReal x124=(cj1*r00);
IkReal x125=(cj1*r01);
IkReal x126=(cj0*r01);
IkReal x127=(r00*sj0);
IkReal x128=(py*r01);
IkReal x129=(pz*r02);
IkReal x130=((5000000.0)*x119);
IkReal x131=((5000000.0)*x118);
IkReal x132=((5000000.0)*x117);
CheckValue<IkReal> x133=IKPowWithIntegerCheck(cj4,-1);
if(!x133.valid){
continue;
}
CheckValue<IkReal> x134=IKPowWithIntegerCheck(sj4,-1);
if(!x134.valid){
continue;
}
if( IKabs(((0.00719424460431655)*(x133.value)*(((((1000.0)*x129))+(((1000.0)*x128))+(((-190.0)*sj0*x125))+(((-190.0)*cj0*x124))+(((-190.0)*r02*sj1))+(((1000.0)*px*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.7960530914561e-6)*(x134.value)*((((x127*x132))+((sj0*x121*x128))+((r02*x122*x123))+((r00*x120*x122))+(((-1.0)*pz*x122*x126))+(((-180500.0)*x127))+(((-10000000.0)*x123*x129))+(((-1.0)*x126*x130))+(((-1900000.0)*px*x125))+(((-1.0)*r00*x121*x123))+(((-1.0)*px*r02*sj0*x122))+((x126*x131))+((x126*x132))+(((180500.0)*x126))+(((1900000.0)*py*x124))+(((-427621.45)*sj4))+((r02*x120*x121))+(((-1.0)*x127*x131))+(((-1.0)*x127*x130)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00719424460431655)*(x133.value)*(((((1000.0)*x129))+(((1000.0)*x128))+(((-190.0)*sj0*x125))+(((-190.0)*cj0*x124))+(((-190.0)*r02*sj1))+(((1000.0)*px*r00))))))+IKsqr(((2.7960530914561e-6)*(x134.value)*((((x127*x132))+((sj0*x121*x128))+((r02*x122*x123))+((r00*x120*x122))+(((-1.0)*pz*x122*x126))+(((-180500.0)*x127))+(((-10000000.0)*x123*x129))+(((-1.0)*x126*x130))+(((-1900000.0)*px*x125))+(((-1.0)*r00*x121*x123))+(((-1.0)*px*r02*sj0*x122))+((x126*x131))+((x126*x132))+(((180500.0)*x126))+(((1900000.0)*py*x124))+(((-427621.45)*sj4))+((r02*x120*x121))+(((-1.0)*x127*x131))+(((-1.0)*x127*x130))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00719424460431655)*(x133.value)*(((((1000.0)*x129))+(((1000.0)*x128))+(((-190.0)*sj0*x125))+(((-190.0)*cj0*x124))+(((-190.0)*r02*sj1))+(((1000.0)*px*r00))))), ((2.7960530914561e-6)*(x134.value)*((((x127*x132))+((sj0*x121*x128))+((r02*x122*x123))+((r00*x120*x122))+(((-1.0)*pz*x122*x126))+(((-180500.0)*x127))+(((-10000000.0)*x123*x129))+(((-1.0)*x126*x130))+(((-1900000.0)*px*x125))+(((-1.0)*r00*x121*x123))+(((-1.0)*px*r02*sj0*x122))+((x126*x131))+((x126*x132))+(((180500.0)*x126))+(((1900000.0)*py*x124))+(((-427621.45)*sj4))+((r02*x120*x121))+(((-1.0)*x127*x131))+(((-1.0)*x127*x130))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x135=IKcos(j3);
IkReal x136=px*px;
IkReal x137=pz*pz;
IkReal x138=py*py;
IkReal x139=(r01*sj0);
IkReal x140=((2.0)*py);
IkReal x141=(r00*sj0);
IkReal x142=((0.19)*cj1);
IkReal x143=(px*sj0);
IkReal x144=(py*sj0);
IkReal x145=((1.0)*pz);
IkReal x146=(cj0*r01);
IkReal x147=((0.38)*cj1);
IkReal x148=((0.19)*sj1);
IkReal x149=((0.139)*cj4);
IkReal x150=(cj0*r00);
IkReal x151=(cj0*px);
IkReal x152=(pz*r02);
IkReal x153=((0.38)*r02*sj1);
IkReal x154=((0.0715294)*x135);
IkReal x155=((0.38)*pz*sj1);
IkReal x156=((1.0)*x137);
IkReal x157=((1.0)*x138);
evalcond[0]=(((x149*(IKsin(j3))))+((x142*x150))+(((-1.0)*px*r00))+(((-1.0)*r02*x145))+(((-1.0)*py*r01))+((r02*x148))+((x139*x142)));
evalcond[1]=((0.04942429)+(((-1.0)*x157))+(((-1.0)*x156))+((x144*x147))+x155+x154+(((-1.0)*x136))+((x147*x151)));
evalcond[2]=((((-1.0)*r02*x142))+(((-1.0)*x139*x145))+(((-1.0)*x145*x150))+((x148*x150))+((r02*x144))+(((-0.2573)*cj4))+((r02*x151))+((x139*x148))+(((-1.0)*x135*x149)));
evalcond[3]=((((-0.0361)*x141))+((cj0*py*x153))+((x136*x141))+((x136*x146))+(((-1.0)*x143*x153))+(((-1.0)*cj0*x140*x152))+((x137*x146))+((x141*x155))+(((-1.0)*sj4*x154))+(((-1.0)*x141*x156))+(((-1.0)*x141*x157))+((py*r00*x147))+(((-0.08552429)*sj4))+(((2.0)*x143*x152))+(((-1.0)*x146*x155))+(((-1.0)*x146*x157))+(((-1.0)*px*r01*x147))+(((-1.0)*px*x140*x150))+(((0.0361)*x146))+((px*x139*x140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x158=(cj3*cj4);
j2eval[0]=((((1.85107913669065)*cj4))+x158);
j2eval[1]=IKsign(((((1390.0)*x158))+(((2573.0)*cj4))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.19565227724544)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-8552429.0)+(((-7152940.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x159=((25730000.0)*cj1);
IkReal x160=(cj3*pz);
IkReal x161=(py*sj0);
IkReal x162=((25730000.0)*sj1);
IkReal x163=(pz*sj3);
IkReal x164=(cj0*px);
IkReal x165=((13900000.0)*cj1);
IkReal x166=((13900000.0)*sj1);
IkReal x167=(sj1*x164);
CheckValue<IkReal> x168 = IKatan2WithCheck(IkReal((((x161*x166))+(((-1.0)*x159*x160))+((cj3*x161*x162))+(((-1.0)*pz*x165))+((x164*x166))+((cj3*x162*x164))+(((-1.0)*x162*x163))+(((-1.0)*sj3*x159*x161))+(((-1.0)*sj3*x159*x164))+(((4888700.0)*sj3)))),IkReal(((2641000.0)+(((-1.0)*sj3*x161*x162))+(((-1.0)*x160*x162))+(((-1.0)*x161*x165))+(((-1.0)*pz*x166))+(((-1.0)*cj3*x159*x161))+(((-1.0)*cj3*x159*x164))+(((4888700.0)*cj3))+((x159*x163))+(((-1.0)*sj3*x162*x164))+(((-1.0)*x164*x165)))),IKFAST_ATAN2_MAGTHRESH);
if(!x168.valid){
continue;
}
CheckValue<IkReal> x169=IKPowWithIntegerCheck(IKsign(((-8552429.0)+(((-7152940.0)*cj3)))),-1);
if(!x169.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x168.value)+(((1.5707963267949)*(x169.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x170=IKsin(j2);
IkReal x171=IKcos(j2);
IkReal x172=((0.2573)*sj3);
IkReal x173=(px*sj1);
IkReal x174=((0.2573)*cj3);
IkReal x175=(py*sj1);
IkReal x176=((1.0)*r00);
IkReal x177=(cj1*sj0);
IkReal x178=((1.0)*px);
IkReal x179=((1.0)*pz);
IkReal x180=(cj0*r01);
IkReal x181=(pz*sj1);
IkReal x182=(cj0*cj1);
IkReal x183=((0.139)*x170);
IkReal x184=((0.139)*x171);
IkReal x185=(x170*x174);
IkReal x186=(x171*x172);
IkReal x187=(x170*x172);
IkReal x188=(x171*x174);
IkReal x189=(x185+x183);
IkReal x190=(x184+x187+x188);
evalcond[0]=(((cj0*x173))+((sj0*x175))+(((-1.0)*x186))+x189+(((-1.0)*cj1*x179)));
evalcond[1]=((0.19)+(((-1.0)*x178*x182))+(((-1.0)*py*x177))+x190+(((-1.0)*sj1*x179)));
evalcond[2]=((((-1.0)*x175*x176))+((pz*r00*x177))+((r01*x173))+(((-1.0)*x186))+x189+(((-1.0)*cj1*x179*x180))+((py*r02*x182))+(((-1.0)*r02*x177*x178)));
evalcond[3]=((((-1.0)*sj0*x176*x181))+((x180*x181))+(((-1.0)*cj1*py*x176))+(((-1.0)*x190))+(((-1.0)*cj0*r02*x175))+((r02*sj0*x173))+(((-0.19)*x180))+(((0.19)*r00*sj0))+((cj1*px*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.19565227724544)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-8552429.0)+(((-7152940.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x191=((25730000.0)*cj1);
IkReal x192=(cj3*pz);
IkReal x193=(py*sj0);
IkReal x194=((25730000.0)*sj1);
IkReal x195=(pz*sj3);
IkReal x196=(cj0*px);
IkReal x197=((13900000.0)*cj1);
IkReal x198=((13900000.0)*sj1);
IkReal x199=(sj1*x196);
CheckValue<IkReal> x200 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x191*x196))+(((-1.0)*sj3*x191*x193))+((x193*x198))+(((-1.0)*x194*x195))+(((-1.0)*pz*x197))+(((-1.0)*x191*x192))+((cj3*x194*x196))+((x196*x198))+(((4888700.0)*sj3))+((cj3*x193*x194)))),IkReal(((2641000.0)+(((-1.0)*cj3*x191*x196))+(((-1.0)*cj3*x191*x193))+(((-1.0)*x196*x197))+(((-1.0)*pz*x198))+(((-1.0)*x192*x194))+(((-1.0)*sj3*x193*x194))+((x191*x195))+(((-1.0)*sj3*x194*x196))+(((4888700.0)*cj3))+(((-1.0)*x193*x197)))),IKFAST_ATAN2_MAGTHRESH);
if(!x200.valid){
continue;
}
CheckValue<IkReal> x201=IKPowWithIntegerCheck(IKsign(((-8552429.0)+(((-7152940.0)*cj3)))),-1);
if(!x201.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x200.value)+(((1.5707963267949)*(x201.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x202=IKsin(j2);
IkReal x203=IKcos(j2);
IkReal x204=((0.2573)*sj3);
IkReal x205=(px*sj1);
IkReal x206=((0.2573)*cj3);
IkReal x207=(py*sj1);
IkReal x208=((1.0)*r00);
IkReal x209=(cj1*sj0);
IkReal x210=((1.0)*px);
IkReal x211=((1.0)*pz);
IkReal x212=(cj0*r01);
IkReal x213=(pz*sj1);
IkReal x214=(cj0*cj1);
IkReal x215=((0.139)*x202);
IkReal x216=((0.139)*x203);
IkReal x217=(x203*x204);
IkReal x218=(x202*x206);
IkReal x219=(x202*x204);
IkReal x220=(x203*x206);
IkReal x221=(x215+x218);
IkReal x222=(x216+x219+x220);
evalcond[0]=(((sj0*x207))+(((-1.0)*cj1*x211))+x221+((cj0*x205))+(((-1.0)*x217)));
evalcond[1]=((0.19)+(((-1.0)*sj1*x211))+x222+(((-1.0)*x210*x214))+(((-1.0)*py*x209)));
evalcond[2]=(((pz*r00*x209))+(((-1.0)*r02*x209*x210))+((py*r02*x214))+(((-1.0)*cj1*x211*x212))+((r01*x205))+(((-1.0)*x207*x208))+x217+(((-1.0)*x221)));
evalcond[3]=((((-0.19)*x212))+(((-1.0)*cj0*r02*x207))+x222+(((-1.0)*sj0*x208*x213))+((x212*x213))+(((0.19)*r00*sj0))+(((-1.0)*cj1*py*x208))+((r02*sj0*x205))+((cj1*px*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x223=((2.52334090335604)*sj1);
IkReal x224=(cj0*px);
IkReal x225=((2.52334090335604)*cj1);
IkReal x226=(py*sj0);
if( IKabs((((pz*x225))+(((-1.0)*x223*x224))+(((-1.0)*x223*x226)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.479434771637648)+((x224*x225))+((x225*x226))+((pz*x223)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((pz*x225))+(((-1.0)*x223*x224))+(((-1.0)*x223*x226))))+IKsqr(((-0.479434771637648)+((x224*x225))+((x225*x226))+((pz*x223))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((pz*x225))+(((-1.0)*x223*x224))+(((-1.0)*x223*x226))), ((-0.479434771637648)+((x224*x225))+((x225*x226))+((pz*x223))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x227=IKsin(j2);
IkReal x228=IKcos(j2);
IkReal x229=px*px;
IkReal x230=py*py;
IkReal x231=pz*pz;
IkReal x232=(px*sj1);
IkReal x233=((0.15705369)*cj4);
IkReal x234=(cj0*r00);
IkReal x235=(cj1*sj0);
IkReal x236=((1.0)*r01);
IkReal x237=(sj0*sj1);
IkReal x238=((1.0)*sj1);
IkReal x239=(py*r00);
IkReal x240=((1.0)*cj1);
IkReal x241=(px*r02);
IkReal x242=((2.0)*pz);
IkReal x243=(cj0*r02);
IkReal x244=((0.38)*pz);
IkReal x245=(r01*sj0);
IkReal x246=(r01*sj1);
IkReal x247=(cj0*pz);
IkReal x248=(pz*r00);
IkReal x249=((0.0361)*cj1);
IkReal x250=((0.0361)*r01);
IkReal x251=((0.38)*py);
IkReal x252=(r02*sj0);
IkReal x253=((0.0361)*sj1);
IkReal x254=(py*r01);
IkReal x255=((2.0)*cj0);
IkReal x256=(cj1*px);
IkReal x257=(sj1*x231);
IkReal x258=(r02*x230);
IkReal x259=(r02*x229);
IkReal x260=((0.3963)*x227);
IkReal x261=((0.3963)*x228);
IkReal x262=(py*r02*x242);
evalcond[0]=(((sj1*x234))+((r01*x237))+(((-1.0)*r02*x240))+((cj4*x228)));
evalcond[1]=((((-1.0)*pz*x240))+x260+((py*x237))+((cj0*x232)));
evalcond[2]=((((-1.0)*cj4*x227))+(((-1.0)*x235*x236))+(((-1.0)*x234*x240))+(((-1.0)*r02*x238)));
evalcond[3]=((0.19)+(((-1.0)*py*x235))+(((-1.0)*pz*x238))+(((-1.0)*cj0*px*x240))+x261);
evalcond[4]=(((cj1*py*x243))+(((-1.0)*cj1*x236*x247))+(((-1.0)*x238*x239))+((r01*x232))+((sj4*x260))+(((-1.0)*x235*x241))+((x235*x248)));
evalcond[5]=((((-1.0)*py*x238*x243))+(((-1.0)*x237*x248))+((r01*x256))+(((-1.0)*sj4*x261))+(((-0.19)*cj0*r01))+(((0.19)*r00*sj0))+(((-1.0)*x239*x240))+((x246*x247))+((x232*x252)));
evalcond[6]=(((r00*x232*x242))+((x235*x250))+(((-1.0)*x227*x233))+((x234*x249))+((py*x242*x246))+((cj1*x229*x234))+(((-1.0)*x231*x234*x240))+(((-1.0)*x231*x235*x236))+(((-1.0)*r01*x251))+(((-1.0)*x229*x235*x236))+(((-1.0)*x230*x234*x240))+(((-1.0)*x238*x259))+(((-1.0)*x238*x258))+(((-1.0)*r02*x244))+((cj0*cj1*x241*x242))+((x235*x262))+((r02*x257))+((r02*x253))+((r01*x230*x235))+(((2.0)*px*x235*x239))+((x254*x255*x256))+(((-0.38)*px*r00)));
evalcond[7]=(((r01*x231*x237))+(((-2.0)*sj0*x232*x239))+((x228*x233))+(((-1.0)*x240*x258))+(((-1.0)*x240*x259))+(((-1.0)*x230*x236*x237))+((x251*x252))+((cj1*r02*x231))+(((-1.0)*x234*x244))+(((0.38)*cj0*x241))+(((-1.0)*x237*x262))+(((-1.0)*x232*x254*x255))+(((-1.0)*x232*x242*x243))+((r00*x242*x256))+((r01*x229*x237))+(((-1.0)*r02*x249))+(((-1.0)*x229*x234*x238))+((x234*x257))+((x234*x253))+((x237*x250))+((cj1*x242*x254))+((sj1*x230*x234))+(((-1.0)*x244*x245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x263=((8.4530853761623)*sj1);
IkReal x264=(cj0*px);
IkReal x265=((8.4530853761623)*cj1);
IkReal x266=(py*sj0);
if( IKabs((((x263*x266))+((x263*x264))+(((-1.0)*pz*x265)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.60608622147084)+(((-1.0)*x265*x266))+(((-1.0)*x264*x265))+(((-1.0)*pz*x263)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x263*x266))+((x263*x264))+(((-1.0)*pz*x265))))+IKsqr(((1.60608622147084)+(((-1.0)*x265*x266))+(((-1.0)*x264*x265))+(((-1.0)*pz*x263))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x263*x266))+((x263*x264))+(((-1.0)*pz*x265))), ((1.60608622147084)+(((-1.0)*x265*x266))+(((-1.0)*x264*x265))+(((-1.0)*pz*x263))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x267=IKsin(j2);
IkReal x268=IKcos(j2);
IkReal x269=px*px;
IkReal x270=py*py;
IkReal x271=pz*pz;
IkReal x272=(cj0*sj1);
IkReal x273=(r01*sj0);
IkReal x274=((0.1183)*sj4);
IkReal x275=((1.0)*cj1);
IkReal x276=((0.01399489)*cj4);
IkReal x277=(py*sj0);
IkReal x278=((1.0)*sj1);
IkReal x279=(py*r00);
IkReal x280=(px*r02);
IkReal x281=(r01*sj1);
IkReal x282=((2.0)*py);
IkReal x283=(pz*r00);
IkReal x284=((0.38)*cj0);
IkReal x285=((0.38)*r02);
IkReal x286=(cj0*r00);
IkReal x287=((0.0361)*cj1);
IkReal x288=((0.0361)*sj1);
IkReal x289=(pz*r01);
IkReal x290=(px*r01);
IkReal x291=(cj0*px);
IkReal x292=(cj0*cj1);
IkReal x293=(py*r02);
IkReal x294=(r00*x271);
IkReal x295=((2.0)*pz*r02);
IkReal x296=(r00*x270);
IkReal x297=((2.0)*px*r00);
IkReal x298=(r02*x270);
IkReal x299=(r02*x269);
IkReal x300=(r00*x269);
IkReal x301=(r02*x271);
evalcond[0]=((((-1.0)*pz*x275))+((px*x272))+(((-0.1183)*x267))+((sj1*x277)));
evalcond[1]=((((-1.0)*cj4*x268))+(((-1.0)*r02*x275))+((r00*x272))+((sj1*x273)));
evalcond[2]=((((-1.0)*x273*x275))+((cj4*x267))+(((-1.0)*r02*x278))+(((-1.0)*x275*x286)));
evalcond[3]=((0.19)+(((-1.0)*pz*x278))+(((-1.0)*x275*x291))+(((-0.1183)*x268))+(((-1.0)*x275*x277)));
evalcond[4]=((((-1.0)*cj0*x275*x289))+(((-1.0)*sj0*x275*x280))+((cj1*sj0*x283))+(((-1.0)*x278*x279))+(((-1.0)*x267*x274))+((x292*x293))+((px*x281)));
evalcond[5]=(((sj0*sj1*x280))+(((-1.0)*sj0*x278*x283))+((cj1*x290))+(((-1.0)*x272*x293))+(((-0.19)*cj0*r01))+((x272*x289))+(((0.19)*r00*sj0))+(((-1.0)*x275*x279))+((x268*x274)));
evalcond[6]=((((-1.0)*x271*x275*x286))+((x286*x287))+((x282*x290*x292))+(((-0.38)*py*r01))+((r02*x288))+((cj1*x270*x273))+((pz*x281*x282))+((x273*x287))+(((-1.0)*x278*x299))+(((-1.0)*x278*x298))+((cj1*x277*x295))+((cj1*x277*x297))+(((-1.0)*pz*x285))+(((2.0)*pz*x280*x292))+((cj1*x269*x286))+(((-1.0)*x270*x275*x286))+((sj1*x301))+(((-1.0)*x271*x273*x275))+((x267*x276))+(((-1.0)*x269*x273*x275))+(((2.0)*px*sj1*x283))+(((-0.38)*px*r00)));
evalcond[7]=((((-0.38)*pz*x273))+((cj1*x301))+(((-1.0)*r02*x287))+(((-1.0)*x272*x282*x290))+((x272*x294))+((x272*x296))+(((-1.0)*sj1*x277*x297))+(((-1.0)*sj1*x277*x295))+(((0.0361)*r00*x272))+((sj1*x271*x273))+(((-1.0)*x275*x299))+(((-1.0)*x275*x298))+(((2.0)*cj1*px*x283))+(((-2.0)*pz*x272*x280))+(((-1.0)*x270*x273*x278))+((x273*x288))+(((-1.0)*x272*x300))+(((-1.0)*x268*x276))+((sj1*x269*x273))+((x280*x284))+((x277*x285))+((cj1*x282*x289))+(((-1.0)*x283*x284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x313=IKPowWithIntegerCheck(cj4,-1);
if(!x313.valid){
continue;
}
IkReal x302=x313.value;
IkReal x303=(cj1*pz);
IkReal x304=((10000.0)*cj4);
IkReal x305=((2573.0)*cj3);
IkReal x306=(r02*sj1);
IkReal x307=(cj3*x304);
IkReal x308=(py*sj0*sj1);
IkReal x309=(cj0*px*sj1);
IkReal x310=(cj0*cj1*r00);
IkReal x311=((-0.000719424460431655)*x302);
IkReal x312=(cj1*r01*sj0);
CheckValue<IkReal> x314=IKPowWithIntegerCheck(sj3,-1);
if(!x314.valid){
continue;
}
if( IKabs((x311*(((((-2573.0)*x306))+(((-1.0)*x303*x304))+(((-2573.0)*x312))+(((-2573.0)*x310))+((x304*x309))+((x304*x308)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x311*(x314.value)*(((((-1390.0)*x306))+(((-1390.0)*x312))+(((-1390.0)*x310))+(((-1.0)*x303*x307))+(((-1.0)*x305*x312))+(((-1.0)*x305*x310))+(((-1.0)*x305*x306))+((x307*x308))+((x307*x309)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x311*(((((-2573.0)*x306))+(((-1.0)*x303*x304))+(((-2573.0)*x312))+(((-2573.0)*x310))+((x304*x309))+((x304*x308))))))+IKsqr((x311*(x314.value)*(((((-1390.0)*x306))+(((-1390.0)*x312))+(((-1390.0)*x310))+(((-1.0)*x303*x307))+(((-1.0)*x305*x312))+(((-1.0)*x305*x310))+(((-1.0)*x305*x306))+((x307*x308))+((x307*x309))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x311*(((((-2573.0)*x306))+(((-1.0)*x303*x304))+(((-2573.0)*x312))+(((-2573.0)*x310))+((x304*x309))+((x304*x308))))), (x311*(x314.value)*(((((-1390.0)*x306))+(((-1390.0)*x312))+(((-1390.0)*x310))+(((-1.0)*x303*x307))+(((-1.0)*x305*x312))+(((-1.0)*x305*x310))+(((-1.0)*x305*x306))+((x307*x308))+((x307*x309))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x315=IKcos(j2);
IkReal x316=IKsin(j2);
IkReal x317=px*px;
IkReal x318=py*py;
IkReal x319=pz*pz;
IkReal x320=(r01*sj0);
IkReal x321=((1.0)*cj1);
IkReal x322=((1.0)*sj1);
IkReal x323=(py*sj0);
IkReal x324=(cj0*r00);
IkReal x325=((2.0)*px);
IkReal x326=((0.0361)*cj1);
IkReal x327=(cj3*cj4);
IkReal x328=(cj1*r00);
IkReal x329=((0.04688229)*cj4);
IkReal x330=(cj0*r02);
IkReal x331=(cj1*py);
IkReal x332=((0.38)*px);
IkReal x333=(px*sj1);
IkReal x334=(r02*sj0);
IkReal x335=(pz*r01);
IkReal x336=((2.0)*sj1);
IkReal x337=((0.38)*r02);
IkReal x338=((0.38)*pz);
IkReal x339=(r02*sj1);
IkReal x340=(cj1*r02);
IkReal x341=(cj0*r01);
IkReal x342=((0.0715294)*cj4);
IkReal x343=(r00*sj1);
IkReal x344=((0.0361)*sj1);
IkReal x345=(py*r00);
IkReal x346=((0.2573)*cj3*sj4);
IkReal x347=((0.139)*x316);
IkReal x348=(cj0*pz*sj1);
IkReal x349=(sj3*x316);
IkReal x350=(pz*r00*sj0);
IkReal x351=(r02*x317);
IkReal x352=((0.139)*x315);
IkReal x353=((0.2573)*x315);
IkReal x354=(sj1*x319);
IkReal x355=(r02*x318);
IkReal x356=(sj3*x315);
evalcond[0]=(((cj4*x349))+((sj1*x320))+((sj1*x324))+((x315*x327))+(((-1.0)*r02*x321)));
evalcond[1]=((((-1.0)*x321*x324))+((cj4*x356))+(((-1.0)*x320*x321))+(((-1.0)*x316*x327))+(((-1.0)*r02*x322)));
evalcond[2]=((((0.2573)*cj3*x316))+x347+((sj1*x323))+((cj0*x333))+(((-1.0)*pz*x321))+(((-1.0)*sj3*x353)));
evalcond[3]=((0.19)+((cj3*x353))+(((-1.0)*x321*x323))+(((-1.0)*cj0*px*x321))+(((0.2573)*x349))+x352+(((-1.0)*pz*x322)));
evalcond[4]=(((r01*x333))+(((-1.0)*cj0*x321*x335))+((x330*x331))+((sj4*x347))+(((-1.0)*sj3*sj4*x353))+(((-1.0)*x322*x345))+(((-1.0)*px*x321*x334))+((x316*x346))+((pz*sj0*x328)));
evalcond[5]=((((-0.19)*x341))+(((-1.0)*x315*x346))+(((-1.0)*x322*x350))+(((-1.0)*x321*x345))+(((-0.2573)*sj4*x349))+((x333*x334))+((cj0*sj1*x335))+(((0.19)*r00*sj0))+(((-1.0)*sj4*x352))+(((-1.0)*py*x322*x330))+((cj1*px*r01)));
evalcond[6]=(((cj1*x318*x320))+((py*x335*x336))+((x320*x326))+((x329*x356))+(((-1.0)*r00*x332))+((x319*x339))+(((-0.38)*py*r01))+((x323*x325*x328))+(((-1.0)*x319*x320*x321))+(((-0.08552429)*x316*x327))+(((-1.0)*pz*x337))+(((-1.0)*x322*x355))+(((-1.0)*x322*x351))+((x324*x326))+((pz*x325*x343))+((x325*x331*x341))+(((0.0361)*x339))+(((-1.0)*x316*x342))+(((-1.0)*x318*x321*x324))+((cj1*pz*x325*x330))+(((-1.0)*x319*x321*x324))+(((-1.0)*x317*x320*x321))+(((2.0)*pz*x323*x340))+((cj1*x317*x324)));
evalcond[7]=((((-1.0)*x323*x325*x343))+(((-1.0)*x321*x351))+(((-1.0)*x321*x355))+((x330*x332))+((pz*x325*x328))+((x320*x354))+((x324*x344))+((x329*x349))+(((-1.0)*x318*x320*x322))+((x315*x342))+(((-1.0)*pz*r02*x323*x336))+(((-1.0)*x324*x338))+(((-1.0)*pz*sj1*x325*x330))+((x324*x354))+((x319*x340))+(((-1.0)*py*sj1*x325*x341))+((sj1*x318*x324))+(((-1.0)*x317*x322*x324))+((x323*x337))+(((2.0)*x331*x335))+(((-1.0)*x320*x338))+(((-1.0)*r02*x326))+((sj1*x317*x320))+((x320*x344))+(((0.08552429)*x315*x327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x357=((10000.0)*cj4);
IkReal x358=(cj1*sj3);
IkReal x359=(sj0*sj1);
IkReal x360=((2573.0)*r02);
IkReal x361=(cj0*sj1);
IkReal x362=(cj1*cj3);
IkReal x363=((2573.0)*r01);
IkReal x364=((2573.0)*r00);
CheckValue<IkReal> x365=IKPowWithIntegerCheck(IKsign(((((1390.0)*cj3*cj4))+(((2573.0)*cj4)))),-1);
if(!x365.valid){
continue;
}
CheckValue<IkReal> x366 = IKatan2WithCheck(IkReal((((x358*x360))+(((-1.0)*cj3*px*x357*x361))+((pz*x357*x362))+(((-1.0)*sj3*x359*x363))+(((-1.0)*sj3*x361*x364))+(((-1.0)*cj3*py*x357*x359)))),IkReal(((((1390.0)*cj1*r02))+(((-1.0)*cj3*x359*x363))+(((-1.0)*pz*x357*x358))+((py*sj3*x357*x359))+(((-1.0)*cj3*x361*x364))+((px*sj3*x357*x361))+(((-1390.0)*r00*x361))+(((-1390.0)*r01*x359))+((x360*x362)))),IKFAST_ATAN2_MAGTHRESH);
if(!x366.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x365.value)))+(x366.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x367=IKcos(j2);
IkReal x368=IKsin(j2);
IkReal x369=px*px;
IkReal x370=py*py;
IkReal x371=pz*pz;
IkReal x372=(r01*sj0);
IkReal x373=((1.0)*cj1);
IkReal x374=((1.0)*sj1);
IkReal x375=(py*sj0);
IkReal x376=(cj0*r00);
IkReal x377=((2.0)*px);
IkReal x378=((0.0361)*cj1);
IkReal x379=(cj3*cj4);
IkReal x380=(cj1*r00);
IkReal x381=((0.04688229)*cj4);
IkReal x382=(cj0*r02);
IkReal x383=(cj1*py);
IkReal x384=((0.38)*px);
IkReal x385=(px*sj1);
IkReal x386=(r02*sj0);
IkReal x387=(pz*r01);
IkReal x388=((2.0)*sj1);
IkReal x389=((0.38)*r02);
IkReal x390=((0.38)*pz);
IkReal x391=(r02*sj1);
IkReal x392=(cj1*r02);
IkReal x393=(cj0*r01);
IkReal x394=((0.0715294)*cj4);
IkReal x395=(r00*sj1);
IkReal x396=((0.0361)*sj1);
IkReal x397=(py*r00);
IkReal x398=((0.2573)*cj3*sj4);
IkReal x399=((0.139)*x368);
IkReal x400=(cj0*pz*sj1);
IkReal x401=(sj3*x368);
IkReal x402=(pz*r00*sj0);
IkReal x403=(r02*x369);
IkReal x404=((0.139)*x367);
IkReal x405=((0.2573)*x367);
IkReal x406=(sj1*x371);
IkReal x407=(r02*x370);
IkReal x408=(sj3*x367);
evalcond[0]=(((x367*x379))+((sj1*x372))+((sj1*x376))+(((-1.0)*r02*x373))+((cj4*x401)));
evalcond[1]=((((-1.0)*x372*x373))+(((-1.0)*r02*x374))+((cj4*x408))+(((-1.0)*x373*x376))+(((-1.0)*x368*x379)));
evalcond[2]=(((sj1*x375))+x399+(((0.2573)*cj3*x368))+((cj0*x385))+(((-1.0)*pz*x373))+(((-1.0)*sj3*x405)));
evalcond[3]=((0.19)+(((-1.0)*cj0*px*x373))+(((0.2573)*x401))+x404+(((-1.0)*x373*x375))+(((-1.0)*pz*x374))+((cj3*x405)));
evalcond[4]=(((pz*sj0*x380))+(((-1.0)*cj0*x373*x387))+((x382*x383))+(((-1.0)*sj3*sj4*x405))+(((-1.0)*x374*x397))+(((-1.0)*px*x373*x386))+((x368*x398))+((sj4*x399))+((r01*x385)));
evalcond[5]=(((cj0*sj1*x387))+(((-1.0)*x374*x402))+(((-0.19)*x393))+(((-1.0)*x373*x397))+(((-0.2573)*sj4*x401))+(((-1.0)*py*x374*x382))+(((-1.0)*sj4*x404))+((x385*x386))+(((-1.0)*x367*x398))+(((0.19)*r00*sj0))+((cj1*px*r01)));
evalcond[6]=(((cj1*pz*x377*x382))+((x371*x391))+((x381*x408))+(((0.0361)*x391))+(((-1.0)*x368*x394))+(((-1.0)*x371*x373*x376))+(((-1.0)*x374*x403))+(((-1.0)*x374*x407))+(((-1.0)*x371*x372*x373))+(((-0.38)*py*r01))+((x372*x378))+((pz*x377*x395))+((cj1*x369*x376))+((x376*x378))+((py*x387*x388))+((x377*x383*x393))+((cj1*x370*x372))+(((-1.0)*x370*x373*x376))+(((2.0)*pz*x375*x392))+(((-1.0)*r00*x384))+(((-1.0)*x369*x372*x373))+(((-0.08552429)*x368*x379))+(((-1.0)*pz*x389))+((x375*x377*x380)));
evalcond[7]=(((x376*x406))+((x371*x392))+((x381*x401))+((x372*x406))+(((-1.0)*x373*x407))+(((-1.0)*x373*x403))+((pz*x377*x380))+((x367*x394))+((sj1*x370*x376))+(((-1.0)*r02*x378))+((sj1*x369*x372))+(((-1.0)*x372*x390))+(((-1.0)*pz*r02*x375*x388))+((x376*x396))+((x382*x384))+(((-1.0)*x369*x374*x376))+((x372*x396))+(((0.08552429)*x367*x379))+(((-1.0)*py*sj1*x377*x393))+(((2.0)*x383*x387))+(((-1.0)*pz*sj1*x377*x382))+(((-1.0)*x376*x390))+((x375*x389))+(((-1.0)*x375*x377*x395))+(((-1.0)*x370*x372*x374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x409=(cj0*r00);
IkReal x410=(cj1*sj3);
IkReal x411=(sj1*sj3);
IkReal x412=(cj1*cj3);
IkReal x413=(r01*sj0);
IkReal x414=((1.0)*cj3*sj1);
IkReal x415=((1.0)*cj3*x413);
CheckValue<IkReal> x416=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x416.valid){
continue;
}
CheckValue<IkReal> x417 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x414))+(((-1.0)*x411*x413))+(((-1.0)*x409*x412))+(((-1.0)*x409*x411))+(((-1.0)*x412*x413))+((r02*x410)))),IkReal((((x410*x413))+((x409*x410))+(((-1.0)*x413*x414))+((r02*x412))+((r02*x411))+(((-1.0)*x409*x414)))),IKFAST_ATAN2_MAGTHRESH);
if(!x417.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x416.value)))+(x417.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x418=IKcos(j2);
IkReal x419=IKsin(j2);
IkReal x420=px*px;
IkReal x421=py*py;
IkReal x422=pz*pz;
IkReal x423=(r01*sj0);
IkReal x424=((1.0)*cj1);
IkReal x425=((1.0)*sj1);
IkReal x426=(py*sj0);
IkReal x427=(cj0*r00);
IkReal x428=((2.0)*px);
IkReal x429=((0.0361)*cj1);
IkReal x430=(cj3*cj4);
IkReal x431=(cj1*r00);
IkReal x432=((0.04688229)*cj4);
IkReal x433=(cj0*r02);
IkReal x434=(cj1*py);
IkReal x435=((0.38)*px);
IkReal x436=(px*sj1);
IkReal x437=(r02*sj0);
IkReal x438=(pz*r01);
IkReal x439=((2.0)*sj1);
IkReal x440=((0.38)*r02);
IkReal x441=((0.38)*pz);
IkReal x442=(r02*sj1);
IkReal x443=(cj1*r02);
IkReal x444=(cj0*r01);
IkReal x445=((0.0715294)*cj4);
IkReal x446=(r00*sj1);
IkReal x447=((0.0361)*sj1);
IkReal x448=(py*r00);
IkReal x449=((0.2573)*cj3*sj4);
IkReal x450=((0.139)*x419);
IkReal x451=(cj0*pz*sj1);
IkReal x452=(sj3*x419);
IkReal x453=(pz*r00*sj0);
IkReal x454=(r02*x420);
IkReal x455=((0.139)*x418);
IkReal x456=((0.2573)*x418);
IkReal x457=(sj1*x422);
IkReal x458=(r02*x421);
IkReal x459=(sj3*x418);
evalcond[0]=(((cj4*x452))+(((-1.0)*r02*x424))+((x418*x430))+((sj1*x423))+((sj1*x427)));
evalcond[1]=(((cj4*x459))+(((-1.0)*r02*x425))+(((-1.0)*x424*x427))+(((-1.0)*x419*x430))+(((-1.0)*x423*x424)));
evalcond[2]=((((-1.0)*sj3*x456))+((cj0*x436))+x450+(((0.2573)*cj3*x419))+(((-1.0)*pz*x424))+((sj1*x426)));
evalcond[3]=((0.19)+((cj3*x456))+x455+(((-1.0)*x424*x426))+(((0.2573)*x452))+(((-1.0)*pz*x425))+(((-1.0)*cj0*px*x424)));
evalcond[4]=((((-1.0)*px*x424*x437))+(((-1.0)*sj3*sj4*x456))+(((-1.0)*cj0*x424*x438))+((sj4*x450))+((x419*x449))+(((-1.0)*x425*x448))+((r01*x436))+((x433*x434))+((pz*sj0*x431)));
evalcond[5]=(((x436*x437))+(((-1.0)*sj4*x455))+(((-1.0)*x424*x448))+(((-1.0)*py*x425*x433))+(((0.19)*r00*sj0))+(((-0.19)*x444))+(((-0.2573)*sj4*x452))+((cj1*px*r01))+((cj0*sj1*x438))+(((-1.0)*x425*x453))+(((-1.0)*x418*x449)));
evalcond[6]=(((x432*x459))+((x427*x429))+((x422*x442))+((x428*x434*x444))+(((-1.0)*x422*x424*x427))+(((-1.0)*x422*x423*x424))+(((0.0361)*x442))+(((-0.38)*py*r01))+(((2.0)*pz*x426*x443))+((cj1*pz*x428*x433))+(((-1.0)*x421*x424*x427))+(((-1.0)*r00*x435))+((x423*x429))+(((-1.0)*x420*x423*x424))+((py*x438*x439))+(((-1.0)*pz*x440))+((x426*x428*x431))+((cj1*x420*x427))+((cj1*x421*x423))+(((-1.0)*x425*x458))+(((-1.0)*x425*x454))+(((-1.0)*x419*x445))+((pz*x428*x446))+(((-0.08552429)*x419*x430)));
evalcond[7]=((((-1.0)*x424*x458))+(((-1.0)*x424*x454))+((x423*x457))+((sj1*x420*x423))+((x432*x452))+(((-1.0)*x427*x441))+((sj1*x421*x427))+((x422*x443))+(((2.0)*x434*x438))+(((-1.0)*pz*r02*x426*x439))+((x426*x440))+(((-1.0)*x426*x428*x446))+(((-1.0)*x420*x425*x427))+(((-1.0)*pz*sj1*x428*x433))+(((-1.0)*r02*x429))+(((-1.0)*x421*x423*x425))+(((-1.0)*py*sj1*x428*x444))+((x423*x447))+((x418*x445))+(((0.08552429)*x418*x430))+((x433*x435))+((x427*x457))+(((-1.0)*x423*x441))+((x427*x447))+((pz*x428*x431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x460=(cj1*sj0);
IkReal x461=(cj0*cj1);
CheckValue<IkReal> x462=IKPowWithIntegerCheck(cj4,-1);
if(!x462.valid){
continue;
}
if( IKabs(((0.00719424460431655)*(x462.value)*(((((-190.0)*r00*x461))+(((-190.0)*r01*x460))+(((1000.0)*pz*r02))+(((1000.0)*py*r01))+(((-190.0)*r02*sj1))+(((1000.0)*px*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.690964694237614)+(((13.9802654572805)*(px*px)))+(((13.9802654572805)*(py*py)))+(((-5.31250087376659)*pz*sj1))+(((-5.31250087376659)*px*x461))+(((13.9802654572805)*(pz*pz)))+(((-5.31250087376659)*py*x460)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00719424460431655)*(x462.value)*(((((-190.0)*r00*x461))+(((-190.0)*r01*x460))+(((1000.0)*pz*r02))+(((1000.0)*py*r01))+(((-190.0)*r02*sj1))+(((1000.0)*px*r00))))))+IKsqr(((-0.690964694237614)+(((13.9802654572805)*(px*px)))+(((13.9802654572805)*(py*py)))+(((-5.31250087376659)*pz*sj1))+(((-5.31250087376659)*px*x461))+(((13.9802654572805)*(pz*pz)))+(((-5.31250087376659)*py*x460))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00719424460431655)*(x462.value)*(((((-190.0)*r00*x461))+(((-190.0)*r01*x460))+(((1000.0)*pz*r02))+(((1000.0)*py*r01))+(((-190.0)*r02*sj1))+(((1000.0)*px*r00))))), ((-0.690964694237614)+(((13.9802654572805)*(px*px)))+(((13.9802654572805)*(py*py)))+(((-5.31250087376659)*pz*sj1))+(((-5.31250087376659)*px*x461))+(((13.9802654572805)*(pz*pz)))+(((-5.31250087376659)*py*x460))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x463=IKcos(j3);
IkReal x464=px*px;
IkReal x465=pz*pz;
IkReal x466=py*py;
IkReal x467=(r01*sj0);
IkReal x468=((2.0)*py);
IkReal x469=(r00*sj0);
IkReal x470=((0.19)*cj1);
IkReal x471=(px*sj0);
IkReal x472=(py*sj0);
IkReal x473=((1.0)*pz);
IkReal x474=(cj0*r01);
IkReal x475=((0.38)*cj1);
IkReal x476=((0.19)*sj1);
IkReal x477=((0.139)*cj4);
IkReal x478=(cj0*r00);
IkReal x479=(cj0*px);
IkReal x480=(pz*r02);
IkReal x481=((0.38)*r02*sj1);
IkReal x482=((0.0715294)*x463);
IkReal x483=((0.38)*pz*sj1);
IkReal x484=((1.0)*x465);
IkReal x485=((1.0)*x466);
evalcond[0]=(((x477*(IKsin(j3))))+(((-1.0)*px*r00))+((x470*x478))+((r02*x476))+((x467*x470))+(((-1.0)*py*r01))+(((-1.0)*r02*x473)));
evalcond[1]=((0.04942429)+((x472*x475))+(((-1.0)*x484))+(((-1.0)*x485))+(((-1.0)*x464))+x483+x482+((x475*x479)));
evalcond[2]=((((-1.0)*x467*x473))+(((-1.0)*x473*x478))+((r02*x472))+((r02*x479))+((x467*x476))+(((-0.2573)*cj4))+((x476*x478))+(((-1.0)*r02*x470))+(((-1.0)*x463*x477)));
evalcond[3]=((((-0.0361)*x469))+(((-1.0)*px*x468*x478))+((py*r00*x475))+(((-1.0)*x474*x485))+(((-1.0)*x474*x483))+((x465*x474))+(((-1.0)*cj0*x468*x480))+(((-1.0)*x469*x485))+(((-1.0)*x469*x484))+((cj0*py*x481))+(((0.0361)*x474))+(((2.0)*x471*x480))+((x469*x483))+(((-1.0)*px*r01*x475))+((x464*x474))+(((-0.08552429)*sj4))+(((-1.0)*sj4*x482))+((px*x467*x468))+(((-1.0)*x471*x481))+((x464*x469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x486=(cj3*cj4);
j2eval[0]=((((1.85107913669065)*cj4))+x486);
j2eval[1]=IKsign(((((1390.0)*x486))+(((2573.0)*cj4))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.19565227724544)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-8552429.0)+(((-7152940.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x487=((25730000.0)*cj1);
IkReal x488=(cj3*pz);
IkReal x489=(py*sj0);
IkReal x490=((25730000.0)*sj1);
IkReal x491=(pz*sj3);
IkReal x492=(cj0*px);
IkReal x493=((13900000.0)*cj1);
IkReal x494=((13900000.0)*sj1);
IkReal x495=(sj1*x492);
CheckValue<IkReal> x496 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x487*x492))+((x489*x494))+((cj3*x490*x492))+(((-1.0)*x490*x491))+(((-1.0)*x487*x488))+(((4888700.0)*sj3))+((cj3*x489*x490))+(((-1.0)*pz*x493))+(((-1.0)*sj3*x487*x489))+((x492*x494)))),IkReal(((2641000.0)+(((-1.0)*x488*x490))+(((-1.0)*cj3*x487*x489))+(((-1.0)*sj3*x490*x492))+(((-1.0)*cj3*x487*x492))+(((-1.0)*x489*x493))+(((-1.0)*sj3*x489*x490))+(((-1.0)*pz*x494))+((x487*x491))+(((4888700.0)*cj3))+(((-1.0)*x492*x493)))),IKFAST_ATAN2_MAGTHRESH);
if(!x496.valid){
continue;
}
CheckValue<IkReal> x497=IKPowWithIntegerCheck(IKsign(((-8552429.0)+(((-7152940.0)*cj3)))),-1);
if(!x497.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x496.value)+(((1.5707963267949)*(x497.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x498=IKsin(j2);
IkReal x499=IKcos(j2);
IkReal x500=((0.2573)*sj3);
IkReal x501=(px*sj1);
IkReal x502=((0.2573)*cj3);
IkReal x503=(py*sj1);
IkReal x504=((1.0)*r00);
IkReal x505=(cj1*sj0);
IkReal x506=((1.0)*px);
IkReal x507=((1.0)*pz);
IkReal x508=(cj0*r01);
IkReal x509=(pz*sj1);
IkReal x510=(cj0*cj1);
IkReal x511=((0.139)*x498);
IkReal x512=((0.139)*x499);
IkReal x513=(x498*x502);
IkReal x514=(x499*x500);
IkReal x515=(x498*x500);
IkReal x516=(x499*x502);
IkReal x517=(x513+x511);
IkReal x518=(x516+x515+x512);
evalcond[0]=(((sj0*x503))+x517+((cj0*x501))+(((-1.0)*x514))+(((-1.0)*cj1*x507)));
evalcond[1]=((0.19)+(((-1.0)*sj1*x507))+x518+(((-1.0)*x506*x510))+(((-1.0)*py*x505)));
evalcond[2]=(((pz*r00*x505))+(((-1.0)*cj1*x507*x508))+((py*r02*x510))+(((-1.0)*x503*x504))+((r01*x501))+x517+(((-1.0)*r02*x505*x506))+(((-1.0)*x514)));
evalcond[3]=(((x508*x509))+(((-1.0)*sj0*x504*x509))+((r02*sj0*x501))+(((-0.19)*x508))+(((-1.0)*cj0*r02*x503))+(((0.19)*r00*sj0))+(((-1.0)*x518))+((cj1*px*r01))+(((-1.0)*cj1*py*x504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.19565227724544)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-8552429.0)+(((-7152940.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x519=((25730000.0)*cj1);
IkReal x520=(cj3*pz);
IkReal x521=(py*sj0);
IkReal x522=((25730000.0)*sj1);
IkReal x523=(pz*sj3);
IkReal x524=(cj0*px);
IkReal x525=((13900000.0)*cj1);
IkReal x526=((13900000.0)*sj1);
IkReal x527=(sj1*x524);
CheckValue<IkReal> x528 = IKatan2WithCheck(IkReal((((cj3*x521*x522))+(((-1.0)*sj3*x519*x524))+(((-1.0)*sj3*x519*x521))+((cj3*x522*x524))+((x521*x526))+((x524*x526))+(((-1.0)*pz*x525))+(((4888700.0)*sj3))+(((-1.0)*x522*x523))+(((-1.0)*x519*x520)))),IkReal(((2641000.0)+(((-1.0)*x524*x525))+((x519*x523))+(((-1.0)*x520*x522))+(((-1.0)*x521*x525))+(((-1.0)*cj3*x519*x524))+(((-1.0)*cj3*x519*x521))+(((-1.0)*pz*x526))+(((4888700.0)*cj3))+(((-1.0)*sj3*x522*x524))+(((-1.0)*sj3*x521*x522)))),IKFAST_ATAN2_MAGTHRESH);
if(!x528.valid){
continue;
}
CheckValue<IkReal> x529=IKPowWithIntegerCheck(IKsign(((-8552429.0)+(((-7152940.0)*cj3)))),-1);
if(!x529.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x528.value)+(((1.5707963267949)*(x529.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x530=IKsin(j2);
IkReal x531=IKcos(j2);
IkReal x532=((0.2573)*sj3);
IkReal x533=(px*sj1);
IkReal x534=((0.2573)*cj3);
IkReal x535=(py*sj1);
IkReal x536=((1.0)*r00);
IkReal x537=(cj1*sj0);
IkReal x538=((1.0)*px);
IkReal x539=((1.0)*pz);
IkReal x540=(cj0*r01);
IkReal x541=(pz*sj1);
IkReal x542=(cj0*cj1);
IkReal x543=((0.139)*x530);
IkReal x544=((0.139)*x531);
IkReal x545=(x531*x532);
IkReal x546=(x530*x534);
IkReal x547=(x530*x532);
IkReal x548=(x531*x534);
IkReal x549=(x546+x543);
IkReal x550=(x544+x547+x548);
evalcond[0]=(((sj0*x535))+((cj0*x533))+(((-1.0)*cj1*x539))+(((-1.0)*x545))+x549);
evalcond[1]=((0.19)+(((-1.0)*sj1*x539))+(((-1.0)*py*x537))+(((-1.0)*x538*x542))+x550);
evalcond[2]=(((pz*r00*x537))+(((-1.0)*r02*x537*x538))+(((-1.0)*x549))+((py*r02*x542))+x545+(((-1.0)*x535*x536))+(((-1.0)*cj1*x539*x540))+((r01*x533)));
evalcond[3]=((((-1.0)*cj1*py*x536))+((r02*sj0*x533))+(((-1.0)*cj0*r02*x535))+((x540*x541))+(((-1.0)*sj0*x536*x541))+x550+(((0.19)*r00*sj0))+((cj1*px*r01))+(((-0.19)*x540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x551=((2.52334090335604)*sj1);
IkReal x552=(cj0*px);
IkReal x553=((2.52334090335604)*cj1);
IkReal x554=(py*sj0);
if( IKabs((((pz*x553))+(((-1.0)*x551*x554))+(((-1.0)*x551*x552)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.479434771637648)+((pz*x551))+((x552*x553))+((x553*x554)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((pz*x553))+(((-1.0)*x551*x554))+(((-1.0)*x551*x552))))+IKsqr(((-0.479434771637648)+((pz*x551))+((x552*x553))+((x553*x554))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((pz*x553))+(((-1.0)*x551*x554))+(((-1.0)*x551*x552))), ((-0.479434771637648)+((pz*x551))+((x552*x553))+((x553*x554))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x555=IKsin(j2);
IkReal x556=IKcos(j2);
IkReal x557=px*px;
IkReal x558=py*py;
IkReal x559=pz*pz;
IkReal x560=(px*sj1);
IkReal x561=((0.15705369)*cj4);
IkReal x562=(cj0*r00);
IkReal x563=(cj1*sj0);
IkReal x564=((1.0)*r01);
IkReal x565=(sj0*sj1);
IkReal x566=((1.0)*sj1);
IkReal x567=(py*r00);
IkReal x568=((1.0)*cj1);
IkReal x569=(px*r02);
IkReal x570=((2.0)*pz);
IkReal x571=(cj0*r02);
IkReal x572=((0.38)*pz);
IkReal x573=(r01*sj0);
IkReal x574=(r01*sj1);
IkReal x575=(cj0*pz);
IkReal x576=(pz*r00);
IkReal x577=((0.0361)*cj1);
IkReal x578=((0.0361)*r01);
IkReal x579=((0.38)*py);
IkReal x580=(r02*sj0);
IkReal x581=((0.0361)*sj1);
IkReal x582=(py*r01);
IkReal x583=((2.0)*cj0);
IkReal x584=(cj1*px);
IkReal x585=(sj1*x559);
IkReal x586=(r02*x558);
IkReal x587=(r02*x557);
IkReal x588=((0.3963)*x555);
IkReal x589=((0.3963)*x556);
IkReal x590=(py*r02*x570);
evalcond[0]=(((r01*x565))+((cj4*x556))+((sj1*x562))+(((-1.0)*r02*x568)));
evalcond[1]=((((-1.0)*pz*x568))+((cj0*x560))+x588+((py*x565)));
evalcond[2]=((((-1.0)*cj4*x555))+(((-1.0)*x562*x568))+(((-1.0)*x563*x564))+(((-1.0)*r02*x566)));
evalcond[3]=((0.19)+(((-1.0)*cj0*px*x568))+(((-1.0)*pz*x566))+(((-1.0)*py*x563))+x589);
evalcond[4]=((((-1.0)*x566*x567))+((x563*x576))+((r01*x560))+((cj1*py*x571))+(((-1.0)*x563*x569))+(((-1.0)*cj1*x564*x575))+((sj4*x588)));
evalcond[5]=((((-1.0)*sj4*x589))+((x574*x575))+((x560*x580))+(((-1.0)*py*x566*x571))+(((-0.19)*cj0*r01))+((r01*x584))+(((0.19)*r00*sj0))+(((-1.0)*x567*x568))+(((-1.0)*x565*x576)));
evalcond[6]=((((-1.0)*x559*x563*x564))+((cj0*cj1*x569*x570))+((py*x570*x574))+((x563*x578))+((r02*x581))+((r02*x585))+(((-1.0)*r01*x579))+((r01*x558*x563))+(((-1.0)*x555*x561))+((r00*x560*x570))+((x562*x577))+(((-1.0)*x557*x563*x564))+(((2.0)*px*x563*x567))+(((-1.0)*r02*x572))+((cj1*x557*x562))+((x563*x590))+(((-1.0)*x558*x562*x568))+(((-1.0)*x566*x587))+(((-1.0)*x566*x586))+(((-1.0)*x559*x562*x568))+(((-0.38)*px*r00))+((x582*x583*x584)));
evalcond[7]=(((cj1*x570*x582))+((x562*x585))+((x562*x581))+((r01*x559*x565))+(((-1.0)*x558*x564*x565))+((x579*x580))+(((0.38)*cj0*x569))+(((-1.0)*x565*x590))+((sj1*x558*x562))+(((-1.0)*x557*x562*x566))+(((-2.0)*sj0*x560*x567))+((x556*x561))+(((-1.0)*x568*x587))+(((-1.0)*x568*x586))+((r00*x570*x584))+(((-1.0)*x560*x582*x583))+((x565*x578))+(((-1.0)*x560*x570*x571))+((r01*x557*x565))+(((-1.0)*r02*x577))+((cj1*r02*x559))+(((-1.0)*x572*x573))+(((-1.0)*x562*x572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x591=((8.4530853761623)*sj1);
IkReal x592=(cj0*px);
IkReal x593=((8.4530853761623)*cj1);
IkReal x594=(py*sj0);
if( IKabs(((((-1.0)*pz*x593))+((x591*x594))+((x591*x592)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.60608622147084)+(((-1.0)*pz*x591))+(((-1.0)*x592*x593))+(((-1.0)*x593*x594)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*pz*x593))+((x591*x594))+((x591*x592))))+IKsqr(((1.60608622147084)+(((-1.0)*pz*x591))+(((-1.0)*x592*x593))+(((-1.0)*x593*x594))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*pz*x593))+((x591*x594))+((x591*x592))), ((1.60608622147084)+(((-1.0)*pz*x591))+(((-1.0)*x592*x593))+(((-1.0)*x593*x594))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x595=IKsin(j2);
IkReal x596=IKcos(j2);
IkReal x597=px*px;
IkReal x598=py*py;
IkReal x599=pz*pz;
IkReal x600=(cj0*sj1);
IkReal x601=(r01*sj0);
IkReal x602=((0.1183)*sj4);
IkReal x603=((1.0)*cj1);
IkReal x604=((0.01399489)*cj4);
IkReal x605=(py*sj0);
IkReal x606=((1.0)*sj1);
IkReal x607=(py*r00);
IkReal x608=(px*r02);
IkReal x609=(r01*sj1);
IkReal x610=((2.0)*py);
IkReal x611=(pz*r00);
IkReal x612=((0.38)*cj0);
IkReal x613=((0.38)*r02);
IkReal x614=(cj0*r00);
IkReal x615=((0.0361)*cj1);
IkReal x616=((0.0361)*sj1);
IkReal x617=(pz*r01);
IkReal x618=(px*r01);
IkReal x619=(cj0*px);
IkReal x620=(cj0*cj1);
IkReal x621=(py*r02);
IkReal x622=(r00*x599);
IkReal x623=((2.0)*pz*r02);
IkReal x624=(r00*x598);
IkReal x625=((2.0)*px*r00);
IkReal x626=(r02*x598);
IkReal x627=(r02*x597);
IkReal x628=(r00*x597);
IkReal x629=(r02*x599);
evalcond[0]=(((sj1*x605))+((px*x600))+(((-1.0)*pz*x603))+(((-0.1183)*x595)));
evalcond[1]=(((r00*x600))+((sj1*x601))+(((-1.0)*cj4*x596))+(((-1.0)*r02*x603)));
evalcond[2]=((((-1.0)*r02*x606))+((cj4*x595))+(((-1.0)*x603*x614))+(((-1.0)*x601*x603)));
evalcond[3]=((0.19)+(((-1.0)*x603*x605))+(((-1.0)*pz*x606))+(((-1.0)*x603*x619))+(((-0.1183)*x596)));
evalcond[4]=((((-1.0)*cj0*x603*x617))+((px*x609))+(((-1.0)*sj0*x603*x608))+(((-1.0)*x606*x607))+((cj1*sj0*x611))+((x620*x621))+(((-1.0)*x595*x602)));
evalcond[5]=((((-1.0)*x603*x607))+((x600*x617))+((sj0*sj1*x608))+(((-1.0)*x600*x621))+(((-0.19)*cj0*r01))+((x596*x602))+((cj1*x618))+(((0.19)*r00*sj0))+(((-1.0)*sj0*x606*x611)));
evalcond[6]=((((-1.0)*x599*x603*x614))+(((-1.0)*x598*x603*x614))+((x595*x604))+((cj1*x598*x601))+(((-1.0)*x597*x601*x603))+(((-1.0)*x606*x627))+(((-1.0)*x606*x626))+(((-0.38)*py*r01))+((x601*x615))+(((2.0)*pz*x608*x620))+((pz*x609*x610))+(((-1.0)*x599*x601*x603))+(((2.0)*px*sj1*x611))+((r02*x616))+((cj1*x605*x623))+((cj1*x605*x625))+((sj1*x629))+((x610*x618*x620))+(((-1.0)*pz*x613))+((x614*x615))+((cj1*x597*x614))+(((-0.38)*px*r00)));
evalcond[7]=(((x608*x612))+((x605*x613))+(((-1.0)*x611*x612))+(((-1.0)*sj1*x605*x625))+(((-1.0)*sj1*x605*x623))+((cj1*x610*x617))+(((-1.0)*x600*x628))+(((-1.0)*x596*x604))+(((-1.0)*x598*x601*x606))+((x601*x616))+(((-0.38)*pz*x601))+((sj1*x599*x601))+((sj1*x597*x601))+(((-2.0)*pz*x600*x608))+(((0.0361)*r00*x600))+(((2.0)*cj1*px*x611))+(((-1.0)*x603*x626))+(((-1.0)*x603*x627))+(((-1.0)*x600*x610*x618))+((x600*x624))+((x600*x622))+((cj1*x629))+(((-1.0)*r02*x615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x641=IKPowWithIntegerCheck(cj4,-1);
if(!x641.valid){
continue;
}
IkReal x630=x641.value;
IkReal x631=(cj1*pz);
IkReal x632=((10000.0)*cj4);
IkReal x633=((2573.0)*cj3);
IkReal x634=(r02*sj1);
IkReal x635=(cj3*x632);
IkReal x636=(py*sj0*sj1);
IkReal x637=(cj0*px*sj1);
IkReal x638=(cj0*cj1*r00);
IkReal x639=((-0.000719424460431655)*x630);
IkReal x640=(cj1*r01*sj0);
CheckValue<IkReal> x642=IKPowWithIntegerCheck(sj3,-1);
if(!x642.valid){
continue;
}
if( IKabs((x639*(((((-1.0)*x631*x632))+(((-2573.0)*x640))+((x632*x636))+((x632*x637))+(((-2573.0)*x638))+(((-2573.0)*x634)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x639*(x642.value)*(((((-1390.0)*x634))+(((-1390.0)*x638))+(((-1.0)*x631*x635))+(((-1.0)*x633*x638))+(((-1.0)*x633*x634))+(((-1390.0)*x640))+(((-1.0)*x633*x640))+((x635*x636))+((x635*x637)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x639*(((((-1.0)*x631*x632))+(((-2573.0)*x640))+((x632*x636))+((x632*x637))+(((-2573.0)*x638))+(((-2573.0)*x634))))))+IKsqr((x639*(x642.value)*(((((-1390.0)*x634))+(((-1390.0)*x638))+(((-1.0)*x631*x635))+(((-1.0)*x633*x638))+(((-1.0)*x633*x634))+(((-1390.0)*x640))+(((-1.0)*x633*x640))+((x635*x636))+((x635*x637))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x639*(((((-1.0)*x631*x632))+(((-2573.0)*x640))+((x632*x636))+((x632*x637))+(((-2573.0)*x638))+(((-2573.0)*x634))))), (x639*(x642.value)*(((((-1390.0)*x634))+(((-1390.0)*x638))+(((-1.0)*x631*x635))+(((-1.0)*x633*x638))+(((-1.0)*x633*x634))+(((-1390.0)*x640))+(((-1.0)*x633*x640))+((x635*x636))+((x635*x637))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x643=IKcos(j2);
IkReal x644=IKsin(j2);
IkReal x645=px*px;
IkReal x646=py*py;
IkReal x647=pz*pz;
IkReal x648=(r01*sj0);
IkReal x649=((1.0)*cj1);
IkReal x650=((1.0)*sj1);
IkReal x651=(py*sj0);
IkReal x652=(cj0*r00);
IkReal x653=((2.0)*px);
IkReal x654=((0.0361)*cj1);
IkReal x655=(cj3*cj4);
IkReal x656=(cj1*r00);
IkReal x657=((0.04688229)*cj4);
IkReal x658=(cj0*r02);
IkReal x659=(cj1*py);
IkReal x660=((0.38)*px);
IkReal x661=(px*sj1);
IkReal x662=(r02*sj0);
IkReal x663=(pz*r01);
IkReal x664=((2.0)*sj1);
IkReal x665=((0.38)*r02);
IkReal x666=((0.38)*pz);
IkReal x667=(r02*sj1);
IkReal x668=(cj1*r02);
IkReal x669=(cj0*r01);
IkReal x670=((0.0715294)*cj4);
IkReal x671=(r00*sj1);
IkReal x672=((0.0361)*sj1);
IkReal x673=(py*r00);
IkReal x674=((0.2573)*cj3*sj4);
IkReal x675=((0.139)*x644);
IkReal x676=(cj0*pz*sj1);
IkReal x677=(sj3*x644);
IkReal x678=(pz*r00*sj0);
IkReal x679=(r02*x645);
IkReal x680=((0.139)*x643);
IkReal x681=((0.2573)*x643);
IkReal x682=(sj1*x647);
IkReal x683=(r02*x646);
IkReal x684=(sj3*x643);
evalcond[0]=(((sj1*x648))+((sj1*x652))+((x643*x655))+(((-1.0)*r02*x649))+((cj4*x677)));
evalcond[1]=(((cj4*x684))+(((-1.0)*x644*x655))+(((-1.0)*x648*x649))+(((-1.0)*r02*x650))+(((-1.0)*x649*x652)));
evalcond[2]=((((0.2573)*cj3*x644))+((cj0*x661))+((sj1*x651))+x675+(((-1.0)*sj3*x681))+(((-1.0)*pz*x649)));
evalcond[3]=((0.19)+(((-1.0)*cj0*px*x649))+x680+(((-1.0)*pz*x650))+(((-1.0)*x649*x651))+(((0.2573)*x677))+((cj3*x681)));
evalcond[4]=(((r01*x661))+((pz*sj0*x656))+(((-1.0)*x650*x673))+(((-1.0)*px*x649*x662))+((x644*x674))+(((-1.0)*cj0*x649*x663))+((sj4*x675))+(((-1.0)*sj3*sj4*x681))+((x658*x659)));
evalcond[5]=((((-1.0)*x643*x674))+(((-1.0)*x650*x678))+(((-1.0)*x649*x673))+(((-0.2573)*sj4*x677))+((cj0*sj1*x663))+((x661*x662))+(((0.19)*r00*sj0))+(((-0.19)*x669))+(((-1.0)*py*x650*x658))+(((-1.0)*sj4*x680))+((cj1*px*r01)));
evalcond[6]=((((-0.08552429)*x644*x655))+(((0.0361)*x667))+((py*x663*x664))+(((-1.0)*x650*x679))+(((-1.0)*x647*x648*x649))+((pz*x653*x671))+((cj1*x645*x652))+(((-1.0)*r00*x660))+((x652*x654))+(((-0.38)*py*r01))+((cj1*x646*x648))+((x648*x654))+(((-1.0)*x650*x683))+(((2.0)*pz*x651*x668))+((x653*x659*x669))+((cj1*pz*x653*x658))+(((-1.0)*x646*x649*x652))+(((-1.0)*pz*x665))+((x651*x653*x656))+(((-1.0)*x647*x649*x652))+((x647*x667))+(((-1.0)*x645*x648*x649))+((x657*x684))+(((-1.0)*x644*x670)));
evalcond[7]=((((-1.0)*x648*x666))+(((0.08552429)*x643*x655))+((x652*x682))+((x651*x665))+(((-1.0)*pz*sj1*x653*x658))+(((-1.0)*x649*x679))+(((-1.0)*x649*x683))+(((-1.0)*pz*r02*x651*x664))+(((-1.0)*x651*x653*x671))+((x648*x682))+(((-1.0)*x646*x648*x650))+(((-1.0)*py*sj1*x653*x669))+((x643*x670))+((x648*x672))+(((-1.0)*r02*x654))+(((2.0)*x659*x663))+((sj1*x645*x648))+((x658*x660))+((x647*x668))+(((-1.0)*x652*x666))+((x657*x677))+((sj1*x646*x652))+((pz*x653*x656))+((x652*x672))+(((-1.0)*x645*x650*x652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x685=((10000.0)*cj4);
IkReal x686=(cj1*sj3);
IkReal x687=(sj0*sj1);
IkReal x688=((2573.0)*r02);
IkReal x689=(cj0*sj1);
IkReal x690=(cj1*cj3);
IkReal x691=((2573.0)*r01);
IkReal x692=((2573.0)*r00);
CheckValue<IkReal> x693=IKPowWithIntegerCheck(IKsign(((((1390.0)*cj3*cj4))+(((2573.0)*cj4)))),-1);
if(!x693.valid){
continue;
}
CheckValue<IkReal> x694 = IKatan2WithCheck(IkReal((((x686*x688))+((pz*x685*x690))+(((-1.0)*cj3*px*x685*x689))+(((-1.0)*sj3*x687*x691))+(((-1.0)*sj3*x689*x692))+(((-1.0)*cj3*py*x685*x687)))),IkReal(((((-1390.0)*r00*x689))+(((-1.0)*pz*x685*x686))+((x688*x690))+(((1390.0)*cj1*r02))+((py*sj3*x685*x687))+(((-1.0)*cj3*x687*x691))+((px*sj3*x685*x689))+(((-1390.0)*r01*x687))+(((-1.0)*cj3*x689*x692)))),IKFAST_ATAN2_MAGTHRESH);
if(!x694.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x693.value)))+(x694.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x695=IKcos(j2);
IkReal x696=IKsin(j2);
IkReal x697=px*px;
IkReal x698=py*py;
IkReal x699=pz*pz;
IkReal x700=(r01*sj0);
IkReal x701=((1.0)*cj1);
IkReal x702=((1.0)*sj1);
IkReal x703=(py*sj0);
IkReal x704=(cj0*r00);
IkReal x705=((2.0)*px);
IkReal x706=((0.0361)*cj1);
IkReal x707=(cj3*cj4);
IkReal x708=(cj1*r00);
IkReal x709=((0.04688229)*cj4);
IkReal x710=(cj0*r02);
IkReal x711=(cj1*py);
IkReal x712=((0.38)*px);
IkReal x713=(px*sj1);
IkReal x714=(r02*sj0);
IkReal x715=(pz*r01);
IkReal x716=((2.0)*sj1);
IkReal x717=((0.38)*r02);
IkReal x718=((0.38)*pz);
IkReal x719=(r02*sj1);
IkReal x720=(cj1*r02);
IkReal x721=(cj0*r01);
IkReal x722=((0.0715294)*cj4);
IkReal x723=(r00*sj1);
IkReal x724=((0.0361)*sj1);
IkReal x725=(py*r00);
IkReal x726=((0.2573)*cj3*sj4);
IkReal x727=((0.139)*x696);
IkReal x728=(cj0*pz*sj1);
IkReal x729=(sj3*x696);
IkReal x730=(pz*r00*sj0);
IkReal x731=(r02*x697);
IkReal x732=((0.139)*x695);
IkReal x733=((0.2573)*x695);
IkReal x734=(sj1*x699);
IkReal x735=(r02*x698);
IkReal x736=(sj3*x695);
evalcond[0]=(((cj4*x729))+(((-1.0)*r02*x701))+((x695*x707))+((sj1*x704))+((sj1*x700)));
evalcond[1]=((((-1.0)*r02*x702))+((cj4*x736))+(((-1.0)*x696*x707))+(((-1.0)*x701*x704))+(((-1.0)*x700*x701)));
evalcond[2]=((((-1.0)*pz*x701))+(((0.2573)*cj3*x696))+((cj0*x713))+(((-1.0)*sj3*x733))+((sj1*x703))+x727);
evalcond[3]=((0.19)+(((0.2573)*x729))+(((-1.0)*pz*x702))+(((-1.0)*cj0*px*x701))+((cj3*x733))+x732+(((-1.0)*x701*x703)));
evalcond[4]=((((-1.0)*x702*x725))+(((-1.0)*px*x701*x714))+((r01*x713))+((x710*x711))+((pz*sj0*x708))+((x696*x726))+(((-1.0)*cj0*x701*x715))+((sj4*x727))+(((-1.0)*sj3*sj4*x733)));
evalcond[5]=((((-1.0)*x701*x725))+(((-1.0)*x702*x730))+(((-1.0)*x695*x726))+(((-0.2573)*sj4*x729))+(((0.19)*r00*sj0))+((cj0*sj1*x715))+((cj1*px*r01))+(((-0.19)*x721))+(((-1.0)*py*x702*x710))+(((-1.0)*sj4*x732))+((x713*x714)));
evalcond[6]=((((-1.0)*pz*x717))+(((-1.0)*x702*x731))+(((-1.0)*x702*x735))+((x703*x705*x708))+((x700*x706))+((py*x715*x716))+((cj1*x697*x704))+(((-1.0)*x698*x701*x704))+(((-0.38)*py*r01))+((pz*x705*x723))+((x709*x736))+((cj1*pz*x705*x710))+(((-0.08552429)*x696*x707))+(((-1.0)*x699*x701*x704))+(((-1.0)*x697*x700*x701))+((x704*x706))+(((-1.0)*x696*x722))+((cj1*x698*x700))+(((-1.0)*x699*x700*x701))+((x705*x711*x721))+(((-1.0)*r00*x712))+((x699*x719))+(((0.0361)*x719))+(((2.0)*pz*x703*x720)));
evalcond[7]=(((x700*x734))+((x700*x724))+(((-1.0)*r02*x706))+(((-1.0)*x701*x735))+(((-1.0)*x701*x731))+((sj1*x697*x700))+(((-1.0)*x698*x700*x702))+((pz*x705*x708))+(((-1.0)*x697*x702*x704))+(((-1.0)*pz*r02*x703*x716))+((x709*x729))+((x703*x717))+(((-1.0)*pz*sj1*x705*x710))+((x710*x712))+(((-1.0)*py*sj1*x705*x721))+(((0.08552429)*x695*x707))+(((-1.0)*x704*x718))+((x695*x722))+((sj1*x698*x704))+((x699*x720))+(((-1.0)*x703*x705*x723))+((x704*x724))+(((2.0)*x711*x715))+((x704*x734))+(((-1.0)*x700*x718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x737=(cj0*r00);
IkReal x738=(cj1*sj3);
IkReal x739=(sj1*sj3);
IkReal x740=(cj1*cj3);
IkReal x741=(r01*sj0);
IkReal x742=((1.0)*cj3*sj1);
IkReal x743=((1.0)*cj3*x741);
CheckValue<IkReal> x744=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x744.valid){
continue;
}
CheckValue<IkReal> x745 = IKatan2WithCheck(IkReal(((((-1.0)*x737*x740))+(((-1.0)*r02*x742))+((r02*x738))+(((-1.0)*x740*x741))+(((-1.0)*x739*x741))+(((-1.0)*x737*x739)))),IkReal((((r02*x740))+((x738*x741))+(((-1.0)*x737*x742))+((r02*x739))+(((-1.0)*x741*x742))+((x737*x738)))),IKFAST_ATAN2_MAGTHRESH);
if(!x745.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x744.value)))+(x745.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x746=IKcos(j2);
IkReal x747=IKsin(j2);
IkReal x748=px*px;
IkReal x749=py*py;
IkReal x750=pz*pz;
IkReal x751=(r01*sj0);
IkReal x752=((1.0)*cj1);
IkReal x753=((1.0)*sj1);
IkReal x754=(py*sj0);
IkReal x755=(cj0*r00);
IkReal x756=((2.0)*px);
IkReal x757=((0.0361)*cj1);
IkReal x758=(cj3*cj4);
IkReal x759=(cj1*r00);
IkReal x760=((0.04688229)*cj4);
IkReal x761=(cj0*r02);
IkReal x762=(cj1*py);
IkReal x763=((0.38)*px);
IkReal x764=(px*sj1);
IkReal x765=(r02*sj0);
IkReal x766=(pz*r01);
IkReal x767=((2.0)*sj1);
IkReal x768=((0.38)*r02);
IkReal x769=((0.38)*pz);
IkReal x770=(r02*sj1);
IkReal x771=(cj1*r02);
IkReal x772=(cj0*r01);
IkReal x773=((0.0715294)*cj4);
IkReal x774=(r00*sj1);
IkReal x775=((0.0361)*sj1);
IkReal x776=(py*r00);
IkReal x777=((0.2573)*cj3*sj4);
IkReal x778=((0.139)*x747);
IkReal x779=(cj0*pz*sj1);
IkReal x780=(sj3*x747);
IkReal x781=(pz*r00*sj0);
IkReal x782=(r02*x748);
IkReal x783=((0.139)*x746);
IkReal x784=((0.2573)*x746);
IkReal x785=(sj1*x750);
IkReal x786=(r02*x749);
IkReal x787=(sj3*x746);
evalcond[0]=((((-1.0)*r02*x752))+((sj1*x751))+((sj1*x755))+((cj4*x780))+((x746*x758)));
evalcond[1]=((((-1.0)*r02*x753))+((cj4*x787))+(((-1.0)*x751*x752))+(((-1.0)*x752*x755))+(((-1.0)*x747*x758)));
evalcond[2]=(((sj1*x754))+(((0.2573)*cj3*x747))+((cj0*x764))+x778+(((-1.0)*pz*x752))+(((-1.0)*sj3*x784)));
evalcond[3]=((0.19)+(((0.2573)*x780))+(((-1.0)*x752*x754))+x783+(((-1.0)*pz*x753))+(((-1.0)*cj0*px*x752))+((cj3*x784)));
evalcond[4]=((((-1.0)*px*x752*x765))+((sj4*x778))+(((-1.0)*x753*x776))+((x747*x777))+((x761*x762))+(((-1.0)*cj0*x752*x766))+(((-1.0)*sj3*sj4*x784))+((pz*sj0*x759))+((r01*x764)));
evalcond[5]=((((-0.19)*x772))+(((-0.2573)*sj4*x780))+(((-1.0)*x753*x781))+(((-1.0)*x746*x777))+(((-1.0)*x752*x776))+((cj0*sj1*x766))+(((0.19)*r00*sj0))+(((-1.0)*sj4*x783))+((cj1*px*r01))+((x764*x765))+(((-1.0)*py*x753*x761)));
evalcond[6]=(((x750*x770))+(((-1.0)*r00*x763))+(((-1.0)*x749*x752*x755))+((x756*x762*x772))+((x760*x787))+((x751*x757))+((cj1*pz*x756*x761))+((pz*x756*x774))+(((2.0)*pz*x754*x771))+(((-1.0)*x753*x782))+(((-1.0)*x753*x786))+(((0.0361)*x770))+(((-0.08552429)*x747*x758))+(((-0.38)*py*r01))+((py*x766*x767))+(((-1.0)*x747*x773))+((cj1*x748*x755))+(((-1.0)*x750*x751*x752))+((x755*x757))+(((-1.0)*x750*x752*x755))+((cj1*x749*x751))+((x754*x756*x759))+(((-1.0)*pz*x768))+(((-1.0)*x748*x751*x752)));
evalcond[7]=(((x750*x771))+((x755*x785))+(((-1.0)*x748*x753*x755))+(((-1.0)*x749*x751*x753))+((x751*x775))+((pz*x756*x759))+(((-1.0)*x751*x769))+((x760*x780))+((sj1*x749*x755))+(((2.0)*x762*x766))+((x746*x773))+(((-1.0)*r02*x757))+((x761*x763))+(((-1.0)*x755*x769))+((sj1*x748*x751))+((x751*x785))+(((0.08552429)*x746*x758))+(((-1.0)*pz*r02*x754*x767))+(((-1.0)*pz*sj1*x756*x761))+(((-1.0)*x754*x756*x774))+((x755*x775))+((x754*x768))+(((-1.0)*py*sj1*x756*x772))+(((-1.0)*x752*x782))+(((-1.0)*x752*x786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x788=((1000.0)*r02);
IkReal x789=((1000.0)*r00);
IkReal x790=((1000.0)*r01);
IkReal x791=((190.0)*sj1);
IkReal x792=(cj0*r00);
IkReal x793=((190.0)*cj1);
IkReal x794=((190.0)*r01*sj0);
CheckValue<IkReal> x795=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x795.valid){
continue;
}
CheckValue<IkReal> x796 = IKatan2WithCheck(IkReal(((((-1.0)*x792*x793))+((px*x789))+((pz*x788))+((py*x790))+(((-1.0)*r01*sj0*x793))+(((-1.0)*r02*x791)))),IkReal(((((-257.3)*cj4))+((r01*sj0*x791))+(((-1.0)*cj0*pz*x789))+(((-1.0)*pz*sj0*x790))+((py*sj0*x788))+(((-1.0)*r02*x793))+((x791*x792))+((cj0*px*x788)))),IKFAST_ATAN2_MAGTHRESH);
if(!x796.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x795.value)))+(x796.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x797=IKcos(j3);
IkReal x798=px*px;
IkReal x799=pz*pz;
IkReal x800=py*py;
IkReal x801=(r01*sj0);
IkReal x802=((2.0)*py);
IkReal x803=(r00*sj0);
IkReal x804=((0.19)*cj1);
IkReal x805=(px*sj0);
IkReal x806=(py*sj0);
IkReal x807=((1.0)*pz);
IkReal x808=(cj0*r01);
IkReal x809=((0.38)*cj1);
IkReal x810=((0.19)*sj1);
IkReal x811=((0.139)*cj4);
IkReal x812=(cj0*r00);
IkReal x813=(cj0*px);
IkReal x814=(pz*r02);
IkReal x815=((0.38)*r02*sj1);
IkReal x816=((0.0715294)*x797);
IkReal x817=((0.38)*pz*sj1);
IkReal x818=((1.0)*x799);
IkReal x819=((1.0)*x800);
evalcond[0]=((((-1.0)*px*r00))+((x811*(IKsin(j3))))+(((-1.0)*r02*x807))+((x804*x812))+((x801*x804))+(((-1.0)*py*r01))+((r02*x810)));
evalcond[1]=((0.04942429)+((x809*x813))+((x806*x809))+(((-1.0)*x819))+(((-1.0)*x818))+(((-1.0)*x798))+x816+x817);
evalcond[2]=(((x801*x810))+((x810*x812))+(((-1.0)*r02*x804))+((r02*x806))+(((-1.0)*x807*x812))+(((-0.2573)*cj4))+(((-1.0)*x801*x807))+(((-1.0)*x797*x811))+((r02*x813)));
evalcond[3]=((((-1.0)*x803*x818))+(((-1.0)*x803*x819))+(((-1.0)*px*x802*x812))+(((-0.0361)*x803))+(((-1.0)*cj0*x802*x814))+(((-1.0)*x808*x819))+(((-1.0)*x808*x817))+(((-1.0)*sj4*x816))+((x798*x803))+((x798*x808))+((x799*x808))+((py*r00*x809))+(((-0.08552429)*sj4))+(((2.0)*x805*x814))+(((-1.0)*px*r01*x809))+(((-1.0)*x805*x815))+((px*x801*x802))+(((0.0361)*x808))+((x803*x817))+((cj0*py*x815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x820=(cj3*cj4);
j2eval[0]=((((1.85107913669065)*cj4))+x820);
j2eval[1]=IKsign(((((1390.0)*x820))+(((2573.0)*cj4))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.19565227724544)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-8552429.0)+(((-7152940.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x821=((25730000.0)*cj1);
IkReal x822=(cj3*pz);
IkReal x823=(py*sj0);
IkReal x824=((25730000.0)*sj1);
IkReal x825=(pz*sj3);
IkReal x826=(cj0*px);
IkReal x827=((13900000.0)*cj1);
IkReal x828=((13900000.0)*sj1);
IkReal x829=(sj1*x826);
CheckValue<IkReal> x830=IKPowWithIntegerCheck(IKsign(((-8552429.0)+(((-7152940.0)*cj3)))),-1);
if(!x830.valid){
continue;
}
CheckValue<IkReal> x831 = IKatan2WithCheck(IkReal(((((-1.0)*pz*x827))+(((-1.0)*sj3*x821*x823))+(((-1.0)*sj3*x821*x826))+((cj3*x824*x826))+(((-1.0)*x824*x825))+(((-1.0)*x821*x822))+((x823*x828))+(((4888700.0)*sj3))+((cj3*x823*x824))+((x826*x828)))),IkReal(((2641000.0)+(((-1.0)*x822*x824))+((x821*x825))+(((-1.0)*pz*x828))+(((-1.0)*cj3*x821*x826))+(((-1.0)*cj3*x821*x823))+(((-1.0)*x823*x827))+(((-1.0)*x826*x827))+(((-1.0)*sj3*x824*x826))+(((4888700.0)*cj3))+(((-1.0)*sj3*x823*x824)))),IKFAST_ATAN2_MAGTHRESH);
if(!x831.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x830.value)))+(x831.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x832=IKsin(j2);
IkReal x833=IKcos(j2);
IkReal x834=((0.2573)*sj3);
IkReal x835=(px*sj1);
IkReal x836=((0.2573)*cj3);
IkReal x837=(py*sj1);
IkReal x838=((1.0)*r00);
IkReal x839=(cj1*sj0);
IkReal x840=((1.0)*px);
IkReal x841=((1.0)*pz);
IkReal x842=(cj0*r01);
IkReal x843=(pz*sj1);
IkReal x844=(cj0*cj1);
IkReal x845=((0.139)*x832);
IkReal x846=((0.139)*x833);
IkReal x847=(x832*x836);
IkReal x848=(x833*x834);
IkReal x849=(x832*x834);
IkReal x850=(x833*x836);
IkReal x851=(x845+x847);
IkReal x852=(x850+x846+x849);
evalcond[0]=(((cj0*x835))+(((-1.0)*x848))+x851+(((-1.0)*cj1*x841))+((sj0*x837)));
evalcond[1]=((0.19)+(((-1.0)*x840*x844))+x852+(((-1.0)*py*x839))+(((-1.0)*sj1*x841)));
evalcond[2]=((((-1.0)*r02*x839*x840))+(((-1.0)*x837*x838))+(((-1.0)*cj1*x841*x842))+((r01*x835))+(((-1.0)*x848))+x851+((pz*r00*x839))+((py*r02*x844)));
evalcond[3]=((((-1.0)*x852))+(((-1.0)*cj0*r02*x837))+((r02*sj0*x835))+(((-1.0)*sj0*x838*x843))+(((-1.0)*cj1*py*x838))+((x842*x843))+(((0.19)*r00*sj0))+(((-0.19)*x842))+((cj1*px*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.19565227724544)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-8552429.0)+(((-7152940.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x853=((25730000.0)*cj1);
IkReal x854=(cj3*pz);
IkReal x855=(py*sj0);
IkReal x856=((25730000.0)*sj1);
IkReal x857=(pz*sj3);
IkReal x858=(cj0*px);
IkReal x859=((13900000.0)*cj1);
IkReal x860=((13900000.0)*sj1);
IkReal x861=(sj1*x858);
CheckValue<IkReal> x862 = IKatan2WithCheck(IkReal(((((-1.0)*x853*x854))+((cj3*x856*x858))+((x855*x860))+((x858*x860))+(((-1.0)*sj3*x853*x858))+(((-1.0)*sj3*x853*x855))+(((-1.0)*pz*x859))+(((4888700.0)*sj3))+(((-1.0)*x856*x857))+((cj3*x855*x856)))),IkReal(((2641000.0)+(((-1.0)*sj3*x855*x856))+(((-1.0)*pz*x860))+(((-1.0)*cj3*x853*x858))+(((-1.0)*cj3*x853*x855))+(((-1.0)*x858*x859))+(((-1.0)*sj3*x856*x858))+(((-1.0)*x855*x859))+((x853*x857))+(((4888700.0)*cj3))+(((-1.0)*x854*x856)))),IKFAST_ATAN2_MAGTHRESH);
if(!x862.valid){
continue;
}
CheckValue<IkReal> x863=IKPowWithIntegerCheck(IKsign(((-8552429.0)+(((-7152940.0)*cj3)))),-1);
if(!x863.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x862.value)+(((1.5707963267949)*(x863.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x864=IKsin(j2);
IkReal x865=IKcos(j2);
IkReal x866=((0.2573)*sj3);
IkReal x867=(px*sj1);
IkReal x868=((0.2573)*cj3);
IkReal x869=(py*sj1);
IkReal x870=((1.0)*r00);
IkReal x871=(cj1*sj0);
IkReal x872=((1.0)*px);
IkReal x873=((1.0)*pz);
IkReal x874=(cj0*r01);
IkReal x875=(pz*sj1);
IkReal x876=(cj0*cj1);
IkReal x877=((0.139)*x864);
IkReal x878=((0.139)*x865);
IkReal x879=(x865*x866);
IkReal x880=(x864*x868);
IkReal x881=(x864*x866);
IkReal x882=(x865*x868);
IkReal x883=(x877+x880);
IkReal x884=(x878+x881+x882);
evalcond[0]=(((cj0*x867))+((sj0*x869))+(((-1.0)*cj1*x873))+x883+(((-1.0)*x879)));
evalcond[1]=((0.19)+(((-1.0)*x872*x876))+(((-1.0)*sj1*x873))+(((-1.0)*py*x871))+x884);
evalcond[2]=(((r01*x867))+((pz*r00*x871))+(((-1.0)*x869*x870))+((py*r02*x876))+(((-1.0)*x883))+(((-1.0)*r02*x871*x872))+(((-1.0)*cj1*x873*x874))+x879);
evalcond[3]=((((-1.0)*sj0*x870*x875))+((x874*x875))+(((-0.19)*x874))+(((0.19)*r00*sj0))+x884+((r02*sj0*x867))+(((-1.0)*cj1*py*x870))+((cj1*px*r01))+(((-1.0)*cj0*r02*x869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x885=((2.52334090335604)*sj1);
IkReal x886=(cj0*px);
IkReal x887=((2.52334090335604)*cj1);
IkReal x888=(py*sj0);
if( IKabs((((pz*x887))+(((-1.0)*x885*x886))+(((-1.0)*x885*x888)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.479434771637648)+((x887*x888))+((x886*x887))+((pz*x885)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((pz*x887))+(((-1.0)*x885*x886))+(((-1.0)*x885*x888))))+IKsqr(((-0.479434771637648)+((x887*x888))+((x886*x887))+((pz*x885))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((pz*x887))+(((-1.0)*x885*x886))+(((-1.0)*x885*x888))), ((-0.479434771637648)+((x887*x888))+((x886*x887))+((pz*x885))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x889=IKsin(j2);
IkReal x890=IKcos(j2);
IkReal x891=px*px;
IkReal x892=py*py;
IkReal x893=pz*pz;
IkReal x894=(px*sj1);
IkReal x895=((0.15705369)*cj4);
IkReal x896=(cj0*r00);
IkReal x897=(cj1*sj0);
IkReal x898=((1.0)*r01);
IkReal x899=(sj0*sj1);
IkReal x900=((1.0)*sj1);
IkReal x901=(py*r00);
IkReal x902=((1.0)*cj1);
IkReal x903=(px*r02);
IkReal x904=((2.0)*pz);
IkReal x905=(cj0*r02);
IkReal x906=((0.38)*pz);
IkReal x907=(r01*sj0);
IkReal x908=(r01*sj1);
IkReal x909=(cj0*pz);
IkReal x910=(pz*r00);
IkReal x911=((0.0361)*cj1);
IkReal x912=((0.0361)*r01);
IkReal x913=((0.38)*py);
IkReal x914=(r02*sj0);
IkReal x915=((0.0361)*sj1);
IkReal x916=(py*r01);
IkReal x917=((2.0)*cj0);
IkReal x918=(cj1*px);
IkReal x919=(sj1*x893);
IkReal x920=(r02*x892);
IkReal x921=(r02*x891);
IkReal x922=((0.3963)*x889);
IkReal x923=((0.3963)*x890);
IkReal x924=(py*r02*x904);
evalcond[0]=(((sj1*x896))+((r01*x899))+((cj4*x890))+(((-1.0)*r02*x902)));
evalcond[1]=(((cj0*x894))+((py*x899))+(((-1.0)*pz*x902))+x922);
evalcond[2]=((((-1.0)*x896*x902))+(((-1.0)*cj4*x889))+(((-1.0)*r02*x900))+(((-1.0)*x897*x898)));
evalcond[3]=((0.19)+(((-1.0)*pz*x900))+(((-1.0)*cj0*px*x902))+(((-1.0)*py*x897))+x923);
evalcond[4]=((((-1.0)*x900*x901))+(((-1.0)*x897*x903))+((r01*x894))+((sj4*x922))+((x897*x910))+((cj1*py*x905))+(((-1.0)*cj1*x898*x909)));
evalcond[5]=(((x894*x914))+(((-1.0)*sj4*x923))+(((-0.19)*cj0*r01))+(((0.19)*r00*sj0))+(((-1.0)*x901*x902))+((x908*x909))+((r01*x918))+(((-1.0)*x899*x910))+(((-1.0)*py*x900*x905)));
evalcond[6]=((((-1.0)*x892*x896*x902))+((x897*x924))+((cj0*cj1*x903*x904))+((cj1*x891*x896))+(((-1.0)*x893*x897*x898))+(((-1.0)*x893*x896*x902))+(((-1.0)*r01*x913))+((r02*x919))+((r02*x915))+((x897*x912))+(((-1.0)*x889*x895))+(((-1.0)*x900*x921))+(((-1.0)*x900*x920))+(((-1.0)*r02*x906))+((py*x904*x908))+(((-1.0)*x891*x897*x898))+((r00*x894*x904))+(((2.0)*px*x897*x901))+((x896*x911))+((x916*x917*x918))+((r01*x892*x897))+(((-0.38)*px*r00)));
evalcond[7]=((((-1.0)*x896*x906))+(((-1.0)*x894*x904*x905))+(((-1.0)*x892*x898*x899))+(((-1.0)*x894*x916*x917))+(((-1.0)*x899*x924))+((cj1*x904*x916))+(((-1.0)*r02*x911))+((r00*x904*x918))+((x899*x912))+((sj1*x892*x896))+((x890*x895))+(((0.38)*cj0*x903))+((x913*x914))+(((-2.0)*sj0*x894*x901))+((r01*x893*x899))+(((-1.0)*x891*x896*x900))+((x896*x915))+((x896*x919))+((cj1*r02*x893))+(((-1.0)*x902*x921))+(((-1.0)*x902*x920))+((r01*x891*x899))+(((-1.0)*x906*x907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x925=((8.4530853761623)*sj1);
IkReal x926=(cj0*px);
IkReal x927=((8.4530853761623)*cj1);
IkReal x928=(py*sj0);
if( IKabs(((((-1.0)*pz*x927))+((x925*x926))+((x925*x928)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.60608622147084)+(((-1.0)*x927*x928))+(((-1.0)*x926*x927))+(((-1.0)*pz*x925)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*pz*x927))+((x925*x926))+((x925*x928))))+IKsqr(((1.60608622147084)+(((-1.0)*x927*x928))+(((-1.0)*x926*x927))+(((-1.0)*pz*x925))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*pz*x927))+((x925*x926))+((x925*x928))), ((1.60608622147084)+(((-1.0)*x927*x928))+(((-1.0)*x926*x927))+(((-1.0)*pz*x925))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x929=IKsin(j2);
IkReal x930=IKcos(j2);
IkReal x931=px*px;
IkReal x932=py*py;
IkReal x933=pz*pz;
IkReal x934=(cj0*sj1);
IkReal x935=(r01*sj0);
IkReal x936=((0.1183)*sj4);
IkReal x937=((1.0)*cj1);
IkReal x938=((0.01399489)*cj4);
IkReal x939=(py*sj0);
IkReal x940=((1.0)*sj1);
IkReal x941=(py*r00);
IkReal x942=(px*r02);
IkReal x943=(r01*sj1);
IkReal x944=((2.0)*py);
IkReal x945=(pz*r00);
IkReal x946=((0.38)*cj0);
IkReal x947=((0.38)*r02);
IkReal x948=(cj0*r00);
IkReal x949=((0.0361)*cj1);
IkReal x950=((0.0361)*sj1);
IkReal x951=(pz*r01);
IkReal x952=(px*r01);
IkReal x953=(cj0*px);
IkReal x954=(cj0*cj1);
IkReal x955=(py*r02);
IkReal x956=(r00*x933);
IkReal x957=((2.0)*pz*r02);
IkReal x958=(r00*x932);
IkReal x959=((2.0)*px*r00);
IkReal x960=(r02*x932);
IkReal x961=(r02*x931);
IkReal x962=(r00*x931);
IkReal x963=(r02*x933);
evalcond[0]=(((sj1*x939))+(((-0.1183)*x929))+(((-1.0)*pz*x937))+((px*x934)));
evalcond[1]=((((-1.0)*cj4*x930))+(((-1.0)*r02*x937))+((sj1*x935))+((r00*x934)));
evalcond[2]=((((-1.0)*r02*x940))+(((-1.0)*x935*x937))+(((-1.0)*x937*x948))+((cj4*x929)));
evalcond[3]=((0.19)+(((-1.0)*pz*x940))+(((-0.1183)*x930))+(((-1.0)*x937*x953))+(((-1.0)*x937*x939)));
evalcond[4]=((((-1.0)*cj0*x937*x951))+(((-1.0)*sj0*x937*x942))+(((-1.0)*x929*x936))+((px*x943))+((cj1*sj0*x945))+(((-1.0)*x940*x941))+((x954*x955)));
evalcond[5]=(((sj0*sj1*x942))+(((-1.0)*x934*x955))+((cj1*x952))+(((-0.19)*cj0*r01))+((x930*x936))+(((-1.0)*sj0*x940*x945))+((x934*x951))+(((0.19)*r00*sj0))+(((-1.0)*x937*x941)));
evalcond[6]=((((2.0)*pz*x942*x954))+(((-1.0)*x933*x937*x948))+(((-1.0)*pz*x947))+((cj1*x932*x935))+((x948*x949))+(((-1.0)*x932*x937*x948))+((cj1*x939*x957))+((cj1*x939*x959))+(((-0.38)*py*r01))+(((-1.0)*x940*x961))+(((-1.0)*x940*x960))+(((2.0)*px*sj1*x945))+((sj1*x963))+(((-1.0)*x933*x935*x937))+(((-1.0)*x931*x935*x937))+((r02*x950))+((x935*x949))+((x944*x952*x954))+((pz*x943*x944))+((x929*x938))+(((-0.38)*px*r00))+((cj1*x931*x948)));
evalcond[7]=((((-1.0)*r02*x949))+(((-1.0)*x932*x935*x940))+((sj1*x933*x935))+(((-1.0)*x930*x938))+(((-1.0)*x934*x944*x952))+(((-1.0)*x945*x946))+((cj1*x963))+((sj1*x931*x935))+((x939*x947))+(((-1.0)*x934*x962))+(((-2.0)*pz*x934*x942))+(((0.0361)*r00*x934))+(((-0.38)*pz*x935))+((x942*x946))+((cj1*x944*x951))+((x934*x958))+((x934*x956))+(((-1.0)*x937*x961))+(((-1.0)*x937*x960))+((x935*x950))+(((2.0)*cj1*px*x945))+(((-1.0)*sj1*x939*x959))+(((-1.0)*sj1*x939*x957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x975=IKPowWithIntegerCheck(cj4,-1);
if(!x975.valid){
continue;
}
IkReal x964=x975.value;
IkReal x965=(cj1*pz);
IkReal x966=((10000.0)*cj4);
IkReal x967=((2573.0)*cj3);
IkReal x968=(r02*sj1);
IkReal x969=(cj3*x966);
IkReal x970=(py*sj0*sj1);
IkReal x971=(cj0*px*sj1);
IkReal x972=(cj0*cj1*r00);
IkReal x973=((-0.000719424460431655)*x964);
IkReal x974=(cj1*r01*sj0);
CheckValue<IkReal> x976=IKPowWithIntegerCheck(sj3,-1);
if(!x976.valid){
continue;
}
if( IKabs((x973*(((((-1.0)*x965*x966))+(((-2573.0)*x974))+(((-2573.0)*x972))+(((-2573.0)*x968))+((x966*x970))+((x966*x971)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x973*(x976.value)*((((x969*x970))+((x969*x971))+(((-1.0)*x965*x969))+(((-1.0)*x967*x968))+(((-1.0)*x967*x974))+(((-1.0)*x967*x972))+(((-1390.0)*x968))+(((-1390.0)*x974))+(((-1390.0)*x972)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x973*(((((-1.0)*x965*x966))+(((-2573.0)*x974))+(((-2573.0)*x972))+(((-2573.0)*x968))+((x966*x970))+((x966*x971))))))+IKsqr((x973*(x976.value)*((((x969*x970))+((x969*x971))+(((-1.0)*x965*x969))+(((-1.0)*x967*x968))+(((-1.0)*x967*x974))+(((-1.0)*x967*x972))+(((-1390.0)*x968))+(((-1390.0)*x974))+(((-1390.0)*x972))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x973*(((((-1.0)*x965*x966))+(((-2573.0)*x974))+(((-2573.0)*x972))+(((-2573.0)*x968))+((x966*x970))+((x966*x971))))), (x973*(x976.value)*((((x969*x970))+((x969*x971))+(((-1.0)*x965*x969))+(((-1.0)*x967*x968))+(((-1.0)*x967*x974))+(((-1.0)*x967*x972))+(((-1390.0)*x968))+(((-1390.0)*x974))+(((-1390.0)*x972))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x977=IKcos(j2);
IkReal x978=IKsin(j2);
IkReal x979=px*px;
IkReal x980=py*py;
IkReal x981=pz*pz;
IkReal x982=(r01*sj0);
IkReal x983=((1.0)*cj1);
IkReal x984=((1.0)*sj1);
IkReal x985=(py*sj0);
IkReal x986=(cj0*r00);
IkReal x987=((2.0)*px);
IkReal x988=((0.0361)*cj1);
IkReal x989=(cj3*cj4);
IkReal x990=(cj1*r00);
IkReal x991=((0.04688229)*cj4);
IkReal x992=(cj0*r02);
IkReal x993=(cj1*py);
IkReal x994=((0.38)*px);
IkReal x995=(px*sj1);
IkReal x996=(r02*sj0);
IkReal x997=(pz*r01);
IkReal x998=((2.0)*sj1);
IkReal x999=((0.38)*r02);
IkReal x1000=((0.38)*pz);
IkReal x1001=(r02*sj1);
IkReal x1002=(cj1*r02);
IkReal x1003=(cj0*r01);
IkReal x1004=((0.0715294)*cj4);
IkReal x1005=(r00*sj1);
IkReal x1006=((0.0361)*sj1);
IkReal x1007=(py*r00);
IkReal x1008=((0.2573)*cj3*sj4);
IkReal x1009=((0.139)*x978);
IkReal x1010=(cj0*pz*sj1);
IkReal x1011=(sj3*x978);
IkReal x1012=(pz*r00*sj0);
IkReal x1013=(r02*x979);
IkReal x1014=((0.139)*x977);
IkReal x1015=((0.2573)*x977);
IkReal x1016=(sj1*x981);
IkReal x1017=(r02*x980);
IkReal x1018=(sj3*x977);
evalcond[0]=(((x977*x989))+((sj1*x982))+((sj1*x986))+((cj4*x1011))+(((-1.0)*r02*x983)));
evalcond[1]=((((-1.0)*x978*x989))+(((-1.0)*x982*x983))+((cj4*x1018))+(((-1.0)*r02*x984))+(((-1.0)*x983*x986)));
evalcond[2]=(x1009+(((-1.0)*pz*x983))+((sj1*x985))+((cj0*x995))+(((-1.0)*sj3*x1015))+(((0.2573)*cj3*x978)));
evalcond[3]=((0.19)+(((-1.0)*cj0*px*x983))+x1014+(((-1.0)*pz*x984))+((cj3*x1015))+(((0.2573)*x1011))+(((-1.0)*x983*x985)));
evalcond[4]=(((sj4*x1009))+((pz*sj0*x990))+((x992*x993))+((r01*x995))+(((-1.0)*px*x983*x996))+(((-1.0)*sj3*sj4*x1015))+(((-1.0)*cj0*x983*x997))+(((-1.0)*x1007*x984))+((x1008*x978)));
evalcond[5]=(((cj0*sj1*x997))+(((-1.0)*x1008*x977))+(((-1.0)*py*x984*x992))+((x995*x996))+(((0.19)*r00*sj0))+(((-0.19)*x1003))+(((-0.2573)*sj4*x1011))+(((-1.0)*x1007*x983))+((cj1*px*r01))+(((-1.0)*sj4*x1014))+(((-1.0)*x1012*x984)));
evalcond[6]=((((-1.0)*x1017*x984))+((cj1*x980*x982))+(((-1.0)*x981*x983*x986))+((x986*x988))+((x1001*x981))+(((-1.0)*x1004*x978))+(((-1.0)*x980*x983*x986))+(((-0.38)*py*r01))+(((-1.0)*pz*x999))+((x985*x987*x990))+((x1018*x991))+((x982*x988))+((cj1*x979*x986))+((pz*x1005*x987))+(((-0.08552429)*x978*x989))+((py*x997*x998))+(((-1.0)*r00*x994))+((x1003*x987*x993))+(((-1.0)*x1013*x984))+(((-1.0)*x979*x982*x983))+((cj1*pz*x987*x992))+(((0.0361)*x1001))+(((-1.0)*x981*x982*x983))+(((2.0)*pz*x1002*x985)));
evalcond[7]=((((-1.0)*x1017*x983))+(((-1.0)*x1000*x982))+(((-1.0)*x1000*x986))+(((2.0)*x993*x997))+((x1002*x981))+((x1004*x977))+((x992*x994))+((x1011*x991))+((sj1*x980*x986))+((sj1*x979*x982))+((x1016*x982))+((x1016*x986))+(((-1.0)*x979*x984*x986))+((pz*x987*x990))+(((-1.0)*x980*x982*x984))+(((-1.0)*pz*r02*x985*x998))+(((0.08552429)*x977*x989))+(((-1.0)*x1013*x983))+(((-1.0)*r02*x988))+(((-1.0)*py*sj1*x1003*x987))+(((-1.0)*pz*sj1*x987*x992))+((x985*x999))+(((-1.0)*x1005*x985*x987))+((x1006*x986))+((x1006*x982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1019=((10000.0)*cj4);
IkReal x1020=(cj1*sj3);
IkReal x1021=(sj0*sj1);
IkReal x1022=((2573.0)*r02);
IkReal x1023=(cj0*sj1);
IkReal x1024=(cj1*cj3);
IkReal x1025=((2573.0)*r01);
IkReal x1026=((2573.0)*r00);
CheckValue<IkReal> x1027=IKPowWithIntegerCheck(IKsign(((((1390.0)*cj3*cj4))+(((2573.0)*cj4)))),-1);
if(!x1027.valid){
continue;
}
CheckValue<IkReal> x1028 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*px*x1019*x1023))+((x1020*x1022))+((pz*x1019*x1024))+(((-1.0)*sj3*x1021*x1025))+(((-1.0)*cj3*py*x1019*x1021))+(((-1.0)*sj3*x1023*x1026)))),IkReal(((((-1.0)*pz*x1019*x1020))+((px*sj3*x1019*x1023))+(((1390.0)*cj1*r02))+((x1022*x1024))+((py*sj3*x1019*x1021))+(((-1390.0)*r00*x1023))+(((-1.0)*cj3*x1021*x1025))+(((-1390.0)*r01*x1021))+(((-1.0)*cj3*x1023*x1026)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1028.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1027.value)))+(x1028.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1029=IKcos(j2);
IkReal x1030=IKsin(j2);
IkReal x1031=px*px;
IkReal x1032=py*py;
IkReal x1033=pz*pz;
IkReal x1034=(r01*sj0);
IkReal x1035=((1.0)*cj1);
IkReal x1036=((1.0)*sj1);
IkReal x1037=(py*sj0);
IkReal x1038=(cj0*r00);
IkReal x1039=((2.0)*px);
IkReal x1040=((0.0361)*cj1);
IkReal x1041=(cj3*cj4);
IkReal x1042=(cj1*r00);
IkReal x1043=((0.04688229)*cj4);
IkReal x1044=(cj0*r02);
IkReal x1045=(cj1*py);
IkReal x1046=((0.38)*px);
IkReal x1047=(px*sj1);
IkReal x1048=(r02*sj0);
IkReal x1049=(pz*r01);
IkReal x1050=((2.0)*sj1);
IkReal x1051=((0.38)*r02);
IkReal x1052=((0.38)*pz);
IkReal x1053=(r02*sj1);
IkReal x1054=(cj1*r02);
IkReal x1055=(cj0*r01);
IkReal x1056=((0.0715294)*cj4);
IkReal x1057=(r00*sj1);
IkReal x1058=((0.0361)*sj1);
IkReal x1059=(py*r00);
IkReal x1060=((0.2573)*cj3*sj4);
IkReal x1061=((0.139)*x1030);
IkReal x1062=(cj0*pz*sj1);
IkReal x1063=(sj3*x1030);
IkReal x1064=(pz*r00*sj0);
IkReal x1065=(r02*x1031);
IkReal x1066=((0.139)*x1029);
IkReal x1067=((0.2573)*x1029);
IkReal x1068=(sj1*x1033);
IkReal x1069=(r02*x1032);
IkReal x1070=(sj3*x1029);
evalcond[0]=(((sj1*x1038))+((sj1*x1034))+(((-1.0)*r02*x1035))+((cj4*x1063))+((x1029*x1041)));
evalcond[1]=((((-1.0)*x1035*x1038))+(((-1.0)*x1034*x1035))+(((-1.0)*r02*x1036))+(((-1.0)*x1030*x1041))+((cj4*x1070)));
evalcond[2]=((((0.2573)*cj3*x1030))+((cj0*x1047))+x1061+(((-1.0)*pz*x1035))+(((-1.0)*sj3*x1067))+((sj1*x1037)));
evalcond[3]=((0.19)+x1066+(((-1.0)*x1035*x1037))+(((-1.0)*pz*x1036))+(((-1.0)*cj0*px*x1035))+(((0.2573)*x1063))+((cj3*x1067)));
evalcond[4]=(((x1030*x1060))+((r01*x1047))+(((-1.0)*px*x1035*x1048))+(((-1.0)*cj0*x1035*x1049))+(((-1.0)*x1036*x1059))+((sj4*x1061))+((pz*sj0*x1042))+(((-1.0)*sj3*sj4*x1067))+((x1044*x1045)));
evalcond[5]=((((-1.0)*x1036*x1064))+((cj0*sj1*x1049))+(((-0.19)*x1055))+(((-1.0)*x1029*x1060))+(((-1.0)*sj4*x1066))+(((-0.2573)*sj4*x1063))+(((0.19)*r00*sj0))+((x1047*x1048))+(((-1.0)*py*x1036*x1044))+(((-1.0)*x1035*x1059))+((cj1*px*r01)));
evalcond[6]=(((cj1*x1032*x1034))+(((-1.0)*x1036*x1069))+(((-1.0)*x1036*x1065))+(((2.0)*pz*x1037*x1054))+(((-1.0)*x1033*x1034*x1035))+((x1038*x1040))+(((-1.0)*r00*x1046))+((x1034*x1040))+(((-0.08552429)*x1030*x1041))+(((-1.0)*x1032*x1035*x1038))+((x1039*x1045*x1055))+(((-0.38)*py*r01))+(((-1.0)*x1033*x1035*x1038))+(((0.0361)*x1053))+(((-1.0)*pz*x1051))+((pz*x1039*x1057))+(((-1.0)*x1031*x1034*x1035))+((cj1*x1031*x1038))+((x1037*x1039*x1042))+((py*x1049*x1050))+((x1033*x1053))+((cj1*pz*x1039*x1044))+((x1043*x1070))+(((-1.0)*x1030*x1056)));
evalcond[7]=((((-1.0)*r02*x1040))+(((-1.0)*x1032*x1034*x1036))+((x1043*x1063))+((x1037*x1051))+((x1038*x1058))+((x1034*x1058))+(((-1.0)*x1038*x1052))+((x1038*x1068))+((sj1*x1031*x1034))+(((-1.0)*pz*r02*x1037*x1050))+((pz*x1039*x1042))+((sj1*x1032*x1038))+(((-1.0)*x1031*x1036*x1038))+((x1029*x1056))+(((-1.0)*py*sj1*x1039*x1055))+(((2.0)*x1045*x1049))+(((-1.0)*x1034*x1052))+(((0.08552429)*x1029*x1041))+(((-1.0)*x1037*x1039*x1057))+(((-1.0)*x1035*x1065))+(((-1.0)*x1035*x1069))+((x1033*x1054))+(((-1.0)*pz*sj1*x1039*x1044))+((x1044*x1046))+((x1034*x1068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1071=(cj0*r00);
IkReal x1072=(cj1*sj3);
IkReal x1073=(sj1*sj3);
IkReal x1074=(cj1*cj3);
IkReal x1075=(r01*sj0);
IkReal x1076=((1.0)*cj3*sj1);
IkReal x1077=((1.0)*cj3*x1075);
CheckValue<IkReal> x1078 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1076))+(((-1.0)*x1071*x1073))+(((-1.0)*x1071*x1074))+(((-1.0)*x1074*x1075))+(((-1.0)*x1073*x1075))+((r02*x1072)))),IkReal(((((-1.0)*x1075*x1076))+(((-1.0)*x1071*x1076))+((x1071*x1072))+((x1072*x1075))+((r02*x1073))+((r02*x1074)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1078.valid){
continue;
}
CheckValue<IkReal> x1079=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1079.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1078.value)+(((1.5707963267949)*(x1079.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1080=IKcos(j2);
IkReal x1081=IKsin(j2);
IkReal x1082=px*px;
IkReal x1083=py*py;
IkReal x1084=pz*pz;
IkReal x1085=(r01*sj0);
IkReal x1086=((1.0)*cj1);
IkReal x1087=((1.0)*sj1);
IkReal x1088=(py*sj0);
IkReal x1089=(cj0*r00);
IkReal x1090=((2.0)*px);
IkReal x1091=((0.0361)*cj1);
IkReal x1092=(cj3*cj4);
IkReal x1093=(cj1*r00);
IkReal x1094=((0.04688229)*cj4);
IkReal x1095=(cj0*r02);
IkReal x1096=(cj1*py);
IkReal x1097=((0.38)*px);
IkReal x1098=(px*sj1);
IkReal x1099=(r02*sj0);
IkReal x1100=(pz*r01);
IkReal x1101=((2.0)*sj1);
IkReal x1102=((0.38)*r02);
IkReal x1103=((0.38)*pz);
IkReal x1104=(r02*sj1);
IkReal x1105=(cj1*r02);
IkReal x1106=(cj0*r01);
IkReal x1107=((0.0715294)*cj4);
IkReal x1108=(r00*sj1);
IkReal x1109=((0.0361)*sj1);
IkReal x1110=(py*r00);
IkReal x1111=((0.2573)*cj3*sj4);
IkReal x1112=((0.139)*x1081);
IkReal x1113=(cj0*pz*sj1);
IkReal x1114=(sj3*x1081);
IkReal x1115=(pz*r00*sj0);
IkReal x1116=(r02*x1082);
IkReal x1117=((0.139)*x1080);
IkReal x1118=((0.2573)*x1080);
IkReal x1119=(sj1*x1084);
IkReal x1120=(r02*x1083);
IkReal x1121=(sj3*x1080);
evalcond[0]=(((x1080*x1092))+((cj4*x1114))+(((-1.0)*r02*x1086))+((sj1*x1089))+((sj1*x1085)));
evalcond[1]=((((-1.0)*x1081*x1092))+(((-1.0)*r02*x1087))+((cj4*x1121))+(((-1.0)*x1085*x1086))+(((-1.0)*x1086*x1089)));
evalcond[2]=((((-1.0)*pz*x1086))+x1112+(((0.2573)*cj3*x1081))+(((-1.0)*sj3*x1118))+((sj1*x1088))+((cj0*x1098)));
evalcond[3]=((0.19)+(((-1.0)*pz*x1087))+x1117+(((-1.0)*cj0*px*x1086))+(((0.2573)*x1114))+((cj3*x1118))+(((-1.0)*x1086*x1088)));
evalcond[4]=(((r01*x1098))+((pz*sj0*x1093))+((x1095*x1096))+(((-1.0)*px*x1086*x1099))+((sj4*x1112))+(((-1.0)*sj3*sj4*x1118))+((x1081*x1111))+(((-1.0)*cj0*x1086*x1100))+(((-1.0)*x1087*x1110)));
evalcond[5]=((((-1.0)*py*x1087*x1095))+(((-0.2573)*sj4*x1114))+(((-1.0)*x1086*x1110))+((x1098*x1099))+(((0.19)*r00*sj0))+(((-1.0)*sj4*x1117))+((cj1*px*r01))+((cj0*sj1*x1100))+(((-0.19)*x1106))+(((-1.0)*x1080*x1111))+(((-1.0)*x1087*x1115)));
evalcond[6]=((((-1.0)*x1081*x1107))+(((2.0)*pz*x1088*x1105))+((x1094*x1121))+(((-1.0)*x1083*x1086*x1089))+((x1085*x1091))+((cj1*x1083*x1085))+((x1089*x1091))+(((-1.0)*x1084*x1086*x1089))+(((-1.0)*x1087*x1120))+(((-1.0)*x1084*x1085*x1086))+(((-0.38)*py*r01))+((cj1*pz*x1090*x1095))+((x1088*x1090*x1093))+(((-0.08552429)*x1081*x1092))+(((-1.0)*pz*x1102))+((x1090*x1096*x1106))+(((-1.0)*x1082*x1085*x1086))+((cj1*x1082*x1089))+((py*x1100*x1101))+((x1084*x1104))+(((0.0361)*x1104))+(((-1.0)*r00*x1097))+(((-1.0)*x1087*x1116))+((pz*x1090*x1108)));
evalcond[7]=(((x1094*x1114))+(((-1.0)*py*sj1*x1090*x1106))+(((-1.0)*x1083*x1085*x1087))+((sj1*x1083*x1089))+(((-1.0)*pz*r02*x1088*x1101))+(((-1.0)*x1085*x1103))+((sj1*x1082*x1085))+((x1095*x1097))+(((-1.0)*r02*x1091))+(((0.08552429)*x1080*x1092))+((x1089*x1119))+((x1080*x1107))+((x1085*x1119))+((x1089*x1109))+((x1085*x1109))+(((-1.0)*x1086*x1116))+(((-1.0)*x1089*x1103))+((pz*x1090*x1093))+(((-1.0)*x1086*x1120))+((x1088*x1102))+((x1084*x1105))+(((2.0)*x1096*x1100))+(((-1.0)*x1088*x1090*x1108))+(((-1.0)*x1082*x1087*x1089))+(((-1.0)*pz*sj1*x1090*x1095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - tobi (8a8d8bcc07f918598a13003d35c7aa93)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
